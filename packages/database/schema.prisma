// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"

  allowAny = false
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default("")
  username               String         @unique() @db.VarChar(80)
  password               String         @db.VarChar(80)
  /// @zod.string.url()
  avatar                 String         @db.VarChar(1024)
  /// @zod.string.email()
  email                  String?        @unique() @db.VarChar(80)
  nickname               String         @default("") @db.VarChar(50)
  phone                  String?        @db.VarChar(255)
  /// @zod.string.max(100)
  desc                   String?        @db.VarChar(100)
  gender                 Int?           @default(0) @db.SmallInt
  /// @zod.string.max(100)
  yoId                   String?        @db.VarChar(10)
  status                 Int?           @default(1) @db.SmallInt
  createdAt              DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime       @updatedAt @map("updated_at")
  role                   Role           @default(User)
  todos                  Todo[]
  notes                  Note[]
  collections            Collection[]
  histories              History[]
  comment                Comment[]
  notificationSenders    Notification[] @relation("Sender")
  notificationRecipients Notification[] @relation("Recipient")
  campus                 Campus?        @relation(fields: [campusId], references: [id])
  campusId               String?

  @@index([yoId])
}

model Todo {
  id        String   @id @default("")
  value     String
  status    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Note {
  id          String       @id @default("")
  title       String       @db.VarChar(100)
  content     String
  publishTime DateTime?
  /// [Images]
  images      Json         @default("[]")
  /// [Image]
  cover       Json         @default("{}") /// @zod.custom.omit(["model", "input"])
  /// [Interact]
  interact    Json         @default("{\"likedCount\": 0, \"collectCount\": 0, \"commentCount\": 0 }") /// @zod.custom.omit(["model", "input"])
  state       NoteState
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @map("updated_at")
  tags        Tag[]
  collections Collection[]
  history     History[]
  user        User         @relation(fields: [userId], references: [id])
  userId      String

  campus   Campus? @relation(fields: [campusId], references: [id])
  campusId String?

  @@index([createdAt])
}

model Tag {
  id        String   @id @default("")
  name      String   @unique() @db.VarChar(20)
  type      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  notes     Note[]

  @@index([name])
}

model Collection {
  id          String   @id @default("")
  name        String
  description String?  @db.VarChar(100)
  isPublished Boolean  @default(false)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at")
  note        Note[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model History {
  id        String   @id @default("")
  visitedAt DateTime @default(now())
  note      Note?    @relation(fields: [noteId], references: [id], onDelete: SetNull)
  noteId    String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Comment {
  id        String         @id @default("")
  refId     String         @map("ref_id")
  refType   CommentRefType @map("ref_type")
  /// @zod.string.min(1).max(1024)
  content   String         @db.VarChar(1024)
  parentId  String?
  parent    Comment?       @relation("ChildComments", fields: [parentId], references: [id])
  children  Comment[]      @relation("ChildComments")
  ip        String?
  location  String?
  /// [Interact]
  interact  Json           @default("{\"likedCount\": 0, \"commentCount\": 0 }") /// @zod.custom.omit(["model", "input"])
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User           @relation(fields: [userId], references: [id])
  userId    String

  @@index([refId, refType])
}

model Notification {
  id          String                 @id @default("")
  content     String
  action      NotificationAction
  status      Int?                   @default(0) @db.SmallInt
  sourceId    String                 @map("source_id")
  sourceType  NotificationSourceType @map("source_type")
  /// [NotificationSource]
  source      Json?                  @default("{}")
  createdAt   DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  senderId    String
  sender      User                   @relation("Sender", fields: [senderId], references: [id])
  recipientId String
  recipient   User                   @relation("Recipient", fields: [recipientId], references: [id])
  // channel
}

model Campus {
  id        String   @id @default("")
  name      String
  logo      String
  desc      String?
  alias     String?
  location  String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  /// [Images]
  carousels Json     @default("[]")
  users     User[]
  notes     Note[]
}

// model File {
//   id         String   @id @default("")
//   sourcename String
//   filename   String
//   ext        String
//   path       String
//   mimetype   String
//   size       Int
//   createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
//   updatedAt  DateTime @updatedAt @map("updated_at")
// }

enum Role {
  Admin // 系统管理员
  Manager // 校区管理员
  User // 用户
}

enum NoteType {
  Normal
  Video
}

enum NoteState {
  Draft // 草稿
  Published // 已发布
  Audit // 审核中
  Rejected // 审核不通过
}

enum CommentRefType {
  Note
}

enum NotificationAction {
  Like
  Follow
  Comment
  System
}

enum NotificationSourceType {
  Note
  Comment
  User
}
