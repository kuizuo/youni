var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AbilityService.html",[0,0.464,1,3.155]],["body/injectables/AbilityService.html",[0,0.663,1,4.51,2,1.25,3,0.035,4,0.041,5,0.028,6,5.075,7,0.607,8,1.765,9,8.871,10,1.789,11,4.429,12,1.205,13,8.254,14,4.905,15,1.205,16,4.528,17,6.779,18,5.749,19,1.166,20,5.075,21,0.761,22,0.006,23,0.586,24,0.704,25,0.652,26,5.608,27,5.075,28,1.186,29,5.075,30,2.386,31,6.338,32,5.075,33,2.33,34,2.508,35,1.853,36,6.828,37,5.075,38,0.114,39,0.493,40,2.647,41,4.528,42,2.895,43,3.218,44,5.075,45,5.075,46,5.075,47,0.041,48,0.242,49,1.851,50,1.578,51,5.075,52,0.513,53,2.693,54,4.168,55,5.075,56,2.895,57,4.141,58,5.075,59,4.168,60,5.075,61,5.075,62,1.023,63,2.446,64,5.075,65,0.004,66,0.004]],["title/controllers/AccountController.html",[67,1.81,68,3.922]],["body/controllers/AccountController.html",[3,0.029,4,0.034,5,0.024,7,0.506,10,1.168,12,1.062,15,0.746,19,1.033,21,1.144,22,0.006,23,0.881,24,0.787,25,0.981,28,1.325,38,0.119,39,0.411,47,0.034,48,0.202,50,1.39,62,1.05,65,0.004,66,0.004,67,1.603,68,4.942,69,1.634,70,4.228,71,2.037,72,3.248,73,2.325,74,6.017,75,3.759,76,4.623,77,6.251,78,4.228,79,4.668,80,2.951,81,6.017,82,4.228,83,2.922,84,4.039,85,4.228,86,3.866,87,5.541,88,6.017,89,4.228,90,4.228,91,6.017,92,4.228,93,1.289,94,4.228,95,5.541,96,6.017,97,4.228,98,4.131,99,3.248,100,2.681,101,2.205,102,2.037,103,5.369,104,3.772,105,4.839,106,4.228,107,2.92,108,3.472,109,4.131,110,3.772,111,3.996,112,3.069,113,4.228,114,3.248,115,4.228,116,3.772,117,4.228,118,4.228,119,4.228,120,4.228,121,3.772,122,1.753,123,4.228,124,4.228,125,4.228,126,4.228,127,4.228,128,4.228,129,4.228,130,4.228,131,4.228,132,4.228]],["title/classes/AdminEventsGateway.html",[48,0.228,133,2.142]],["body/classes/AdminEventsGateway.html",[3,0.037,4,0.044,5,0.03,7,0.646,8,1.838,10,1.047,15,1.255,19,1.077,21,0.809,22,0.006,23,0.623,24,0.733,25,0.693,38,0.12,47,0.044,48,0.257,49,2.594,50,1.838,52,0.359,62,0.809,65,0.004,66,0.004,80,2.086,111,5.329,133,3.19,134,1.081,135,5.395,136,6.113,137,6.113,138,6.382,139,7.099,140,5.164,141,6.554,142,4.814,143,6.554,144,5.165,145,5.395,146,6.113,147,5.395,148,4.814,149,5.395,150,3.564,151,4.814,152,6.346,153,3.727,154,4.145,155,3.422,156,3.422,157,6.346,158,4.814,159,5.465,160,5.465,161,7.112,162,1.17,163,4.814,164,4.814]],["title/classes/AllExceptionsFilter.html",[48,0.228,165,3.299]],["body/classes/AllExceptionsFilter.html",[3,0.029,4,0.034,5,0.024,7,0.503,8,1.549,10,1.356,11,4.086,12,1.057,15,1.232,19,1.031,21,0.63,22,0.006,23,0.485,24,0.433,25,0.54,28,1.041,30,1.977,33,1.93,34,2.078,35,1.895,38,0.111,39,0.409,47,0.034,48,0.201,49,2.186,50,1.933,52,0.572,62,0.63,63,3.879,65,0.004,66,0.004,93,1.282,134,0.843,165,4.14,166,7.181,167,2.904,168,6.232,169,6.793,170,5.993,171,5.348,172,4.351,173,4.614,174,5.527,175,4.204,176,6.188,177,4.204,178,4.351,179,3.052,180,3.452,181,2.193,182,5.07,183,1.977,184,2.026,185,2.026,186,4.351,187,3.23,188,2.777,189,2.479,190,2.325,191,3.801,192,3.752,193,1.692,194,3.453,195,4.746,196,3.063,197,3.23,198,3.24,199,1.019,200,3.752,201,2.256,202,3.752,203,2.777,204,3.752,205,3.453,206,3.752,207,3.453,208,2.479,209,3.752,210,2.904,211,3.752,212,5.736,213,3.752,214,3.752,215,3.752,216,5.348,217,3.752,218,3.752,219,3.752,220,2.134,221,3.752,222,3.752,223,2.777,224,3.752,225,3.752,226,3.752,227,2.193,228,2.568,229,1.93,230,3.752,231,3.752,232,5.348,233,3.752,234,3.752,235,3.959,236,3.752]],["title/classes/AllExceptionsFilter-1.html",[48,0.189,165,2.744,237,2.131]],["body/classes/AllExceptionsFilter-1.html",[3,0.045,4,0.054,5,0.037,7,0.79,12,1.427,19,0.894,21,0.989,22,0.006,23,0.762,24,0.68,25,0.848,28,1.146,30,3.103,38,0.107,39,0.641,47,0.054,48,0.315,63,4.39,65,0.005,66,0.005,93,2.013,134,1.323,153,4.559,162,1.431,165,5.585,167,4.559,172,5.87,173,6.018,174,6.614,176,4.559,238,8.085,239,6.6,240,8.085,241,5.421]],["title/modules/AppModule.html",[242,1.254,243,3.669]],["body/modules/AppModule.html",[3,0.021,4,0.025,5,0.017,22,0.006,35,1.292,38,0.129,39,0.3,40,1.609,47,0.025,48,0.147,53,1.878,62,0.462,65,0.003,66,0.003,114,3.658,116,2.752,165,3.289,242,1.717,243,7.604,244,1.193,245,1.242,246,1.295,247,1.295,248,1.295,249,1.295,250,2.752,251,2.752,252,5.159,253,5.159,254,5.422,255,5.422,256,5.159,257,5.159,258,5.422,259,5.422,260,5.422,261,5.422,262,5.159,263,4.933,264,5.422,265,5.159,266,5.422,267,5.422,268,5.422,269,5.422,270,5.422,271,4.129,272,1.999,273,1.295,274,1.295,275,3.085,276,2.186,277,2.038,278,2.131,279,1.819,280,4.776,281,4.762,282,6.539,283,4.762,284,4.776,285,2.534,286,1.705,287,3.085,288,4.762,289,2.37,290,3.085,291,2.131,292,3.658,293,3.085,294,2.534,295,3.085,296,3.911,297,3.085,298,4.762,299,3.085,300,3.085,301,2.752,302,3.085,303,3.085,304,3.085,305,3.085,306,3.085,307,3.085,308,3.085,309,3.085,310,3.085,311,3.085,312,2.038,313,3.085,314,3.085,315,3.085,316,3.085,317,3.085,318,3.085,319,3.085,320,3.085,321,3.085,322,3.085,323,3.085,324,2.752,325,0.784,326,3.085,327,4.762,328,4.762,329,3.085,330,4.762,331,3.085,332,3.085,333,2.24,334,3.085,335,5.651,336,7.066,337,2.908,338,3.085,339,2.534,340,2.534,341,2.534,342,1.525]],["title/controllers/AuthController.html",[67,1.81,343,3.922]],["body/controllers/AuthController.html",[3,0.031,4,0.037,5,0.025,7,0.54,10,1.222,12,1.111,15,0.796,19,0.853,21,0.944,22,0.006,23,0.727,24,0.809,25,0.809,28,1.093,35,1.223,38,0.124,39,0.438,47,0.037,48,0.215,52,0.482,62,0.676,65,0.004,66,0.004,67,1.709,69,1.743,71,2.173,73,2.108,75,3.379,80,2.434,83,1.448,86,3.623,93,1.375,98,3.713,100,2.859,101,2.352,102,2.173,109,4.278,110,4.023,111,4.139,112,3.273,122,1.965,188,5.188,190,2.493,191,3.993,199,2.074,343,5.171,344,4.509,345,3.703,346,7.255,347,5.618,348,4.509,349,6.034,350,5.998,351,5.428,352,5.701,353,6.296,354,4.509,355,4.509,356,5.701,357,4.509,358,4.509,359,3.703,360,2.978,361,4.023,362,4.509,363,4.509,364,4.023,365,4.023,366,4.509,367,2.824,368,3.464,369,3.703,370,4.509,371,3.703,372,4.509,373,4.509,374,4.509,375,3.703,376,2.978,377,4.509,378,4.509,379,4.023,380,5.574,381,4.509,382,3.115,383,4.509,384,2.859,385,4.509,386,1.853,387,3.464,388,4.509,389,4.509,390,4.509,391,4.509]],["title/interfaces/AuthGatewayOptions.html",[193,1.922,392,3.922]],["body/interfaces/AuthGatewayOptions.html",[3,0.027,4,0.032,5,0.022,7,0.47,8,1.474,10,0.762,15,0.693,22,0.006,24,0.693,35,1.548,38,0.122,39,0.381,47,0.055,48,0.187,49,1.432,50,1.553,52,0.574,56,2.239,62,1.374,63,1.892,65,0.004,66,0.004,73,1.816,79,1.94,84,1.892,122,1.681,136,4.383,137,4.383,138,4.878,141,2.85,143,4.878,144,3.715,146,4.383,150,2.593,153,3.94,155,2.489,156,3.618,159,4.383,160,6.64,162,1.237,193,2.296,199,2.094,208,2.314,228,3.484,229,3.597,325,1.451,384,4.678,386,2.344,392,5.519,393,2.314,394,3.502,395,3.016,396,2.314,397,2.239,398,3.224,399,3.502,400,3.502,401,4.104,402,3.224,403,5.934,404,4.878,405,3.502,406,4.141,407,3.016,408,3.016,409,3.016,410,3.016,411,2.397,412,3.016,413,3.224,414,4.685,415,1.892,416,3.224,417,2.239,418,5.519,419,2.314,420,3.502,421,3.502,422,2.489,423,3.502,424,3.016,425,3.502,426,3.502,427,3.502,428,2.711,429,5.09,430,3.502,431,3.502,432,3.502,433,3.502,434,3.502,435,5.09,436,5.09,437,3.502,438,3.502,439,6.581,440,3.502,441,3.502,442,3.502,443,3.016,444,3.502,445,3.502,446,2.85,447,3.502,448,3.502,449,3.502,450,2.85,451,3.502,452,3.502,453,3.502,454,3.502,455,3.502,456,3.502,457,3.016,458,3.502,459,3.502,460,3.502,461,3.502]],["title/modules/AuthModule.html",[242,1.254,252,3.299]],["body/modules/AuthModule.html",[3,0.03,4,0.035,5,0.024,22,0.006,38,0.128,39,0.422,47,0.035,48,0.207,52,0.513,53,3.334,62,0.65,65,0.004,66,0.004,68,5.836,69,2.985,111,3.496,112,3.15,133,3.653,150,2.866,186,4.45,187,3.334,242,1.866,244,1.677,245,1.747,246,1.821,247,1.821,248,1.821,249,2.983,252,6.625,271,4.674,272,2.573,273,1.821,274,1.821,276,3.262,278,4.234,279,2.558,286,2.399,337,2.65,342,2.145,343,5.836,401,3.743,462,3.872,463,3.872,464,3.872,465,3.872,466,6.137,467,3.653,468,6.137,469,6.495,470,6.495,471,4.339,472,5.836,473,5.836,474,3.743,475,2.954,476,4.897,477,6.129,478,6.129,479,2.65,480,3.564,481,2.997,482,4.339,483,4.339,484,4.339,485,4.339,486,4.339,487,3.334,488,4.339,489,4.339,490,4.339,491,6.129,492,4.339,493,6.129,494,6.129,495,4.339,496,4.339,497,3.872,498,3.872]],["title/injectables/AuthService.html",[0,0.464,111,2.724]],["body/injectables/AuthService.html",[0,0.556,2,0.97,3,0.027,4,0.032,5,0.022,7,0.471,10,1.307,12,1.009,15,1.009,19,1.062,21,1.176,22,0.006,23,0.906,24,0.945,25,1.008,28,1.283,35,1.552,38,0.119,39,0.383,47,0.032,48,0.188,50,1.556,52,0.491,62,1.009,65,0.004,66,0.004,72,3.026,73,2.259,75,3.964,83,2.162,84,3.56,93,1.744,109,4.979,111,3.262,122,2.048,180,1.947,181,2.054,183,1.852,184,1.898,185,1.898,199,2.305,351,2.498,352,2.859,384,4.27,401,5.157,487,3.026,499,3.939,500,5.718,501,6.732,502,5.718,503,5.718,504,2.498,505,3.97,506,3.939,507,5.718,508,3.939,509,2.914,510,3.939,511,5.714,512,6.592,513,4.152,514,3.939,515,1.852,516,5.718,517,3.939,518,5.718,519,6.592,520,3.939,521,3.514,522,3.372,523,2.178,524,3.939,525,3.939,526,2.859,527,3.514,528,3.235,529,1.999,530,2.498,531,3.939,532,2.114,533,3.939,534,2.322,535,2.902,536,5.102,537,5.102,538,3.939,539,3.514,540,3.939,541,3.939,542,3.627,543,3.939,544,3.939,545,1.243,546,3.939]],["title/classes/BaseAbility.html",[43,3.029,48,0.228]],["body/classes/BaseAbility.html",[3,0.039,4,0.046,5,0.032,7,0.678,12,1.295,19,0.766,21,0.848,22,0.006,23,0.653,24,0.888,25,0.728,28,0.983,38,0.108,43,4.654,47,0.07,48,0.27,65,0.005,66,0.005,79,4.026,83,2.768,134,1.134,409,4.349,410,4.349,411,3.457,412,4.349,415,3.925,547,4.649,548,7.077,549,5.069,550,5.069,551,5.66,552,5.38,553,6.548,554,3.338,555,5.66,556,3.739,557,6.257,558,7.266,559,3.739,560,7.266,561,6.689,562,4.974,563,2.482,564,5.05,565,2.376,566,6.548,567,3.451,568,6.548,569,3.938,570,3.369,571,5.66,572,5.66,573,5.05]],["title/classes/BaseGateway.html",[48,0.228,574,3.922]],["body/classes/BaseGateway.html",[3,0.037,4,0.044,5,0.03,7,0.641,12,1.249,19,1.074,21,1.188,22,0.006,23,0.915,24,0.961,25,1.019,28,1.377,30,3.329,38,0.094,47,0.058,48,0.338,62,0.803,65,0.004,66,0.004,134,1.074,156,3.398,162,1.162,196,3.699,198,3.395,227,4.575,291,4.89,367,3.557,386,3.259,403,6.671,404,3.89,406,6.541,407,4.116,408,4.116,424,5.439,443,5.439,457,4.116,515,2.519,548,5.815,574,6.512,575,4.78,576,7.075,577,6.317,578,6.317,579,4.78,580,5.358,581,6.317,582,5.358,583,5.358,584,6.317,585,6.317]],["title/classes/BatchDeleteDto.html",[48,0.228,586,3.029]],["body/classes/BatchDeleteDto.html",[3,0.049,4,0.058,5,0.04,22,0.006,38,0.112,47,0.058,48,0.338,52,0.471,65,0.005,66,0.005,134,1.42,162,1.831,586,5.353,587,7.087,588,8.441,589,2.089,590,1.955,591,2.29,592,2.021,593,7.087,594,3.803,595,3.697,596,7.087]],["title/classes/BizException.html",[48,0.228,180,2.361]],["body/classes/BizException.html",[3,0.039,4,0.046,5,0.032,7,0.679,8,1.9,15,1.001,19,0.995,21,0.85,22,0.006,23,0.655,24,0.758,25,0.729,38,0.098,39,0.551,47,0.06,48,0.271,52,0.542,62,0.85,65,0.005,66,0.005,134,1.137,162,1.594,178,5.919,179,4.119,180,4.03,182,4.119,183,4.201,184,2.734,185,2.734,198,3.472,199,1.781,227,4.498,367,3.657,422,4.662,428,3.92,597,5.674,598,3.465,599,8.153,600,7.35,601,5.674,602,8.624,603,5.674,604,5.674,605,5.674,606,7.35,607,7.35,608,7.35,609,7.35,610,5.674,611,5.674]],["title/classes/BroadcastBaseGateway.html",[48,0.228,404,3.467]],["body/classes/BroadcastBaseGateway.html",[3,0.035,4,0.041,5,0.028,7,0.605,12,1.201,19,1.116,21,1.235,22,0.006,23,0.951,24,0.962,25,1.059,28,1.431,30,3.62,38,0.09,47,0.055,48,0.325,62,0.757,65,0.004,66,0.004,134,1.012,156,3.204,162,1.476,196,3.613,198,3.316,227,4.486,291,4.703,367,3.454,386,3.535,403,6.574,404,4.942,406,6.684,407,3.882,408,3.882,424,5.231,443,5.231,457,5.231,515,2.376,548,5.591,574,7.277,575,4.508,576,6.87,577,6.074,578,6.074,579,4.508,581,6.074,584,6.074,585,6.074,612,6.808,613,5.052,614,3.49,615,7.699,616,5.052,617,5.052,618,5.052]],["title/modules/BullModule.html",[242,1.254,253,3.299]],["body/modules/BullModule.html",[3,0.043,4,0.051,5,0.035,22,0.006,38,0.122,39,0.61,47,0.051,48,0.299,52,0.417,62,0.941,65,0.005,66,0.005,71,3.777,75,3.368,173,4.146,242,2.059,244,2.427,253,5.904,276,3.598,277,4.146,278,5.414,279,3.701,286,3.47,337,3.834,342,3.103,474,4.787,476,5.677,505,2.951,619,6.277,620,6.277,621,4.823,622,6.277,623,6.277,624,4.823,625,5.155,626,6.277,627,5.155,628,6.277,629,5.601]],["title/modules/CacheModule.html",[242,1.254,254,3.467]],["body/modules/CacheModule.html",[3,0.038,4,0.045,5,0.031,22,0.006,38,0.123,39,0.539,47,0.045,48,0.265,52,0.369,53,3.182,62,0.832,65,0.004,66,0.004,144,5.374,242,2.119,244,2.146,245,2.235,246,2.33,247,2.33,248,2.33,249,3.386,254,6.824,272,3.042,273,2.33,274,2.33,276,3.327,278,5.006,279,3.273,286,3.069,324,4.953,325,1.843,337,3.39,342,2.744,474,4.426,476,5.424,529,3.678,621,4.265,624,6.571,625,4.559,630,4.953,631,4.953,632,4.953,633,5.551,634,5.551,635,4.559,636,5.952,637,7.246,638,4.265,639,5.551,640,5.551,641,4.953,642,5.551]],["title/injectables/CacheService.html",[0,0.464,144,2.64]],["body/injectables/CacheService.html",[0,0.499,2,0.839,3,0.023,4,0.028,5,0.019,7,0.408,8,1.328,10,1.679,11,3.695,12,0.907,15,0.601,19,1.171,21,1.164,22,0.006,23,0.795,24,0.928,25,0.885,28,1.196,31,2.8,33,1.565,34,3.984,35,1.678,38,0.11,39,0.331,47,0.05,48,0.163,52,0.491,56,1.944,62,1.296,63,1.643,65,0.003,66,0.003,73,1.696,84,3.318,122,1.548,140,3.73,144,2.841,196,3.24,199,1.499,208,3.03,220,1.73,235,2.252,342,1.685,367,3.88,397,4.732,409,2.619,410,2.619,411,2.082,412,2.619,413,2.8,414,4.22,415,1.643,416,2.8,417,1.944,419,2.01,505,3.238,513,3.73,529,1.73,635,2.8,636,4.22,638,6.919,643,3.041,644,6.184,645,4.585,646,6.885,647,4.585,648,6.184,649,3.409,650,5.138,651,5.138,652,3.409,653,3.73,654,5.138,655,7.192,656,3.409,657,4.579,658,5.518,659,3.409,660,5.138,661,6.885,662,3.409,663,3.409,664,3.409,665,5.138,666,3.409,667,3.409,668,3.409,669,3.409,670,3.409,671,4.585,672,3.409,673,2.355,674,2.475,675,2.931,676,1.944,677,2.8,678,3.409,679,3.409,680,3.409,681,3.409,682,3.409,683,3.409,684,3.409,685,3.409,686,3.409,687,6.885,688,3.409,689,6.184,690,6.184,691,3.409,692,3.041,693,3.409,694,3.409,695,3.409,696,5.138,697,3.409,698,6.184,699,3.409,700,3.409,701,3.409,702,3.409,703,2.475,704,2.355]],["title/classes/CannotFindException.html",[48,0.228,705,4.261]],["body/classes/CannotFindException.html",[3,0.047,4,0.056,5,0.039,15,1.572,19,0.934,22,0.006,38,0.11,39,0.67,47,0.067,48,0.329,52,0.458,65,0.005,66,0.005,134,1.382,162,1.801,705,7.409,706,8.304,707,6.896,708,7.95,709,6.896,710,6.896,711,4.764,712,6.896,713,6.896,714,6.896,715,6.896]],["title/controllers/CaptchaController.html",[67,1.81,716,3.922]],["body/controllers/CaptchaController.html",[3,0.033,4,0.039,5,0.027,7,0.575,10,0.932,12,1.16,19,0.65,21,0.719,22,0.006,23,0.554,24,0.495,25,0.617,28,0.833,33,2.204,38,0.127,39,0.466,47,0.039,48,0.229,52,0.498,62,0.719,65,0.004,66,0.004,67,1.819,69,1.856,71,2.313,73,1.847,80,1.856,84,3.168,86,3.288,100,3.044,101,2.503,102,2.313,122,1.201,220,2.436,325,1.221,367,2.949,368,3.688,386,2.702,505,3.793,522,2.83,523,2.654,526,3.485,529,2.436,545,1.515,673,3.316,674,3.485,675,2.738,676,2.738,703,3.485,704,3.316,711,3.316,716,5.4,717,4.8,718,4.8,719,6.575,720,4.8,721,5.572,722,4.8,723,4.8,724,2.654,725,5.4,726,4.283,727,3.485,728,6.575,729,3.942,730,4.8,731,5.4,732,4.283,733,3.688,734,4.8,735,4.8,736,4.8,737,4.283,738,4.8,739,3.942,740,4.8,741,2.257,742,3.942,743,3.688,744,4.8,745,4.8,746,5.18,747,5.18,748,4.8,749,3.942,750,6.575,751,4.8,752,4.8,753,4.8,754,4.8,755,4.8,756,4.8,757,4.8,758,4.283,759,3.316,760,4.8,761,4.8,762,5.051,763,4.8,764,4.8,765,4.8]],["title/modules/CaptchaModule.html",[242,1.254,466,3.467]],["body/modules/CaptchaModule.html",[3,0.043,4,0.051,5,0.035,22,0.006,38,0.114,39,0.615,47,0.051,48,0.302,52,0.421,53,3.642,65,0.005,66,0.005,69,3.046,133,4.142,242,2.253,244,2.447,245,2.547,246,2.656,247,2.656,248,2.656,249,3.601,272,3.307,273,2.656,274,2.656,466,6.835,467,4.142,475,3.797,716,7.045,766,6.328,767,6.328,768,6.328,769,6.328,770,6.47,771,6.328]],["title/injectables/CaptchaService.html",[0,0.464,770,3.922]],["body/injectables/CaptchaService.html",[0,0.633,2,1.167,3,0.032,4,0.039,5,0.027,7,0.567,10,1.266,12,1.15,15,1.15,19,1.009,21,1.117,22,0.006,23,0.86,24,0.768,25,0.958,28,1.132,35,1.286,38,0.12,39,0.461,47,0.039,48,0.226,50,1.095,52,0.433,65,0.004,66,0.004,72,5.009,73,2.141,84,3.867,122,1.864,180,2.343,181,2.473,183,2.229,184,2.285,185,2.285,196,3.267,199,2.298,227,4.645,475,3.867,504,3.006,505,4.187,509,3.165,515,2.229,522,3.844,523,2.621,529,2.406,532,3.998,535,2.406,542,3.006,545,2.058,657,2.795,673,3.275,674,3.442,675,2.704,676,2.704,711,3.275,729,3.894,770,5.354,772,4.741,773,6.519,774,5.724,775,4.741,776,6.519,777,4.741,778,4.741,779,7.451,780,4.741,781,6.519,782,4.741,783,4.741,784,4.741,785,4.741,786,4.741,787,4.23,788,4.23,789,4.741]],["title/modules/CaslModule.html",[242,1.254,255,3.467]],["body/modules/CaslModule.html",[1,6.548,3,0.044,4,0.052,5,0.036,22,0.006,38,0.115,39,0.622,40,3.337,47,0.052,48,0.305,53,3.4,65,0.005,66,0.005,242,2.264,244,2.474,245,2.576,246,2.686,247,2.686,248,2.686,249,3.619,255,6.948,272,3.33,273,2.686,274,2.686,276,2.938,474,4.845,790,5.709,791,5.709,792,5.709,793,6.399,794,7.078,795,5.709]],["title/classes/CheckCodeDto.html",[48,0.228,796,3.467]],["body/classes/CheckCodeDto.html",[3,0.043,4,0.051,5,0.035,22,0.006,38,0.104,47,0.073,48,0.428,65,0.005,66,0.005,134,1.265,162,2.001,198,3.166,227,4.102,532,3.387,589,1.861,590,1.741,591,2.134,592,1.799,721,4.36,746,4.36,747,4.36,796,5.71,797,4.849,798,5.852,799,6.043,800,3.765,801,4.849,802,4.849,803,4.36,804,4.849,805,4.582,806,3.721,807,4.849,808,4.849]],["title/injectables/CollectionAbility.html",[0,0.464,809,3.669]],["body/injectables/CollectionAbility.html",[0,0.726,2,1.433,3,0.04,4,0.047,5,0.033,7,0.696,12,1.318,19,0.788,21,0.872,22,0.006,23,0.671,24,0.6,25,0.748,28,1.01,35,1.579,38,0.122,39,0.565,43,4.737,47,0.047,48,0.277,49,2.122,52,0.387,62,0.872,65,0.005,66,0.005,79,4.079,83,1.869,325,1.479,382,4.018,509,2.946,511,3.843,549,5.16,550,5.16,552,3.843,554,3.43,556,3.843,557,6.689,565,2.442,809,5.739,810,5.817,811,5.817,812,4.223,813,4.223,814,4.223,815,3.034,816,4.223,817,4.223,818,5.817,819,5.423,820,4.223,821,4.47,822,4.47,823,4.47,824,3.689,825,4.47,826,3.6,827,4.47]],["title/controllers/CollectionController.html",[67,1.81,828,3.922]],["body/controllers/CollectionController.html",[3,0.047,4,0.056,5,0.039,22,0.006,38,0.119,39,0.672,47,0.056,48,0.33,50,1.598,65,0.005,66,0.005,67,2.622,69,2.674,71,3.334,101,3.608,102,3.334,828,6.832,829,6.917,830,5.681,831,5.893,832,5.681,833,4.778,834,6.917,835,4.079,836,5.681,837,6.917]],["title/classes/CollectionDto.html",[48,0.228,838,3.155]],["body/classes/CollectionDto.html",[3,0.041,4,0.049,5,0.034,22,0.006,23,0.692,38,0.117,47,0.077,48,0.434,52,0.506,65,0.005,66,0.005,134,1.202,162,2.014,325,2.129,589,1.769,590,1.655,591,2.067,592,1.71,594,3.219,598,3.664,800,3.514,824,3.805,838,5.032,839,4.355,840,5.53,841,2.319,842,2.147,843,4.355,844,2.366,845,4.144,846,4.355,847,4.144,848,4.355,849,3.805,850,3.582,851,3.963,852,5.262,853,4.355,854,2.821,855,3.963,856,4.355]],["title/classes/CollectionItemDto.html",[48,0.228,855,3.155]],["body/classes/CollectionItemDto.html",[3,0.041,4,0.049,5,0.034,22,0.006,23,0.692,38,0.117,47,0.077,48,0.434,52,0.506,65,0.005,66,0.005,134,1.202,162,2.014,325,2.129,589,1.769,590,1.655,591,2.067,592,1.71,594,3.219,598,3.664,800,3.514,824,3.805,838,3.963,839,4.355,840,4.355,841,2.319,842,2.147,843,4.355,844,2.366,845,4.144,846,4.355,847,4.144,848,4.355,849,3.805,850,3.582,851,3.963,852,5.262,853,4.355,854,2.821,855,5.032,856,5.53]],["title/classes/CollectionItemQueryDto.html",[48,0.228,851,3.155]],["body/classes/CollectionItemQueryDto.html",[3,0.041,4,0.048,5,0.033,22,0.006,23,0.687,38,0.117,47,0.077,48,0.432,52,0.504,65,0.005,66,0.005,134,1.193,162,2.01,325,2.121,589,1.755,590,1.642,591,2.057,592,1.697,594,3.194,598,3.636,800,3.686,824,3.775,838,3.932,839,4.322,840,4.322,841,2.301,842,2.131,843,4.322,844,2.348,845,4.112,846,4.322,847,4.112,848,4.322,849,3.775,850,3.922,851,5.007,852,5.761,853,4.322,854,2.799,855,3.932,856,4.322]],["title/modules/CollectionModule.html",[242,1.254,256,3.299]],["body/modules/CollectionModule.html",[3,0.038,4,0.045,5,0.031,22,0.006,38,0.121,39,0.534,47,0.045,48,0.262,52,0.365,53,3.489,65,0.004,66,0.004,69,2.784,133,3.967,242,2.109,244,2.126,245,2.213,246,2.308,247,2.308,248,2.308,249,3.371,256,6.772,271,5.017,272,3.023,273,2.308,274,2.308,276,3.306,467,3.967,475,3.47,481,3.798,809,6.973,828,6.595,831,5.995,832,4.516,857,4.906,858,5.498,859,5.498,860,4.906,861,6.589,862,5.498,863,5.498,864,5.498,865,5.498]],["title/classes/CollectionPagerDto.html",[48,0.228,849,3.029]],["body/classes/CollectionPagerDto.html",[3,0.041,4,0.049,5,0.033,22,0.006,23,0.691,38,0.117,47,0.077,48,0.433,52,0.505,65,0.005,66,0.005,134,1.199,162,2.013,325,2.126,589,1.764,590,1.65,591,2.064,592,1.706,594,3.211,598,3.654,800,3.509,824,3.795,838,3.953,839,4.344,840,4.344,841,2.313,842,2.142,843,4.344,844,2.36,845,4.133,846,4.344,847,4.133,848,4.344,849,4.823,850,3.931,851,3.953,852,5.253,853,4.344,854,2.813,855,3.953,856,4.344]],["title/injectables/CollectionService.html",[0,0.464,831,3.155]],["body/injectables/CollectionService.html",[0,0.374,2,0.58,3,0.016,4,0.019,5,0.013,7,0.282,8,0.994,10,1.091,12,0.678,15,0.678,19,1.135,21,1.237,22,0.006,23,0.967,24,0.864,25,1.061,28,1.409,35,1.525,38,0.103,39,0.229,42,1.344,47,0.019,48,0.112,50,1.298,52,0.529,62,1.095,63,1.136,65,0.002,66,0.002,73,2.346,80,0.911,86,3.488,93,2.136,122,2.173,180,1.165,181,1.229,183,1.108,184,1.136,185,1.136,199,2.349,325,1.238,386,3.105,396,1.389,397,1.344,509,3.705,545,2.712,557,2.954,559,3.353,563,1.033,567,1.808,569,2.063,570,1.765,741,2.642,830,1.935,831,2.54,838,4.626,849,3.563,851,3.711,852,2.656,854,3.552,866,2.356,867,2.089,868,3.43,869,3.844,870,3.43,871,2.656,872,3.844,873,3.844,874,3.844,875,3.844,876,3.088,877,2.356,878,4.317,879,3.844,880,2.954,881,3.844,882,2.356,883,2.348,884,2.356,885,3.844,886,2.356,887,2.954,888,2.356,889,3.844,890,2.356,891,2.954,892,2.356,893,3.844,894,2.356,895,3.844,896,2.356,897,3.844,898,2.356,899,3.844,900,2.356,901,1.628,902,2.356,903,2.954,904,2.356,905,2.347,906,2.407,907,2.656,908,1.628,909,3.535,910,1.935,911,2.102,912,1.711,913,1.935,914,2.102,915,3.313,916,2.356,917,2.656,918,2.356,919,1.711,920,3.844,921,3.741,922,3.844,923,4.869,924,2.356,925,4.869,926,2.356,927,2.063,928,1.686,929,1.935,930,2.791,931,2.356,932,2.102,933,1.711,934,1.81,935,3.999,936,4.869,937,4.345,938,2.356,939,1.81,940,2.356,941,2.193,942,2.356,943,2.356,944,2.356,945,2.102]],["title/injectables/CollectionTrpcRouter.html",[0,0.464,861,3.467]],["body/injectables/CollectionTrpcRouter.html",[0,0.534,2,0.92,3,0.026,4,0.03,5,0.021,7,0.447,8,1.421,10,1.655,12,0.97,14,4.44,15,0.97,19,0.975,21,0.56,22,0.006,23,0.431,24,0.567,25,0.48,28,0.955,30,1.756,38,0.116,39,0.363,47,0.03,48,0.178,49,1.362,50,1.271,52,0.603,57,3.504,62,1.277,65,0.003,66,0.003,83,2.466,201,4.12,386,2.26,545,2.061,557,5.016,565,3.023,567,1.756,569,2.004,570,1.714,591,1.013,592,1.065,800,1.568,815,1.948,826,3.471,831,5.486,832,3.067,845,2.58,849,2.368,854,2.586,855,2.467,861,3.993,868,3.332,870,3.332,914,3.332,928,2.863,935,3.067,946,3.734,947,3.725,948,4.399,949,2.281,950,4.189,951,5.5,952,3.734,953,3.734,954,3.041,955,2.004,956,1.675,957,3.359,958,2.281,959,2.281,960,2.281,961,2.281,962,2.281,963,2.281,964,4.861,965,2.281,966,3.734,967,2.202,968,3.734,969,3.359,970,5.648,971,5.046,972,3.734,973,3.734,974,2.467,975,5.072,976,3.734,977,3.734,978,2.711,979,3.734,980,2.467,981,2.368,982,3.734,983,3.734,984,5.5,985,3.734,986,3.734]],["title/classes/CollectionUpdateDto.html",[48,0.228,847,3.299]],["body/classes/CollectionUpdateDto.html",[3,0.041,4,0.049,5,0.034,22,0.006,23,0.692,38,0.117,47,0.077,48,0.434,52,0.506,65,0.005,66,0.005,134,1.202,162,2.014,325,2.129,589,1.769,590,1.655,591,2.067,592,1.71,594,3.219,598,3.664,800,3.514,824,3.805,838,3.963,839,4.355,840,4.355,841,2.319,842,2.147,843,4.355,844,2.366,845,4.144,846,4.355,847,5.262,848,5.53,849,3.805,850,3.582,851,3.963,852,5.262,853,4.355,854,2.821,855,3.963,856,4.355]],["title/injectables/CommentAbility.html",[0,0.464,987,3.669]],["body/injectables/CommentAbility.html",[0,0.723,2,1.425,3,0.04,4,0.047,5,0.032,7,0.693,12,1.314,19,0.784,21,0.868,22,0.006,23,0.668,24,0.597,25,0.744,28,1.005,35,1.571,38,0.122,39,0.562,43,4.722,47,0.047,48,0.276,49,2.111,52,0.385,62,0.868,65,0.005,66,0.005,79,4.069,83,1.859,382,5.143,415,4.332,509,2.937,511,3.824,549,5.143,550,5.143,552,3.824,554,3.413,556,3.824,565,2.43,812,4.202,813,4.202,814,4.202,815,3.019,816,4.202,817,4.202,819,5.405,820,4.202,821,4.447,822,4.447,823,4.447,825,4.447,826,3.588,827,4.447,987,5.72,988,5.788,989,5.788,990,5.788,991,4.202,992,4.447]],["title/controllers/CommentController.html",[67,1.81,993,3.922]],["body/controllers/CommentController.html",[3,0.024,4,0.029,5,0.02,7,0.42,10,0.682,12,0.927,15,0.62,19,1.013,21,1.122,22,0.006,23,0.864,24,0.771,25,0.962,28,1.299,38,0.116,39,0.341,47,0.029,48,0.168,50,0.812,52,0.419,57,1.885,62,1.048,65,0.003,66,0.003,67,1.331,69,1.358,71,1.693,73,2.271,79,4.43,80,2.893,83,2.878,86,3.444,93,2.132,98,3.099,101,1.832,102,1.693,105,5.17,107,2.426,122,2.095,199,1.526,220,1.783,351,4.981,360,3.472,415,3.369,450,2.55,545,1.659,562,2.145,565,2.643,567,2.961,570,2.891,724,1.942,815,1.832,826,3.369,833,2.426,883,2.145,927,3.751,928,3.065,955,4.369,956,1.576,967,3.099,981,2.228,993,4.316,994,3.512,995,3.512,996,3.333,997,4.617,998,3.134,999,3.512,1000,4.689,1001,4.316,1002,3.512,1003,2.699,1004,3.134,1005,3.512,1006,3.512,1007,3.512,1008,3.512,1009,3.512,1010,2.699,1011,4.617,1012,3.512,1013,3.512,1014,3.134,1015,4.617,1016,3.134,1017,3.512,1018,2.228,1019,6.034,1020,4.316,1021,3.512,1022,3.134,1023,3.134,1024,2.55,1025,3.816,1026,2.699,1027,2.885,1028,4.35,1029,2.885,1030,3.512,1031,3.134,1032,5.75,1033,3.134,1034,3.512,1035,4.689,1036,3.512,1037,2.699,1038,3.512,1039,3.512,1040,3.134,1041,3.512,1042,3.512,1043,3.512,1044,3.134,1045,2.699,1046,2.55,1047,3.134]],["title/classes/CommentCreateEvent.html",[48,0.228,1048,3.467]],["body/classes/CommentCreateEvent.html",[3,0.042,4,0.072,5,0.034,7,0.733,8,1.995,15,1.081,19,1.239,21,0.918,22,0.006,23,0.707,24,0.943,25,0.788,38,0.081,47,0.05,48,0.292,65,0.005,66,0.005,134,1.228,199,2.151,367,3.463,415,4.5,515,2.881,559,3.88,563,2.687,941,4.822,1048,5.605,1049,8.333,1050,6.127,1051,5.584,1052,5.605,1053,5.393,1054,7.72,1055,6.127,1056,6.127,1057,6.127,1058,4.448]],["title/classes/CommentLikeEvent.html",[48,0.228,1059,3.669]],["body/classes/CommentLikeEvent.html",[3,0.043,4,0.051,5,0.035,7,0.755,8,2.033,15,1.114,19,1.214,21,0.946,22,0.006,23,0.728,24,0.924,25,0.811,38,0.084,47,0.051,48,0.301,65,0.005,66,0.005,134,1.265,199,2.174,367,3.528,415,4.534,515,2.968,563,2.768,941,4.887,1049,8.233,1051,5.66,1052,5.71,1053,5.441,1058,4.582,1059,6.043,1060,5.631,1061,7.865,1062,5.631,1063,5.631]],["title/modules/CommentModule.html",[242,1.254,257,3.299]],["body/modules/CommentModule.html",[3,0.037,4,0.043,5,0.03,22,0.006,38,0.122,39,0.518,47,0.043,48,0.254,52,0.354,53,3.454,65,0.004,66,0.004,69,2.729,133,3.928,242,2.078,244,2.062,245,2.147,246,2.238,247,2.238,248,2.238,249,3.321,257,6.8,263,5.944,271,4.975,272,2.963,273,2.238,274,2.238,276,3.24,467,3.928,475,3.401,481,3.684,987,6.914,993,6.497,1028,6.216,1029,4.38,1064,4.758,1065,5.333,1066,4.758,1067,5.333,1068,6.533,1069,5.333,1070,4.758,1071,5.333,1072,5.333,1073,5.333]],["title/classes/CommentPagerDto.html",[48,0.228,1015,3.155]],["body/classes/CommentPagerDto.html",[3,0.041,4,0.049,5,0.034,22,0.006,38,0.124,47,0.074,48,0.401,52,0.509,65,0.005,66,0.005,134,1.212,162,1.915,325,1.538,589,1.782,590,1.668,591,2.077,592,1.724,841,2.338,842,2.164,844,2.385,854,3.6,956,2.712,997,3.994,1011,3.994,1015,5.057,1074,4.966,1075,6.288,1076,5.038,1077,4.966,1078,4.177,1079,4.645,1080,4.966,1081,4.966,1082,3.565,1083,3.245,1084,4.177,1085,4.966,1086,5.057,1087,6.288,1088,4.966,1089,4.966,1090,4.39,1091,4.966,1092,4.645]],["title/injectables/CommentService.html",[0,0.464,1028,3.299]],["body/injectables/CommentService.html",[0,0.325,2,0.49,3,0.014,4,0.027,5,0.011,7,0.4,8,0.863,10,1.095,12,0.589,15,0.589,19,1.065,21,1.155,22,0.006,23,0.889,24,0.811,25,0.99,28,1.307,35,1.658,38,0.108,39,0.193,42,1.134,47,0.016,48,0.095,50,1.303,52,0.555,62,1.155,65,0.002,66,0.002,73,2.276,80,0.769,83,1.387,86,2.679,93,2.162,122,2.035,180,0.983,181,1.037,183,0.935,184,0.958,185,0.958,199,2.28,228,3.731,229,1.533,237,1.067,325,1.914,351,3.578,386,1.373,396,1.172,397,1.134,415,4.068,509,3.363,515,0.935,534,2.547,535,1.009,545,2.527,563,0.872,741,2.379,854,3.823,867,2.17,876,2.118,878,3.888,880,3.318,901,2.307,905,2.081,906,2.135,907,1.374,908,1.374,915,2.984,917,2.307,919,1.444,927,3.657,928,2.474,933,2.425,934,1.528,939,1.528,941,2.464,997,3.343,1011,3.343,1015,3.343,1027,1.633,1028,2.307,1048,2.425,1051,3.727,1059,3.318,1078,4.485,1079,1.528,1082,1.969,1084,5.199,1086,5.288,1092,2.566,1093,1.988,1094,2.98,1095,3.34,1096,3.34,1097,3.34,1098,3.34,1099,3.34,1100,2.98,1101,3.34,1102,3.34,1103,3.34,1104,1.633,1105,3.731,1106,3.34,1107,2.98,1108,1.988,1109,3.34,1110,1.988,1111,3.34,1112,1.988,1113,3.34,1114,1.988,1115,3.34,1116,1.988,1117,3.34,1118,1.988,1119,3.34,1120,1.988,1121,3.34,1122,1.988,1123,3.34,1124,1.988,1125,1.988,1126,3.34,1127,1.988,1128,1.988,1129,1.633,1130,2.743,1131,1.528,1132,1.528,1133,1.214,1134,1.633,1135,1.774,1136,1.528,1137,5.06,1138,3.34,1139,1.633,1140,1.528,1141,2.639,1142,2.425,1143,3.209,1144,1.742,1145,5.641,1146,3.34,1147,1.633,1148,1.633,1149,1.633,1150,1.633,1151,3.34,1152,3.674,1153,1.988,1154,3.674,1155,3.657,1156,1.988,1157,1.988,1158,3.34,1159,2.638,1160,2.739,1161,2.425,1162,3.34,1163,1.633,1164,1.988,1165,1.774,1166,1.988,1167,1.988,1168,1.988,1169,1.988,1170,1.988,1171,1.988,1172,1.988,1173,3.34,1174,1.988,1175,1.633,1176,1.988,1177,1.988,1178,3.34,1179,1.988,1180,1.988,1181,3.34,1182,1.988,1183,1.988,1184,3.34,1185,1.988,1186,1.988,1187,1.774,1188,1.774,1189,1.774,1190,1.988,1191,1.774,1192,1.774,1193,1.774]],["title/injectables/CommentTrpcRouter.html",[0,0.464,1068,3.467]],["body/injectables/CommentTrpcRouter.html",[0,0.541,2,0.935,3,0.026,4,0.031,5,0.021,7,0.454,8,1.439,10,1.662,12,0.982,14,4.466,15,0.982,19,0.983,21,0.569,22,0.006,23,0.438,24,0.574,25,0.488,28,0.967,30,1.785,38,0.114,39,0.369,47,0.031,48,0.181,49,1.385,50,1.286,52,0.605,57,2.987,62,1.251,65,0.003,66,0.003,83,2.483,122,1.817,201,4.148,415,2.683,545,2.081,565,2.767,567,1.785,570,1.743,815,1.98,826,3.725,927,3.896,928,3.543,947,3.76,948,4.434,949,2.318,950,4.214,954,3.078,955,2.037,956,1.703,957,3.4,958,2.318,959,2.318,960,2.318,961,2.318,962,2.318,963,2.318,964,4.762,965,2.318,969,3.4,970,5.561,971,4.983,974,2.508,975,4.796,980,4.354,981,2.407,996,2.407,997,2.508,1011,2.508,1015,2.508,1027,3.118,1028,5.766,1029,3.118,1035,4.967,1044,3.387,1047,3.387,1068,4.041,1194,3.796,1195,5.566,1196,3.796,1197,3.796,1198,3.796,1199,3.796,1200,3.796,1201,3.796,1202,3.796,1203,3.796,1204,3.796,1205,3.796,1206,3.118,1207,3.796]],["title/injectables/CountingService.html",[0,0.464,1208,3.029]],["body/injectables/CountingService.html",[0,0.568,2,1.001,3,0.028,4,0.033,5,0.023,7,0.486,10,1.136,12,1.032,15,1.032,19,1.076,21,1.19,22,0.006,23,0.917,24,0.899,25,1.021,28,1.301,38,0.106,39,0.395,42,2.318,47,0.033,48,0.194,52,0.27,62,1.027,65,0.004,66,0.004,73,2.272,93,2.09,122,1.876,196,3.005,199,2.289,237,3.139,415,3.302,509,2.703,515,1.911,545,1.846,559,1.866,563,1.782,569,2.181,647,3.626,854,3.889,867,2.509,905,3.612,906,2.891,945,3.626,1078,4.04,1084,5.487,1100,5.219,1105,5.206,1133,5.206,1152,5.442,1154,4.975,1155,2.181,1165,3.626,1208,3.709,1209,4.064,1210,5.849,1211,5.849,1212,6.852,1213,3.626,1214,4.064,1215,5.849,1216,4.064,1217,5.849,1218,4.064,1219,5.849,1220,4.064,1221,4.064,1222,6.852,1223,5.265,1224,5.628,1225,4.734,1226,4.064,1227,2.577,1228,4.064,1229,4.064,1230,4.064,1231,4.064,1232,4.064,1233,3.338,1234,4.064,1235,2.577,1236,4.064,1237,5.219,1238,4.064,1239,4.064,1240,4.064]],["title/classes/CreateCommentDto.html",[48,0.228,997,3.155]],["body/classes/CreateCommentDto.html",[3,0.041,4,0.049,5,0.034,22,0.006,38,0.124,47,0.074,48,0.401,52,0.509,65,0.005,66,0.005,134,1.212,162,1.915,325,1.538,589,1.782,590,1.668,591,2.077,592,1.724,841,2.338,842,2.164,844,2.385,854,3.6,956,2.712,997,5.057,1011,3.994,1015,3.994,1074,4.966,1075,4.966,1076,5.038,1077,4.966,1078,4.177,1079,4.645,1080,4.966,1081,4.966,1082,3.565,1083,3.245,1084,4.177,1085,4.966,1086,5.057,1087,6.288,1088,6.288,1089,4.966,1090,4.39,1091,4.966,1092,4.645]],["title/classes/CreateNotificationDto.html",[48,0.228,1241,3.669]],["body/classes/CreateNotificationDto.html",[3,0.042,4,0.063,5,0.035,22,0.006,38,0.122,47,0.072,48,0.371,52,0.517,65,0.005,66,0.005,134,1.241,162,1.842,325,2.417,563,2.715,565,3.262,589,1.826,590,1.708,591,2.109,592,1.766,841,2.394,842,2.217,844,2.442,941,3.533,1051,4.091,1082,4.583,1083,3.323,1090,4.496,1241,5.971,1242,5.525,1243,6.935,1244,4.758,1245,5.525,1246,5.525,1247,5.525,1248,4.758,1249,4.758,1250,5.525,1251,5.086,1252,5.525,1253,4.496,1254,5.525]],["title/injectables/CronService.html",[0,0.464,1255,3.669]],["body/injectables/CronService.html",[0,0.758,2,1.533,3,0.043,4,0.051,5,0.035,7,0.745,8,2.015,10,1.784,11,5.032,15,1.376,19,1.056,21,0.933,22,0.006,23,0.719,24,0.804,25,0.8,35,1.689,38,0.113,39,0.605,47,0.051,48,0.297,50,1.802,65,0.005,66,0.005,279,3.671,476,6.034,867,3.345,905,4.301,906,3.855,1213,5.555,1255,5.991,1256,6.226,1257,7.798,1258,5.113,1259,5.113,1260,6.226]],["title/modules/DatabaseModule.html",[242,1.254,258,3.467]],["body/modules/DatabaseModule.html",[3,0.041,4,0.048,5,0.033,22,0.006,23,0.687,38,0.111,39,0.578,47,0.048,48,0.284,52,0.396,53,3.463,62,1.136,65,0.005,66,0.005,133,4.067,242,2.191,244,2.301,245,2.396,246,2.499,247,2.499,248,2.499,249,3.501,258,6.73,272,3.182,273,2.499,274,2.499,276,2.733,335,4.322,337,4.63,467,4.067,474,4.63,590,1.642,867,2.553,905,4.019,1261,5.953,1262,5.953,1263,5.953,1264,5.953,1265,7.58,1266,5.953,1267,5.953,1268,5.953]],["title/controllers/EmailController.html",[67,1.81,472,3.922]],["body/controllers/EmailController.html",[3,0.037,4,0.044,5,0.03,7,0.646,10,1.047,12,1.255,15,0.952,19,0.731,21,0.809,22,0.006,23,0.623,24,0.556,25,0.693,28,0.937,33,2.477,38,0.122,39,0.524,47,0.044,48,0.257,52,0.473,65,0.004,66,0.004,67,2.045,69,2.086,71,2.6,73,1.959,80,2.086,84,3.428,86,3.489,98,4.194,100,3.422,101,2.814,102,2.6,122,1.991,199,1.928,220,2.738,227,3.71,351,5.838,360,3.564,361,4.814,367,3.19,368,4.145,371,4.431,472,5.841,532,2.895,725,5.841,726,4.814,727,3.917,737,4.814,741,2.537,742,4.431,743,4.145,803,5.843,1269,5.395,1270,5.395,1271,7.956,1272,5.395,1273,5.395,1274,5.395,1275,5.776,1276,5.395,1277,5.395,1278,5.395,1279,5.395,1280,4.431,1281,5.395,1282,5.395,1283,5.395]],["title/interfaces/ErrorCodesStatusMapping.html",[193,1.922,1284,3.922]],["body/interfaces/ErrorCodesStatusMapping.html",[3,0.027,4,0.032,5,0.022,10,1.315,15,0.702,19,0.539,22,0.006,24,0.41,28,0.691,33,1.827,35,1.838,38,0.09,39,0.387,40,2.076,47,0.06,48,0.19,52,0.493,62,1.3,63,1.918,65,0.004,66,0.004,162,0.863,167,2.749,172,2.889,173,5.425,174,4.916,176,4.678,178,4.916,179,2.889,193,1.602,196,2.526,197,6.053,198,2.726,199,1.799,241,3.268,280,4.732,284,5.562,289,5.203,291,5.128,335,2.889,337,2.43,340,5.562,341,3.268,342,1.967,393,2.346,417,3.863,419,2.346,534,3.397,563,1.745,657,3.397,724,3.185,836,3.268,867,2.471,1018,4.708,1284,7.548,1285,4.732,1286,3.979,1287,3.979,1288,4.732,1289,5.141,1290,5.141,1291,3.551,1292,3.268,1293,5.562,1294,5.141,1295,3.551,1296,6.042,1297,3.551,1298,3.551,1299,6.042,1300,5.141,1301,3.551,1302,5.141,1303,3.551,1304,3.551,1305,3.551,1306,3.551,1307,5.141,1308,3.551,1309,3.551,1310,3.551,1311,3.551,1312,5.141,1313,3.551,1314,2.749,1315,3.551,1316,3.551,1317,3.551,1318,3.551,1319,3.551,1320,3.551,1321,5.141,1322,3.551,1323,3.551,1324,3.551,1325,3.551,1326,3.551,1327,3.551,1328,3.551,1329,5.141,1330,3.057,1331,5.141,1332,3.551,1333,3.551,1334,3.551,1335,5.141,1336,3.551,1337,3.551,1338,3.551,1339,3.551,1340,3.551]],["title/controllers/FileController.html",[67,1.81,1341,3.922]],["body/controllers/FileController.html",[3,0.023,4,0.027,5,0.045,7,0.399,10,0.647,12,0.892,15,0.588,19,0.922,21,1.021,22,0.006,23,1.023,24,0.849,25,0.875,28,1.182,31,2.739,33,1.531,35,1.848,38,0.12,39,0.324,47,0.027,48,0.159,50,0.771,52,0.589,56,1.902,62,1.021,63,1.607,65,0.003,66,0.003,67,1.264,69,1.289,73,2.182,80,2.632,93,1.861,101,1.739,102,1.607,122,2.062,180,1.648,181,1.739,183,1.568,184,1.607,185,1.607,188,4.498,189,4.015,190,1.844,210,3.491,223,2.203,350,5.312,360,2.203,367,1.496,497,2.975,535,3.097,562,2.037,570,2.802,704,2.303,724,4.423,725,4.151,727,2.421,741,1.568,743,2.562,749,2.739,842,1.194,919,2.421,996,2.115,1018,3.205,1046,2.421,1280,2.739,1341,4.151,1342,3.335,1343,5.054,1344,5.054,1345,3.335,1346,6.147,1347,5.054,1348,3.335,1349,7.065,1350,3.335,1351,3.335,1352,3.335,1353,3.335,1354,3.335,1355,4.498,1356,6.147,1357,5.054,1358,3.335,1359,3.335,1360,5.055,1361,5.054,1362,3.335,1363,2.739,1364,5.012,1365,4.509,1366,3.335,1367,3.335,1368,3.335,1369,3.335,1370,3.335,1371,3.335,1372,3.335,1373,2.975,1374,3.335,1375,4.431,1376,2.975,1377,2.975,1378,3.335,1379,3.335,1380,3.335,1381,2.975,1382,3.335,1383,2.303,1384,3.335,1385,5.054,1386,3.335,1387,3.335,1388,5.054,1389,3.335,1390,5.054,1391,3.335,1392,3.335,1393,3.335,1394,3.335,1395,3.335,1396,3.335,1397,3.335,1398,3.335,1399,3.335,1400,3.335,1401,3.335,1402,3.335,1403,3.335,1404,3.335,1405,3.335,1406,3.335,1407,3.335,1408,6.529,1409,3.335,1410,3.335,1411,3.335,1412,3.335,1413,3.335,1414,3.335,1415,3.335,1416,3.335]],["title/modules/FileModule.html",[242,1.254,259,3.467]],["body/modules/FileModule.html",[3,0.042,4,0.05,5,0.035,22,0.006,38,0.113,39,0.6,47,0.05,48,0.295,52,0.41,53,3.616,65,0.005,66,0.005,69,3,133,4.113,242,2.228,244,2.388,245,2.486,246,2.592,247,2.592,248,2.592,249,3.561,259,6.973,272,3.257,273,2.592,274,2.592,467,4.113,475,3.739,1341,6.968,1375,6.794,1376,5.511,1417,5.511,1418,6.176,1419,5.511,1420,6.176,1421,6.176]],["title/classes/FileQueryDto.html",[48,0.228,1346,3.669]],["body/classes/FileQueryDto.html",[3,0.045,4,0.054,5,0.037,22,0.006,23,0.766,24,0.836,38,0.116,47,0.074,48,0.387,52,0.539,65,0.005,66,0.005,134,1.33,162,1.901,589,1.957,590,1.831,591,2.202,592,1.893,594,4.354,800,2.786,1346,6.234,1356,5.1,1422,5.923,1423,7.24,1424,5.452,1425,5.452,1426,5.923,1427,5.923,1428,5.923,1429,5.923,1430,5.923]],["title/injectables/FileService.html",[0,0.464,1375,3.467]],["body/injectables/FileService.html",[0,0.482,2,0.801,3,0.022,4,0.026,5,0.018,7,0.39,10,1.481,12,0.875,15,0.574,19,1.135,21,1.256,22,0.006,23,1.129,24,0.963,25,1.077,28,1.42,35,1.346,38,0.114,39,0.316,47,0.026,48,0.155,50,0.752,52,0.507,56,2.83,62,1.256,63,2.391,65,0.003,66,0.003,73,2.289,93,2.326,122,2.097,199,2.288,223,3.277,229,1.494,279,1.919,325,1.529,386,2.471,476,4.838,515,1.53,534,1.919,535,2.518,708,4.427,835,1.919,921,5.167,1363,2.673,1364,4.075,1375,3.602,1425,2.673,1431,3.255,1432,4.961,1433,4.961,1434,4.961,1435,4.961,1436,4.961,1437,4.961,1438,6.012,1439,3.255,1440,3.255,1441,4.961,1442,3.255,1443,4.961,1444,8.46,1445,3.255,1446,4.961,1447,3.255,1448,4.961,1449,3.255,1450,4.961,1451,3.255,1452,4.961,1453,3.255,1454,4.961,1455,3.255,1456,3.255,1457,6.725,1458,6.725,1459,6.012,1460,3.255,1461,3.255,1462,3.255,1463,3.255,1464,3.255,1465,3.255,1466,3.255,1467,2.064,1468,3.255,1469,3.255,1470,3.255,1471,4.961,1472,3.255,1473,3.255,1474,3.255,1475,4.961,1476,3.255,1477,4.961,1478,3.255,1479,3.255,1480,3.255,1481,3.255,1482,3.255,1483,4.961,1484,4.961,1485,3.255,1486,3.255,1487,3.255,1488,3.255,1489,3.255,1490,3.255,1491,3.255,1492,3.255,1493,3.255,1494,3.255]],["title/classes/FileUploadDto.html",[48,0.228,1356,3.669]],["body/classes/FileUploadDto.html",[3,0.045,4,0.054,5,0.037,22,0.006,23,0.766,24,0.836,38,0.116,47,0.074,48,0.387,52,0.539,65,0.005,66,0.005,134,1.33,162,1.901,589,1.957,590,1.831,591,2.202,592,1.893,594,4.354,800,2.786,1346,5.1,1356,6.234,1422,5.923,1423,5.923,1424,5.452,1425,5.452,1426,5.923,1427,5.923,1428,5.923,1429,5.923,1430,7.24]],["title/injectables/FollowService.html",[0,0.464,1495,3.299]],["body/injectables/FollowService.html",[0,0.399,2,0.629,3,0.018,4,0.021,5,0.014,7,0.306,10,0.797,12,0.724,15,0.724,19,1.103,21,1.221,22,0.006,23,0.94,24,0.84,25,1.047,28,1.384,35,0.693,38,0.103,39,0.248,47,0.021,48,0.122,50,0.59,52,0.542,62,1.195,65,0.003,66,0.003,73,2.33,86,3.022,93,2.432,122,1.812,199,2.373,237,3.161,325,1.044,396,1.506,397,1.457,504,1.62,505,3.405,509,3.663,522,2.42,523,1.412,529,1.297,545,1.86,595,3.073,675,1.457,676,1.457,741,3.541,742,2.098,842,0.915,867,1.096,878,4.526,880,3.953,915,4.44,928,2.583,1130,4.225,1131,1.963,1132,1.963,1147,5.66,1148,3.371,1149,3.371,1150,3.371,1227,1.62,1235,5.488,1355,4.784,1495,2.835,1496,2.555,1497,3.154,1498,4.104,1499,4.104,1500,4.104,1501,4.104,1502,4.104,1503,4.104,1504,4.104,1505,4.104,1506,3.662,1507,2.555,1508,4.104,1509,2.555,1510,6.382,1511,4.104,1512,2.555,1513,4.104,1514,2.555,1515,4.104,1516,2.555,1517,4.104,1518,2.555,1519,4.104,1520,2.555,1521,4.104,1522,2.555,1523,4.104,1524,2.555,1525,4.104,1526,2.555,1527,4.104,1528,2.555,1529,3.154,1530,2.555,1531,2.28,1532,2.098,1533,4.225,1534,2.28,1535,2.555,1536,2.555,1537,2.555,1538,2.555,1539,2.555,1540,2.555,1541,2.555,1542,6.891,1543,3.154,1544,4.104,1545,5.145,1546,3.662,1547,6.891,1548,4.104,1549,4.104,1550,2.555,1551,2.555,1552,2.555,1553,2.555,1554,2.555,1555,4.104,1556,2.555,1557,2.555]],["title/controllers/GoogleController.html",[67,1.81,473,3.922]],["body/controllers/GoogleController.html",[3,0.033,4,0.039,5,0.027,7,0.572,10,1.453,12,1.157,15,0.843,19,0.888,21,0.983,22,0.006,23,0.757,24,0.676,25,0.843,28,1.138,35,1.297,38,0.122,39,0.464,47,0.039,48,0.228,50,1.729,52,0.436,65,0.004,66,0.004,67,1.812,69,1.848,71,2.304,73,2.146,80,2.535,83,1.535,93,1.458,100,3.031,101,2.493,102,2.304,111,4.269,112,3.47,122,1.641,188,5.319,189,5.262,190,2.643,191,3.031,286,2.643,342,2.363,350,6.125,367,2.941,368,3.672,371,3.926,384,4.158,386,1.964,401,4.57,473,5.385,479,2.919,487,3.672,530,3.031,1360,5.562,1467,4.158,1558,4.78,1559,4.78,1560,6.556,1561,7.483,1562,4.78,1563,4.78,1564,4.78,1565,6.556,1566,4.78,1567,4.78,1568,4.78,1569,3.926,1570,4.76,1571,3.158,1572,4.78,1573,3.47,1574,6.556,1575,4.78,1576,4.78,1577,4.78,1578,4.78,1579,4.78,1580,4.78,1581,4.78,1582,4.78,1583,4.78]],["title/interfaces/GoogleProfile.html",[193,1.922,1584,3.922]],["body/interfaces/GoogleProfile.html",[0,0.628,3,0.032,4,0.038,5,0.026,7,0.561,8,1.671,10,1.255,15,0.826,22,0.006,23,1,24,0.915,38,0.115,39,0.455,47,0.053,48,0.223,50,1.494,52,0.43,62,0.702,65,0.004,66,0.004,73,1.153,76,4.966,83,2.378,84,2.257,162,1.016,193,1.885,199,2.395,286,2.589,325,1.191,342,2.315,376,3.093,393,2.761,422,2.97,468,3.4,479,2.86,530,2.97,532,4.854,563,2.053,1053,2.761,1159,2.86,1160,2.97,1467,4.1,1570,4.693,1571,3.093,1573,3.4,1584,6.08,1585,4.178,1586,7.122,1587,7.122,1588,7.473,1589,7.727,1590,7.122,1591,4.521,1592,4.966,1593,5.768,1594,5.309,1595,4.966,1596,3.4,1597,3.846,1598,3.846,1599,4.178,1600,4.178,1601,4.178,1602,4.178,1603,4.178,1604,4.178,1605,4.178,1606,4.178,1607,4.178,1608,4.178,1609,3.598,1610,6.605,1611,6.605,1612,4.178,1613,4.178]],["title/injectables/GoogleStrategy.html",[0,0.464,468,3.467]],["body/injectables/GoogleStrategy.html",[0,0.628,2,1.153,3,0.032,4,0.038,5,0.026,7,0.561,10,1.255,12,1.141,15,1.141,19,0.875,21,0.969,22,0.006,23,0.967,24,0.823,25,0.831,28,0.813,38,0.115,39,0.455,47,0.053,48,0.223,50,1.494,52,0.43,62,0.702,65,0.004,66,0.004,73,1.823,76,6.133,83,2.378,84,3.115,162,1.402,193,1.885,199,2.325,286,2.589,325,1.191,342,2.315,376,3.093,422,2.97,468,4.693,479,2.86,513,4.693,530,2.97,532,4.495,563,2.053,1053,2.761,1159,2.86,1160,2.97,1467,5.062,1570,5.795,1571,3.093,1573,3.4,1584,5.309,1585,4.178,1586,4.178,1587,4.178,1588,5.768,1589,6.605,1590,4.178,1591,2.86,1592,5.688,1593,6.605,1594,6.556,1595,5.688,1596,3.4,1597,3.846,1598,3.846,1599,5.768,1600,4.178,1601,4.178,1602,4.178,1603,4.178,1604,4.178,1605,4.178,1606,4.178,1607,4.178,1608,4.178,1609,5.688,1610,7.122,1611,7.473,1612,4.178,1613,4.178,1614,4.683,1615,4.683,1616,4.683,1617,4.683]],["title/controllers/HealthController.html",[67,1.81,1618,3.922]],["body/controllers/HealthController.html",[3,0.03,4,0.036,5,0.025,7,0.532,10,1.596,12,1.1,15,0.785,19,1.113,22,0.006,28,1.427,38,0.113,39,0.432,42,2.537,47,0.036,48,0.212,50,1.028,62,1.232,65,0.004,66,0.004,67,1.686,69,1.72,71,2.144,73,2.358,80,3.178,93,2.507,101,2.32,102,2.144,223,2.938,367,2.798,563,1.95,749,3.653,867,1.908,906,3.083,1314,3.072,1330,3.417,1618,5.122,1619,4.448,1620,4.448,1621,7.807,1622,7.807,1623,7.807,1624,7.807,1625,7.807,1626,4.448,1627,4.448,1628,4.448,1629,4.448,1630,7.807,1631,4.448,1632,4.448,1633,4.448,1634,4.448,1635,4.448,1636,4.448,1637,6.237,1638,8.521,1639,6.237,1640,6.237,1641,6.237,1642,3.653,1643,6.237,1644,4.448,1645,4.448,1646,4.448,1647,4.448,1648,7.202,1649,7.202,1650,4.448,1651,4.448,1652,4.448,1653,4.448,1654,4.448,1655,4.448,1656,6.237,1657,5.122,1658,6.237,1659,4.448,1660,4.448,1661,4.448,1662,8.22,1663,7.202,1664,4.448,1665,4.448,1666,4.448,1667,4.448,1668,4.448,1669,4.448,1670,4.448,1671,4.448,1672,4.448,1673,4.448,1674,4.448,1675,4.448]],["title/modules/HealthModule.html",[242,1.254,260,3.467]],["body/modules/HealthModule.html",[3,0.048,4,0.056,5,0.039,22,0.006,38,0.123,39,0.674,47,0.056,48,0.331,65,0.005,66,0.005,69,3.222,242,2.189,244,2.682,260,6.05,276,3.185,1618,7.337,1642,5.698,1676,6.938,1677,7.436,1678,5.698,1679,8.334,1680,6.938]],["title/modules/HelperModule.html",[242,1.254,261,3.467]],["body/modules/HelperModule.html",[3,0.035,4,0.041,5,0.028,22,0.006,24,0.522,38,0.122,39,0.492,47,0.041,48,0.242,52,0.337,53,3.395,65,0.004,66,0.004,133,3.861,186,4.95,187,3.89,229,3.539,242,2.025,244,1.958,245,2.038,246,2.125,247,2.125,248,2.125,249,3.235,261,6.908,272,2.862,273,2.125,274,2.125,276,3.13,325,1.288,396,2.986,397,2.888,467,3.861,474,4.164,475,3.286,727,3.676,741,3.206,743,3.89,1000,4.518,1255,6.812,1330,3.89,1677,6.083,1678,4.159,1681,4.518,1682,4.518,1683,4.518,1684,4.518,1685,6.959,1686,5.063,1687,5.063,1688,5.063,1689,4.518,1690,5.063,1691,5.063,1692,5.063,1693,5.063,1694,5.063,1695,5.063,1696,5.063,1697,4.159,1698,5.063,1699,5.063,1700,5.063,1701,5.063,1702,5.063,1703,5.063,1704,5.063,1705,5.063,1706,5.063,1707,5.063]],["title/controllers/HistoryController.html",[67,1.81,1708,3.922]],["body/controllers/HistoryController.html",[3,0.036,4,0.043,5,0.03,7,0.635,12,1.241,19,0.953,21,1.055,22,0.006,23,0.812,24,0.725,25,0.904,28,1.222,38,0.119,39,0.516,47,0.043,48,0.253,62,1.055,65,0.004,66,0.004,67,2.012,69,2.052,71,2.558,73,2.213,79,4.442,80,2.72,83,2.887,86,3.685,93,2.146,98,3.13,101,2.769,102,2.558,105,5.452,107,3.667,122,1.328,570,2.437,586,5.33,724,2.935,826,3.391,833,3.667,835,3.13,996,4.462,1014,4.736,1016,4.736,1019,5.406,1024,3.854,1031,4.736,1032,4.078,1033,4.736,1708,5.779,1709,5.308,1710,5.308,1711,4.297,1712,4.36,1713,7.036,1714,5.308,1715,6.102,1716,5.308,1717,3.667,1718,4.36,1719,5.214,1720,4.36,1721,5.308,1722,5.308,1723,4.36,1724,5.308]],["title/modules/HistoryModule.html",[242,1.254,262,3.299]],["body/modules/HistoryModule.html",[3,0.039,4,0.047,5,0.032,22,0.006,38,0.119,39,0.56,47,0.047,48,0.275,52,0.383,53,3.54,65,0.005,66,0.005,69,2.869,133,4.026,242,2.157,244,2.227,245,2.318,246,2.417,247,2.417,248,2.417,249,3.447,262,6.666,265,5.127,272,3.115,273,2.417,274,2.417,276,2.644,467,4.026,475,3.577,1708,6.744,1719,6.071,1720,4.73,1725,5.139,1726,5.759,1727,5.139,1728,6.672,1729,5.759,1730,6.622,1731,5.759,1732,5.759,1733,5.759]],["title/classes/HistoryPagerDto.html",[48,0.228,1715,3.467]],["body/classes/HistoryPagerDto.html",[3,0.049,4,0.058,5,0.04,22,0.006,38,0.113,47,0.058,48,0.342,65,0.005,66,0.005,134,1.438,162,1.844,589,2.115,590,1.979,591,1.947,841,2.774,842,2.569,850,3.998,1715,6.173,1734,7.176]],["title/injectables/HistoryService.html",[0,0.464,1719,3.155]],["body/injectables/HistoryService.html",[0,0.571,2,1.008,3,0.028,4,0.033,5,0.023,7,0.49,8,1.519,10,1.46,12,1.037,15,1.037,19,1.079,21,1.127,22,0.006,23,0.868,24,0.821,25,0.967,28,1.195,35,1.111,38,0.11,39,0.398,42,2.335,47,0.033,48,0.195,50,0.946,52,0.529,62,1.031,65,0.004,66,0.004,73,2.192,80,1.582,86,3.017,93,1.793,122,2.187,144,4.584,155,2.595,199,2.292,237,2.196,386,2.416,509,3.677,545,1.856,558,5.245,567,2.764,595,3.066,673,2.827,674,2.971,675,2.335,676,2.335,692,3.652,741,2.764,854,3.235,867,2.951,876,4.363,901,2.827,905,3.316,906,3.401,915,3.466,917,2.827,927,3.155,928,2.578,1144,2.135,1161,2.971,1280,3.361,1711,3.59,1715,5.46,1718,3.361,1719,3.884,1735,4.092,1736,4.092,1737,5.879,1738,4.828,1739,4.092,1740,5.879,1741,4.092,1742,4.092,1743,4.092,1744,5.879,1745,4.092,1746,4.092,1747,5.879,1748,4.092,1749,4.092,1750,4.092,1751,5.879,1752,4.092,1753,4.092,1754,3.361,1755,4.092,1756,4.092]],["title/injectables/HistoryTrpcRouter.html",[0,0.464,1728,3.467]],["body/injectables/HistoryTrpcRouter.html",[0,0.606,2,1.095,3,0.03,4,0.036,5,0.025,7,0.532,8,1.612,10,1.762,12,1.1,14,4.711,15,1.1,19,1.057,21,0.667,22,0.006,23,0.513,24,0.643,25,0.572,28,1.083,30,2.091,38,0.121,39,0.432,47,0.036,48,0.212,49,1.622,50,1.664,52,0.582,62,1.079,65,0.004,66,0.004,83,2.003,93,1.356,122,1.802,201,3.347,559,2.863,563,1.95,586,2.821,595,2.32,826,3.471,927,3.347,928,2.735,947,4.109,948,4.768,949,2.717,950,4.445,954,3.448,957,3.809,958,2.717,959,2.717,960,2.717,961,2.717,962,2.717,963,2.717,964,4.109,965,2.717,967,2.623,969,2.717,970,4.768,971,4.109,975,2.938,1711,2.717,1715,3.229,1717,3.072,1718,3.653,1719,5.781,1720,3.653,1728,4.528,1757,4.448,1758,4.758,1759,5.393,1760,6.237,1761,4.448,1762,4.448,1763,4.448,1764,4.448,1765,4.448,1766,4.448,1767,4.448,1768,3.969,1769,4.448,1770,5.565,1771,4.448,1772,4.448,1773,3.653,1774,4.448]],["title/interfaces/IAuthGateway.html",[193,1.922,418,3.922]],["body/interfaces/IAuthGateway.html",[3,0.027,4,0.032,5,0.022,10,0.77,15,0.7,22,0.006,24,0.592,35,1.559,38,0.122,39,0.385,47,0.055,48,0.189,49,1.447,50,1.562,52,0.576,56,2.262,62,1.377,63,1.911,65,0.004,66,0.004,73,1.825,79,1.96,84,1.911,122,1.691,136,5.193,137,5.193,138,4.907,141,2.879,143,4.907,144,3.737,146,4.415,150,2.62,153,3.97,155,2.515,156,3.645,159,4.415,160,6.044,162,1.466,193,2.313,199,1.988,208,2.338,228,3.51,229,3.612,325,1.461,384,4.7,386,2.362,392,4.72,393,2.338,394,3.539,395,3.047,396,2.338,397,2.262,398,3.257,399,3.539,400,3.539,401,4.128,402,3.257,403,5.955,404,5.381,405,3.539,406,4.172,407,3.047,408,3.047,409,3.047,410,3.047,411,2.422,412,3.047,413,3.257,414,4.72,415,1.911,416,3.257,417,2.262,418,6.087,419,2.338,420,3.539,421,3.539,422,2.515,423,3.539,424,3.047,425,3.539,426,3.539,427,3.539,428,2.739,429,5.128,430,3.539,431,3.539,432,3.539,433,3.539,434,3.539,435,5.128,436,5.128,437,3.539,438,3.539,439,6.613,440,3.539,441,3.539,442,3.539,443,3.047,444,3.539,445,3.539,446,2.879,447,3.539,448,3.539,449,3.539,450,2.879,451,3.539,452,3.539,453,3.539,454,3.539,455,3.539,456,3.539,457,3.047,458,3.539,459,3.539,460,3.539,461,3.539]],["title/interfaces/IBaseResponse.html",[193,1.922,1775,3.922]],["body/interfaces/IBaseResponse.html",[3,0.037,4,0.044,5,0.03,7,0.649,8,1.844,15,0.956,22,0.006,24,0.964,25,1.202,33,3.661,38,0.095,47,0.058,48,0.259,65,0.004,66,0.004,102,2.612,191,3.438,193,2.182,196,3.861,198,3.709,199,2.134,227,4.806,228,5.628,325,1.814,386,3.843,393,3.196,653,6.152,1591,5.377,1775,6.55,1776,4.837,1777,7.856,1778,7.116,1779,7.116,1780,4.837,1781,4.837,1782,4.837,1783,4.837,1784,4.837,1785,4.837]],["title/classes/IdDto.html",[48,0.228,955,2.563]],["body/classes/IdDto.html",[3,0.047,4,0.056,5,0.039,22,0.006,38,0.11,47,0.068,48,0.33,52,0.46,65,0.005,66,0.005,134,1.386,162,1.804,545,2.626,589,2.63,590,1.908,591,2.257,592,1.972,594,4.464,955,4.464,1076,5.089,1786,6.917,1787,6.917]],["title/injectables/IdempotenceInterceptor.html",[0,0.464,292,3.669]],["body/injectables/IdempotenceInterceptor.html",[0,0.481,2,0.799,3,0.022,4,0.026,5,0.018,7,0.388,10,1.404,12,0.874,15,0.874,18,4.833,19,0.813,21,0.9,22,0.006,23,0.693,24,0.745,25,0.771,28,0.86,33,2.273,35,0.881,38,0.113,39,0.481,40,1.693,47,0.04,48,0.155,49,1.184,50,1.144,52,0.609,62,1.142,65,0.003,66,0.003,73,1.478,93,0.99,98,2.919,122,1.809,144,4.382,155,2.058,189,4.493,190,1.794,193,1.306,196,1.423,198,1.306,199,1.627,203,3.27,208,3.539,210,3.42,220,3.046,229,2.273,235,3.27,237,3.221,292,3.804,351,3.806,352,4.357,359,2.666,375,2.666,411,3.666,450,4.357,505,1.526,526,2.356,534,2.919,535,2.513,657,4.673,675,1.851,676,1.851,703,2.356,704,4.146,724,2.737,1001,4.93,1020,4.93,1129,2.666,1235,3.806,1349,4.066,1360,4.639,1591,1.982,1788,2.896,1789,5.355,1790,3.804,1791,2.494,1792,3.245,1793,4.417,1794,3.245,1795,3.594,1796,4.259,1797,4.875,1798,3.245,1799,1.982,1800,3.594,1801,2.896,1802,2.896,1803,2.896,1804,2.896,1805,2.666,1806,2.666,1807,2.242,1808,2.896,1809,4.417,1810,2.896,1811,2.896,1812,2.896,1813,4.066,1814,5.355,1815,4.875,1816,4.417,1817,5.355,1818,2.242,1819,2.896,1820,2.896,1821,3.804,1822,2.356,1823,2.666,1824,4.417,1825,2.896,1826,2.896,1827,2.896,1828,2.896,1829,2.896,1830,6.451,1831,2.896,1832,2.896,1833,2.896,1834,5.355,1835,2.896,1836,2.896,1837,2.896,1838,4.417,1839,2.494,1840,2.896,1841,2.896,1842,2.896,1843,2.896,1844,2.494,1845,5.992,1846,2.896,1847,2.896,1848,2.896,1849,2.896,1850,2.896,1851,2.896]],["title/interfaces/IdempotenceOption.html",[193,1.922,1813,3.922]],["body/interfaces/IdempotenceOption.html",[0,0.47,3,0.022,4,0.026,5,0.018,7,0.377,8,1.25,10,1.143,15,0.555,18,3.735,22,0.006,24,0.834,25,1.124,33,3.034,34,2.391,35,0.854,38,0.113,39,0.47,40,1.642,47,0.039,48,0.15,49,1.148,50,1.118,52,0.606,62,1.128,65,0.003,66,0.003,73,0.775,98,2.852,122,1.785,144,3.256,155,1.996,189,3.897,190,1.74,193,1.267,196,2.583,198,1.267,199,1.961,203,3.891,208,3.473,210,3.341,220,2.989,229,2.704,235,3.195,237,3.161,292,2.419,351,3.735,352,4.276,359,2.585,375,2.585,393,1.856,411,1.923,419,3.897,450,5.466,505,1.48,526,2.285,534,2.852,535,2.455,657,5.082,675,1.796,676,1.796,703,2.285,704,4.565,724,2.674,1001,6.184,1020,4.837,1129,2.585,1235,3.735,1349,3.972,1360,4.068,1591,3.597,1788,2.809,1789,5.897,1793,2.809,1795,2.285,1796,3.067,1797,3.511,1800,3.511,1801,2.809,1802,2.809,1803,2.809,1804,2.809,1805,2.585,1806,2.585,1807,2.175,1808,2.809,1809,4.315,1810,2.809,1811,2.809,1812,2.809,1813,4.837,1814,6.718,1815,5.692,1816,5.897,1817,6.718,1818,2.175,1819,2.809,1820,2.809,1821,3.716,1822,2.285,1823,2.585,1824,4.315,1825,2.809,1826,2.809,1827,2.809,1828,2.809,1829,2.809,1830,6.363,1831,2.809,1832,2.809,1833,2.809,1834,5.255,1835,2.809,1836,2.809,1837,2.809,1838,4.315,1839,2.419,1840,2.809,1841,2.809,1842,2.809,1843,2.809,1844,2.419,1845,5.897,1846,2.809,1847,2.809,1848,2.809,1849,2.809,1850,2.809,1851,2.809]],["title/classes/ImageCaptcha.html",[48,0.228,733,3.669]],["body/classes/ImageCaptcha.html",[3,0.048,4,0.056,5,0.039,7,0.831,8,2.154,19,1.129,22,0.006,24,0.859,47,0.068,48,0.397,65,0.005,66,0.005,134,1.39,199,2.297,387,5.331,545,2.82,733,6.403,759,6.171,1852,6.191,1853,6.938,1854,6.938,1855,5.037]],["title/classes/ImageCaptchaDto.html",[48,0.228,721,3.299]],["body/classes/ImageCaptchaDto.html",[3,0.043,4,0.051,5,0.035,22,0.006,38,0.104,47,0.073,48,0.428,65,0.005,66,0.005,134,1.265,162,2.001,198,3.166,227,3.292,532,3.387,589,1.861,590,1.741,591,2.134,592,1.799,721,5.433,746,5.433,747,5.433,796,4.582,797,4.849,798,5.852,799,4.849,800,3.301,801,6.043,802,6.043,803,4.36,804,4.849,805,4.582,806,3.721,807,4.849,808,4.849]],["title/classes/ImagesDto.html",[48,0.228,1856,4.261]],["body/classes/ImagesDto.html",[3,0.046,4,0.055,5,0.038,22,0.006,24,0.698,38,0.109,47,0.075,48,0.323,52,0.546,65,0.005,66,0.005,134,1.358,162,1.782,589,1.997,590,1.869,591,2.229,592,1.932,594,3.636,746,4.68,747,4.68,759,4.68,800,2.844,1856,7.33,1857,6.045,1858,8.215,1859,4.68,1860,6.775,1861,6.312,1862,6.775,1863,6.775,1864,6.045]],["title/injectables/InteractListener.html",[0,0.464,1865,3.669]],["body/injectables/InteractListener.html",[0,0.487,2,0.813,3,0.023,4,0.027,5,0.018,7,0.395,10,0.641,12,0.885,15,0.885,19,0.987,21,1.092,22,0.006,23,0.841,24,0.751,25,0.936,28,1.176,38,0.116,39,0.321,47,0.027,48,0.157,52,0.626,65,0.003,66,0.003,73,2.177,80,2.619,122,1.823,277,2.181,325,2.182,395,2.536,396,1.947,397,1.883,415,2.417,559,2.303,614,5.674,854,4.288,909,4.918,910,4.119,911,2.946,912,2.397,913,2.711,1048,4.918,1059,5.205,1084,2.28,1086,6.024,1133,2.016,1136,2.536,1139,2.711,1140,3.853,1152,3.641,1154,3.641,1227,2.094,1233,4.119,1865,3.853,1866,3.301,1867,4.475,1868,4.475,1869,5.015,1870,5.015,1871,3.301,1872,6.774,1873,3.301,1874,5.015,1875,4.475,1876,4.475,1877,3.301,1878,4.475,1879,3.301,1880,3.301,1881,5.015,1882,3.301,1883,3.301,1884,5.015,1885,4.679,1886,3.301,1887,3.301,1888,3.301,1889,2.536,1890,2.946,1891,4.475,1892,2.536,1893,2.536,1894,8.72,1895,3.301,1896,3.301,1897,3.301,1898,2.711,1899,3.853,1900,8.579,1901,7.285,1902,7.285,1903,4.981,1904,7.285,1905,7.285,1906,2.946,1907,3.301,1908,2.946,1909,3.301,1910,5.015,1911,2.946,1912,4.119,1913,6.065,1914,6.065,1915,5.412]],["title/modules/InteractModule.html",[242,1.254,263,3.155]],["body/modules/InteractModule.html",[3,0.033,4,0.039,5,0.027,22,0.006,23,0.556,38,0.125,39,0.468,47,0.039,48,0.23,52,0.32,53,3.337,65,0.004,66,0.004,133,3.796,242,1.974,244,1.863,245,1.94,246,2.023,247,2.023,248,2.023,249,3.155,253,5.845,263,6.545,271,4.83,272,2.768,273,2.023,274,2.023,276,3.027,277,3.184,467,3.796,475,3.178,481,3.329,1105,5.336,1208,5.541,1227,3.057,1495,6.035,1865,6.713,1892,5.066,1916,4.301,1917,4.82,1918,4.82,1919,4.301,1920,6.343,1921,6.713,1922,4.82,1923,4.82,1924,5.066,1925,4.82,1926,4.82,1927,3.703,1928,4.301,1929,3.959,1930,4.82,1931,4.82]],["title/classes/InteractPagerDto.html",[48,0.228,1932,3.922]],["body/classes/InteractPagerDto.html",[3,0.048,4,0.057,5,0.039,22,0.006,38,0.119,47,0.057,48,0.334,65,0.005,66,0.005,134,1.403,162,1.817,545,2.645,589,2.064,590,1.931,591,1.9,841,2.707,842,2.506,850,3.94,956,3.14,1076,5.116,1932,6.882,1933,7.001]],["title/classes/InteractProcessor.html",[48,0.228,1924,3.669]],["body/classes/InteractProcessor.html",[3,0.029,4,0.034,5,0.023,7,0.501,8,1.545,10,1.56,11,4.079,12,1.055,15,1.055,19,1.029,21,1.045,22,0.006,23,0.928,24,0.718,25,0.896,28,1.038,33,1.923,34,2.071,35,1.622,38,0.111,39,0.407,47,0.049,48,0.2,50,1.857,52,0.595,65,0.004,66,0.004,73,2.058,80,2.311,122,1.902,134,0.839,193,1.686,199,1.449,220,3.034,277,2.767,415,2.881,854,4.363,1086,4.604,1104,3.441,1105,5.104,1133,4.257,1152,5.06,1154,4.34,1208,5.455,1223,4.593,1224,3.441,1227,2.657,1383,5.25,1657,5.725,1889,3.219,1892,3.219,1893,3.219,1903,3.441,1912,3.441,1924,4.593,1927,3.219,1929,3.441,1934,3.738,1935,5.978,1936,5.978,1937,5.978,1938,5.334,1939,5.334,1940,7.351,1941,5.978,1942,4.189,1943,5.334,1944,4.189,1945,3.738,1946,3.441,1947,3.738,1948,5.334,1949,6.782,1950,5.334,1951,5.334,1952,3.738,1953,6.782,1954,3.738,1955,6.782,1956,5.334,1957,6.782,1958,7.171,1959,3.738]],["title/injectables/InteractTrpcRouter.html",[0,0.464,1920,3.467]],["body/injectables/InteractTrpcRouter.html",[0,0.445,2,0.723,3,0.02,4,0.024,5,0.016,7,0.351,8,1.184,10,1.644,12,0.808,14,4.046,15,0.808,19,0.862,21,0.44,22,0.006,23,0.339,24,0.472,25,0.377,28,0.796,30,1.38,38,0.116,39,0.285,47,0.024,48,0.14,49,1.071,50,1.596,52,0.639,62,1.246,65,0.003,66,0.003,83,2.54,109,3.323,122,2.08,144,4.226,155,1.862,201,3.927,339,2.411,542,3.574,545,2.413,595,2.39,638,4.33,657,1.731,675,1.675,676,1.675,741,2.994,762,2.255,826,3.527,842,1.051,915,3.754,927,3.417,928,2.792,947,3.215,948,3.889,949,1.793,950,3.817,954,2.533,955,1.575,956,1.317,957,2.798,958,1.793,959,1.793,960,1.793,961,1.793,962,1.793,963,1.793,964,4.36,965,1.793,969,3.889,970,5.254,971,4.907,975,3.027,980,4.206,1208,4.848,1237,2.619,1355,3.723,1383,2.028,1495,4.398,1497,2.255,1506,2.619,1920,3.326,1927,2.255,1928,2.619,1932,2.411,1960,2.935,1961,5.635,1962,4.398,1963,4.582,1964,2.935,1965,2.935,1966,2.935,1967,4.582,1968,2.935,1969,2.935,1970,2.935,1971,2.935,1972,6.905,1973,4.582,1974,2.935,1975,4.582,1976,2.935,1977,4.582,1978,2.935,1979,4.088,1980,4.582,1981,2.935,1982,4.582,1983,4.582,1984,2.935,1985,2.935,1986,2.935,1987,2.935,1988,2.935,1989,2.935,1990,4.582,1991,4.582,1992,2.935,1993,4.582,1994,2.935,1995,4.582,1996,2.935,1997,4.582,1998,4.582,1999,4.582,2000,2.935]],["title/interfaces/JobData.html",[193,1.922,1946,3.922]],["body/interfaces/JobData.html",[3,0.031,4,0.037,5,0.026,7,0.546,8,1.641,10,1.417,11,3.407,15,0.805,22,0.006,23,0.733,24,0.814,35,1.238,38,0.114,39,0.443,47,0.052,48,0.218,50,1.687,52,0.607,65,0.004,66,0.004,73,1.563,122,1.975,193,1.836,199,2.082,277,3.014,393,2.69,415,3.059,854,4.518,1086,5.675,1105,4.459,1133,5.382,1152,6.237,1154,6.024,1208,4.63,1223,4.878,1224,3.747,1227,2.893,1383,5.453,1657,5.997,1889,3.505,1892,3.505,1893,3.505,1903,3.747,1912,3.747,1924,3.505,1927,3.505,1929,3.747,1934,4.071,1938,4.071,1939,4.071,1940,5.997,1943,4.071,1945,4.071,1946,5.214,1947,4.071,1948,5.664,1949,7.043,1950,5.664,1951,5.664,1952,4.071,1953,7.043,1954,4.071,1955,7.043,1956,5.664,1957,7.043,1958,7.403,1959,4.071]],["title/injectables/JwtAuthGuard.html",[0,0.464,114,3.669]],["body/injectables/JwtAuthGuard.html",[0,0.608,2,1.1,3,0.056,4,0.036,5,0.025,7,0.534,10,1.401,12,1.103,15,1.103,18,5.411,19,0.977,21,1.082,22,0.006,23,0.833,24,0.645,25,0.928,28,1.086,35,1.958,38,0.119,39,0.434,40,2.329,47,0.036,48,0.213,52,0.547,56,2.547,62,1.082,63,2.152,65,0.004,66,0.004,73,1.777,83,2.644,84,3.014,111,4.997,114,4.805,122,1.565,154,3.431,162,1.356,176,3.084,182,3.242,183,2.099,184,2.152,185,2.152,189,2.633,190,2.469,203,2.95,205,3.667,228,3.819,229,2.05,235,5.166,325,1.135,384,2.832,401,5.35,422,2.832,479,2.727,487,3.431,530,2.832,535,3.969,542,4.577,1569,3.667,1571,2.95,1791,3.431,1796,4.959,1799,2.727,1818,3.084,1822,3.242,2001,7.82,2002,4.465,2003,6.254,2004,5.136,2005,6.254,2006,4.465,2007,5.58,2008,4.465,2009,6.254,2010,4.465,2011,5.928,2012,4.465,2013,6.254,2014,4.465,2015,3.667,2016,4.465,2017,5.136,2018,4.465,2019,4.465,2020,4.465,2021,4.465,2022,4.465,2023,3.984,2024,4.465,2025,4.465]],["title/injectables/JwtStrategy.html",[0,0.464,469,3.669]],["body/injectables/JwtStrategy.html",[0,0.726,2,1.433,3,0.04,4,0.047,5,0.033,7,0.696,10,1.129,12,1.318,15,1.318,19,1.011,21,1.12,22,0.006,23,0.862,24,0.77,25,0.96,28,1.01,38,0.12,39,0.565,47,0.047,48,0.277,62,0.872,65,0.005,66,0.005,73,2.032,79,4.079,93,1.774,162,1.62,229,2.671,286,3.216,342,2.876,380,4.47,422,3.689,469,5.739,479,3.553,480,7.15,498,5.191,530,3.689,1571,3.843,1592,4.47,1595,4.47,1596,4.223,1609,5.739,2026,5.817,2027,7.47,2028,7.47,2029,5.817,2030,5.817,2031,8.251,2032,7.47,2033,5.817,2034,6.135,2035,5.817,2036,5.817,2037,5.817,2038,5.817,2039,5.817,2040,5.817]],["title/injectables/LikeService.html",[0,0.464,1105,2.917]],["body/injectables/LikeService.html",[0,0.406,2,0.643,3,0.018,4,0.021,5,0.015,7,0.313,10,0.507,12,0.737,15,0.461,19,0.943,21,1.043,22,0.006,23,0.803,24,0.922,25,0.895,28,1.394,38,0.097,39,0.254,47,0.021,48,0.125,50,0.604,52,0.534,62,1.229,65,0.003,66,0.003,73,2.164,84,1.259,86,1.832,93,1.99,122,1.959,199,2.276,229,2.996,325,1.063,504,1.657,505,3.436,509,3.622,522,1.541,523,1.444,529,1.326,534,2.464,545,2.964,559,3.355,562,1.596,595,3.812,598,3.645,675,1.49,676,1.49,739,2.146,741,1.965,842,0.935,867,1.121,915,3.519,928,2.29,1018,5.378,1105,2.552,1130,3.432,1131,2.007,1132,2.007,1133,5.418,1147,3.432,1148,4.901,1149,3.432,1150,3.432,1206,3.432,1223,4.585,1225,5.244,1227,1.657,1235,3.312,1355,3.942,1383,1.805,1543,2.007,1546,2.331,2041,2.613,2042,4.179,2043,4.179,2044,4.179,2045,2.613,2046,4.179,2047,2.613,2048,4.179,2049,2.613,2050,4.179,2051,2.613,2052,4.179,2053,2.613,2054,4.179,2055,2.613,2056,5.222,2057,4.179,2058,2.613,2059,2.613,2060,2.613,2061,4.179,2062,2.613,2063,2.613,2064,2.613,2065,4.179,2066,4.179,2067,2.613,2068,4.179,2069,3.034,2070,2.613,2071,2.613,2072,2.613,2073,2.613,2074,2.613,2075,4.179,2076,2.613,2077,3.729]],["title/injectables/LocalGuard.html",[0,0.464,369,3.922]],["body/injectables/LocalGuard.html",[0,0.78,2,1.607,3,0.045,4,0.053,5,0.036,7,0.781,12,1.417,19,0.884,21,0.978,22,0.006,23,0.753,24,0.673,25,0.839,28,1.133,38,0.116,39,0.634,47,0.053,48,0.311,62,0.978,65,0.005,66,0.005,73,2.142,93,1.99,162,1.741,325,1.659,369,6.594,479,3.985,530,4.139,1569,5.36,1571,4.311,1796,5.755,2004,6.594,2078,6.526,2079,8.029,2080,8.029,2081,6.526,2082,6.526]],["title/injectables/LocalStrategy.html",[0,0.464,470,3.669]],["body/injectables/LocalStrategy.html",[0,0.715,2,1.401,3,0.039,4,0.046,5,0.032,7,0.681,12,1.299,15,1.004,19,0.997,21,1.103,22,0.006,23,0.85,24,0.759,25,0.946,28,0.988,38,0.119,39,0.553,47,0.046,48,0.271,52,0.378,62,0.853,65,0.005,66,0.005,72,4.37,73,2.01,75,4.798,83,2.365,93,1.735,111,5.225,112,4.13,122,1.423,162,1.597,199,2.22,376,3.758,379,5.075,422,3.607,470,5.657,479,3.474,521,5.075,530,3.607,835,3.354,1571,3.758,1592,6.272,1595,6.272,1596,4.13,1609,5.657,2083,5.688,2084,7.362,2085,5.688,2086,5.688,2087,7.362,2088,5.688,2089,5.075,2090,5.688,2091,5.688]],["title/modules/LoggerModule.html",[242,1.254,264,3.467]],["body/modules/LoggerModule.html",[3,0.045,4,0.053,5,0.037,22,0.006,38,0.107,39,0.638,47,0.053,48,0.313,53,3.439,65,0.005,66,0.005,242,2.29,244,2.537,245,2.642,246,2.755,247,2.755,248,2.755,249,3.66,264,6.986,272,3.382,273,2.755,274,2.755,2092,5.856,2093,5.856,2094,5.856,2095,7.64,2096,6.563,2097,6.563]],["title/injectables/LoggingInterceptor.html",[0,0.464,2098,4.261]],["body/injectables/LoggingInterceptor.html",[0,0.71,2,1.384,3,0.039,4,0.046,5,0.031,7,0.673,8,1.888,10,1.576,11,4.611,12,1.289,19,0.989,21,0.842,22,0.006,23,0.649,24,0.579,25,0.722,28,0.976,33,2.58,34,2.778,35,1.982,38,0.097,39,0.546,47,0.046,48,0.268,49,2.05,52,0.571,62,0.842,65,0.004,66,0.004,203,3.712,207,4.615,229,3.353,411,4.956,1082,4.785,1533,4.615,1534,6.517,1790,6.235,1795,4.079,1796,5.449,1797,6.238,1799,4.461,1800,5.303,1806,5.999,1807,3.881,1818,3.881,1821,4.317,2098,6.517,2099,5.619,2100,5.619,2101,6.665,2102,7.304,2103,7.304,2104,5.619,2105,5.619,2106,5.619,2107,7.304,2108,5.619,2109,5.619]],["title/classes/LoginDto.html",[48,0.228,349,3.669]],["body/classes/LoginDto.html",[3,0.045,4,0.054,5,0.037,22,0.006,24,0.684,38,0.108,47,0.074,48,0.387,52,0.539,65,0.005,66,0.005,75,3.562,134,1.33,162,1.901,349,6.234,356,4.819,376,4.385,532,3.562,589,1.957,590,2.238,591,1.801,592,1.893,594,3.562,2110,5.923,2111,7.24,2112,5.923,2113,7.24,2114,5.923,2115,5.923,2116,5.923,2117,5.923,2118,5.923,2119,5.923]],["title/classes/LoginResult.html",[48,0.228,1855,3.467]],["body/classes/LoginResult.html",[3,0.049,4,0.058,5,0.04,7,0.848,8,2.181,19,0.96,22,0.006,24,0.731,47,0.069,48,0.403,65,0.005,66,0.005,134,1.42,199,2.262,387,6.926,545,2.237,733,5.445,759,4.896,1852,6.324,1855,6.128,2120,7.087]],["title/classes/LoginResult-1.html",[48,0.189,237,2.131,1855,2.883]],["body/classes/LoginResult-1.html",[3,0.05,4,0.059,5,0.041,7,0.873,8,2.218,19,0.987,22,0.006,24,0.751,47,0.059,48,0.348,65,0.005,66,0.005,134,1.461,199,2.08,387,7.008,1855,6.231,2121,7.289,2122,7.289]],["title/modules/MailerModule.html",[242,1.254,1685,3.467]],["body/modules/MailerModule.html",[3,0.036,4,0.043,5,0.029,22,0.006,23,0.607,35,1.427,38,0.122,39,0.511,47,0.043,48,0.251,52,0.35,53,3.438,65,0.004,66,0.004,133,3.91,208,3.101,242,2.064,244,2.033,245,2.117,246,2.208,247,2.208,248,2.208,249,3.298,272,2.936,273,2.208,274,2.208,276,3.211,278,4.831,279,3.101,286,2.908,325,1.338,337,3.212,342,2.6,467,3.91,475,3.37,476,5.311,590,1.929,1275,6.507,1363,4.32,1381,4.693,1467,3.336,1685,6.828,2123,4.693,2124,4.693,2125,5.26,2126,5.26,2127,5.26,2128,5.26,2129,4.32,2130,6.994,2131,5.26,2132,4.693,2133,5.26,2134,5.26,2135,5.26,2136,5.26,2137,5.26,2138,5.26,2139,5.26,2140,5.26,2141,4.693,2142,5.26,2143,5.26,2144,4.32,2145,5.26]],["title/injectables/MailerService.html",[0,0.464,1275,3.467]],["body/injectables/MailerService.html",[0,0.463,2,0.76,3,0.021,4,0.025,5,0.017,7,0.369,8,1.231,10,1.45,11,3.509,12,0.84,15,0.84,19,1.054,21,1.119,22,0.006,23,0.898,24,0.802,25,0.96,28,1.227,33,2.67,34,2.875,35,2.026,38,0.11,39,0.3,47,0.025,48,0.147,50,1.344,52,0.548,56,1.76,62,0.98,63,1.487,65,0.003,66,0.003,73,2.236,83,0.991,84,2.295,93,0.941,122,2.108,180,2.354,181,1.609,183,1.45,184,1.487,185,1.487,196,1.353,199,2.161,210,3.289,227,4.65,237,2.555,286,1.705,342,1.525,351,4.736,384,1.956,417,1.76,505,3.78,522,2.808,523,1.705,526,2.24,529,1.566,532,1.655,535,3.318,590,0.851,703,4.747,704,4.017,741,2.239,758,4.249,762,3.658,774,3.658,787,2.752,1082,4.167,1225,2.131,1235,3.02,1275,5.422,1467,4.147,1533,2.534,1570,4.222,1573,2.24,1799,2.908,2129,2.534,2141,4.249,2146,3.085,2147,4.762,2148,4.762,2149,5.815,2150,4.762,2151,3.085,2152,6.539,2153,4.762,2154,4.762,2155,3.085,2156,4.762,2157,3.085,2158,4.762,2159,3.085,2160,3.085,2161,6.176,2162,7.784,2163,6.539,2164,3.085,2165,4.762,2166,3.085,2167,4.762,2168,4.762,2169,3.085,2170,4.776,2171,4.762,2172,3.085,2173,3.085,2174,3.085,2175,6.539,2176,5.815,2177,5.815,2178,3.085,2179,3.085,2180,3.085,2181,3.085,2182,4.762,2183,3.085,2184,3.085,2185,4.762,2186,3.085,2187,3.085,2188,3.085,2189,3.085,2190,3.085,2191,6.539,2192,3.085,2193,3.085,2194,3.085,2195,3.085,2196,3.085,2197,3.085,2198,3.085,2199,3.085,2200,3.085,2201,3.085,2202,3.085]],["title/injectables/MyLogger.html",[0,0.464,2095,3.669]],["body/injectables/MyLogger.html",[0,0.474,2,0.784,3,0.041,4,0.026,5,0.027,7,0.381,8,1.261,10,1.291,11,1.708,12,0.861,15,0.861,19,1.151,21,1.133,22,0.006,23,0.873,24,0.837,25,0.972,28,1.313,30,4.123,35,1.804,38,0.095,39,0.309,47,0.04,48,0.152,52,0.212,62,0.731,65,0.003,66,0.003,138,5.203,140,3.541,162,1.058,186,2.311,196,2.139,198,3.676,199,2.281,208,3.919,279,1.877,285,2.614,325,1.24,417,3.792,476,4.992,515,3.556,564,2.84,774,3.747,1408,4.352,1799,5.892,2095,3.747,2203,2.84,2204,5.93,2205,7.562,2206,5.931,2207,6.647,2208,5.931,2209,5.931,2210,7.562,2211,7.167,2212,3.183,2213,6.647,2214,4.877,2215,4.877,2216,3.183,2217,5.93,2218,7.562,2219,3.183,2220,3.183,2221,4.877,2222,3.183,2223,4.877,2224,3.183,2225,4.877,2226,3.183,2227,3.183,2228,3.183,2229,3.183,2230,3.183,2231,5.291,2232,4.877,2233,7.167,2234,4.877,2235,2.84,2236,2.84,2237,5.291,2238,3.183,2239,3.183,2240,3.183,2241,3.183,2242,3.183,2243,3.183,2244,3.183,2245,4.877,2246,3.183,2247,3.183,2248,5.93,2249,4.877,2250,4.877,2251,3.183,2252,4.877,2253,4.877,2254,4.877,2255,4.877,2256,4.877,2257,4.877,2258,4.877,2259,3.183,2260,3.183,2261,3.183,2262,3.183,2263,3.183,2264,3.183,2265,3.183,2266,3.183,2267,3.183,2268,3.183,2269,3.183,2270,3.183,2271,3.183,2272,3.183,2273,3.183,2274,3.183,2275,3.183,2276,3.183,2277,3.183,2278,5.93,2279,3.183]],["title/injectables/NoteAbility.html",[0,0.464,2280,3.669]],["body/injectables/NoteAbility.html",[0,0.726,2,1.433,3,0.04,4,0.047,5,0.033,7,0.696,12,1.318,19,0.788,21,0.872,22,0.006,23,0.671,24,0.6,25,0.748,28,1.01,35,1.579,38,0.122,39,0.565,43,4.737,47,0.047,48,0.277,49,2.122,52,0.387,62,0.872,65,0.005,66,0.005,79,4.079,83,1.869,325,1.479,382,4.018,509,2.946,511,3.843,549,5.16,550,5.16,552,3.843,554,3.43,556,3.843,559,4.134,565,2.442,812,4.223,813,4.223,814,4.223,815,3.034,816,4.223,817,4.223,819,5.423,820,4.223,822,4.47,823,4.47,824,3.689,825,4.47,826,3.6,827,4.47,991,4.223,992,4.47,2280,5.739,2281,5.817,2282,5.817,2283,5.817]],["title/classes/NoteCollectEvent.html",[48,0.228,909,3.467]],["body/classes/NoteCollectEvent.html",[3,0.044,4,0.053,5,0.036,7,0.777,8,2.068,15,1.145,19,1.175,21,0.973,22,0.006,23,0.749,24,0.894,25,0.834,38,0.086,47,0.053,48,0.309,65,0.005,66,0.005,134,1.3,199,1.939,367,3.589,515,3.051,559,4.349,563,2.845,909,5.809,941,4.949,1052,5.809,1053,5.485,1058,4.711,2284,8.081,2285,6.489,2286,8.001,2287,6.489]],["title/controllers/NoteController.html",[67,1.81,2288,3.922]],["body/controllers/NoteController.html",[3,0.025,4,0.029,5,0.02,7,0.431,12,0.945,19,1.073,21,1.188,22,0.006,23,0.915,24,0.817,25,1.019,28,1.376,38,0.116,39,0.35,47,0.029,48,0.172,50,0.832,52,0.239,57,4.058,62,0.802,65,0.003,66,0.003,67,1.365,69,1.392,71,1.735,73,2.324,79,4.259,80,3.064,83,2.767,86,3.902,93,1.633,98,3.156,99,2.766,100,2.283,101,1.878,102,1.735,105,4.888,107,2.487,122,1.771,220,3.838,360,3.536,545,2.017,559,4.026,565,3.735,567,2.517,569,2.873,570,3.472,586,4.487,595,1.878,724,1.991,815,1.878,826,3.08,833,2.487,835,2.123,871,3.698,883,2.199,955,4.706,956,1.615,967,3.156,974,2.378,978,2.614,981,2.283,1003,2.766,1010,2.766,1018,2.283,1024,2.614,1025,5.754,1026,2.766,1037,2.766,1045,2.766,1046,2.614,1711,3.269,1712,2.957,1717,2.487,1723,2.957,1758,3.536,1770,3.212,2288,4.397,2289,3.6,2290,3.6,2291,4.321,2292,3.212,2293,3.6,2294,3.212,2295,3.6,2296,3.212,2297,3.212,2298,3.6,2299,4.172,2300,3.212,2301,3.6,2302,2.957,2303,4.487,2304,3.212,2305,3.6,2306,2.614,2307,2.957,2308,2.766,2309,2.957,2310,2.957,2311,3.6,2312,2.378,2313,3.698,2314,3.212,2315,2.957,2316,3.212,2317,2.957,2318,2.957,2319,3.212,2320,2.957,2321,2.957,2322,2.957,2323,2.957,2324,2.957]],["title/classes/NoteDto.html",[48,0.228,2291,2.917]],["body/classes/NoteDto.html",[3,0.038,4,0.045,5,0.031,22,0.006,25,0.715,38,0.123,47,0.074,48,0.423,52,0.37,65,0.004,66,0.004,134,1.115,162,1.975,198,3.251,509,2.195,589,1.64,590,1.535,591,1.969,592,1.587,800,2.336,841,2.151,842,1.992,844,2.195,850,3.798,956,2.496,1076,4.14,1083,2.986,1141,2.902,1143,3.529,1144,2.902,1859,3.844,2291,4.433,2299,3.281,2303,3.529,2325,4.04,2326,5.269,2327,4.04,2328,4.04,2329,4.04,2330,5.269,2331,3.844,2332,3.676,2333,5.269,2334,3.844,2335,4.04,2336,3.676,2337,4.04,2338,3.844,2339,4.04,2340,4.04,2341,4.04,2342,3.529,2343,3.529,2344,3.174,2345,3.399,2346,3.844]],["title/classes/NoteLikeEvent.html",[48,0.228,1885,3.299]],["body/classes/NoteLikeEvent.html",[3,0.044,4,0.053,5,0.036,7,0.777,8,2.068,15,1.145,19,1.175,21,0.973,22,0.006,23,0.749,24,0.894,25,0.834,38,0.086,47,0.053,48,0.309,65,0.005,66,0.005,134,1.3,199,1.939,367,3.589,515,3.051,559,4.349,563,2.845,941,4.949,1052,5.809,1053,5.485,1058,4.711,1060,5.79,1062,5.79,1063,7.139,1885,5.527,2284,8.081]],["title/injectables/NoteListener.html",[0,0.464,2347,3.669]],["body/injectables/NoteListener.html",[0,0.76,2,1.542,3,0.043,4,0.051,5,0.035,10,1.215,15,1.381,19,0.848,21,0.938,22,0.006,23,0.723,24,0.645,25,0.805,38,0.104,39,0.608,47,0.051,48,0.299,50,1.446,52,0.52,65,0.005,66,0.005,73,1.542,122,1.958,559,3.592,614,4.324,1208,5.955,1885,4.324,1898,5.141,1899,4.809,1940,5.141,2347,6.012,2348,6.26,2349,6.26,2350,6.26,2351,6.26,2352,6.26,2353,6.26,2354,6.26]],["title/modules/NoteModule.html",[242,1.254,265,3.299]],["body/modules/NoteModule.html",[3,0.032,4,0.038,5,0.026,22,0.006,38,0.126,39,0.459,47,0.038,48,0.225,52,0.314,53,3.313,65,0.004,66,0.004,69,2.513,133,3.768,242,1.953,244,1.825,245,1.9,246,1.982,247,1.982,248,1.982,249,3.121,256,5.997,257,4.49,262,4.49,263,5.735,265,6.831,271,4.8,272,2.729,273,1.982,274,1.982,276,2.984,467,3.768,475,3.133,481,3.261,1070,4.213,1730,6.634,1758,5.735,1759,5.997,2280,6.671,2288,6.106,2309,3.878,2347,6.671,2355,4.213,2356,4.721,2357,4.721,2358,4.213,2359,6.303,2360,4.721,2361,4.721,2362,4.721,2363,4.721,2364,4.721,2365,4.721,2366,4.721,2367,4.213,2368,4.721]],["title/classes/NotePagerDto.html",[48,0.228,2299,2.816]],["body/classes/NotePagerDto.html",[3,0.038,4,0.045,5,0.031,22,0.006,25,0.714,38,0.123,47,0.074,48,0.423,52,0.369,65,0.004,66,0.004,134,1.112,162,1.973,198,3.248,509,2.189,589,1.637,590,1.531,591,1.966,592,1.583,800,2.33,841,2.146,842,1.987,844,2.189,850,4.021,956,2.49,1076,4.134,1083,2.979,1141,2.895,1143,3.521,1144,2.895,1859,3.835,2291,3.39,2299,4.273,2303,3.521,2325,4.03,2326,4.03,2327,4.03,2328,4.03,2329,4.03,2330,5.261,2331,3.835,2332,3.667,2333,5.261,2334,3.835,2335,4.03,2336,3.667,2337,4.03,2338,3.835,2339,4.03,2340,4.03,2341,4.03,2342,3.521,2343,3.521,2344,3.167,2345,3.39,2346,3.835]],["title/injectables/NotePublicService.html",[0,0.464,1759,3.299]],["body/injectables/NotePublicService.html",[0,0.313,2,0.47,3,0.013,4,0.015,5,0.011,7,0.386,8,0.834,10,1.236,12,0.569,15,0.569,19,1.071,21,1.164,22,0.006,23,0.896,24,0.815,25,0.998,28,1.32,33,0.876,34,0.943,35,1.137,38,0.108,39,0.185,47,0.015,48,0.091,50,1.471,52,0.581,62,1.112,65,0.002,66,0.002,73,2.285,80,0.738,83,1.346,86,3.333,93,2.368,122,2.091,180,0.943,181,0.995,183,0.897,184,0.919,185,0.919,199,2.227,228,3.01,229,1.481,325,2.101,396,1.125,397,1.088,509,3.624,545,2.113,559,3.69,563,0.837,595,2.186,741,3.574,824,3.494,830,1.567,831,4.206,842,0.683,854,1.517,867,1.797,878,3.786,880,3.22,905,2.02,906,2.072,907,1.318,908,1.318,912,1.385,915,4.482,917,3.806,927,4.376,928,3.333,929,4.525,933,1.385,934,1.466,935,1.567,937,1.702,939,2.478,941,1.84,1094,2.878,1104,1.567,1105,3.652,1107,2.878,1133,1.165,1134,1.567,1135,1.702,1140,1.466,1141,1.682,1142,1.385,1143,2.046,1144,2.186,1155,3.592,1159,2.559,1160,2.658,1161,3.042,1163,3.442,1175,1.567,1187,1.702,1188,1.702,1189,2.878,1191,1.702,1192,1.702,1193,1.702,1233,1.567,1355,2.131,1495,4.399,1591,2.559,1697,1.567,1759,2.228,1768,1.702,1885,2.895,1899,2.478,2170,2.649,2299,3.755,2308,1.466,2332,1.26,2336,2.768,2342,4.573,2343,3.125,2344,1.84,2369,1.908,2370,3.226,2371,2.878,2372,3.226,2373,3.226,2374,3.226,2375,3.226,2376,3.226,2377,3.226,2378,2.878,2379,3.226,2380,2.878,2381,3.226,2382,5.509,2383,1.908,2384,3.226,2385,1.908,2386,3.226,2387,1.908,2388,3.226,2389,1.908,2390,3.226,2391,1.908,2392,3.226,2393,1.908,2394,3.226,2395,1.908,2396,3.226,2397,1.908,2398,3.226,2399,1.908,2400,3.226,2401,1.908,2402,3.226,2403,1.908,2404,3.226,2405,1.908,2406,1.567,2407,1.908,2408,1.908,2409,1.908,2410,5.509,2411,1.908,2412,3.226,2413,1.908,2414,3.226,2415,1.908,2416,1.908,2417,1.908,2418,1.702,2419,3.226,2420,3.226,2421,1.908,2422,1.908,2423,1.908,2424,1.908,2425,1.908,2426,1.908,2427,1.908,2428,1.908,2429,1.908,2430,1.908,2431,1.908,2432,1.908]],["title/classes/NoteSearchDto.html",[48,0.228,2343,3.029]],["body/classes/NoteSearchDto.html",[3,0.037,4,0.044,5,0.03,22,0.006,25,0.913,38,0.122,47,0.073,48,0.419,52,0.358,65,0.004,66,0.004,134,1.079,162,1.957,198,3.402,509,2.123,589,1.587,590,1.485,591,1.927,592,1.535,800,2.981,841,2.081,842,1.927,844,2.123,850,3.973,956,2.414,1076,4.051,1083,2.889,1141,3.704,1143,4.504,1144,3.704,1859,3.718,2291,3.287,2299,3.174,2303,3.414,2325,3.908,2326,3.908,2327,3.908,2328,3.908,2329,3.908,2330,5.156,2331,3.718,2332,3.556,2333,5.77,2334,3.718,2335,3.908,2336,3.556,2337,3.908,2338,3.718,2339,3.908,2340,3.908,2341,3.908,2342,3.414,2343,4.504,2344,4.051,2345,4.337,2346,4.905]],["title/injectables/NoteService.html",[0,0.464,1758,3.155]],["body/injectables/NoteService.html",[0,0.472,2,0.779,3,0.022,4,0.026,5,0.018,7,0.379,8,1.255,10,1.147,12,0.857,19,1.064,21,1.131,22,0.006,23,1.011,24,0.89,25,0.97,28,1.31,35,1.604,38,0.104,39,0.308,47,0.026,48,0.151,52,0.502,62,1.131,65,0.003,66,0.003,73,2.279,80,1.224,83,1.017,86,3.555,93,2.301,122,1.659,180,1.565,181,1.651,183,1.488,184,1.525,185,1.525,199,2.279,325,1.919,386,3.228,509,3.454,545,2.624,559,2.23,567,3.117,569,2.606,570,2.23,595,2.533,741,2.284,867,2.535,871,3.355,876,3.08,883,2.966,887,3.732,891,3.732,901,3.355,903,3.732,905,2.848,906,2.921,907,2.186,908,2.186,915,2.864,917,2.186,927,3.557,928,2.13,929,2.6,933,2.298,934,2.432,1142,2.298,1144,1.651,1155,2.606,1159,1.933,1160,2.007,1161,2.298,1163,2.6,1175,2.6,1711,2.966,1738,3.989,1754,3.989,1758,3.208,2291,4.048,2299,3.908,2303,4.204,2308,2.432,2334,4.578,2336,3.208,2338,5.212,2406,2.6,2433,3.165,2434,3.165,2435,3.165,2436,3.165,2437,3.165,2438,3.165,2439,3.165,2440,3.165,2441,2.6,2442,3.165,2443,3.165,2444,5.91,2445,7.149,2446,5.91,2447,3.165,2448,3.165,2449,4.857,2450,4.857,2451,4.857,2452,3.165,2453,3.165,2454,3.165,2455,3.165]],["title/classes/NoteTagDto.html",[48,0.228,2456,3.467]],["body/classes/NoteTagDto.html",[3,0.044,4,0.052,5,0.036,22,0.006,23,0.741,24,0.661,38,0.12,47,0.073,48,0.412,52,0.426,65,0.005,66,0.005,134,1.286,162,1.956,312,4.239,325,2.021,589,1.892,590,1.77,591,2.156,592,1.829,841,2.481,842,2.297,844,2.531,850,3.017,1141,3.347,1155,3.443,2456,5.769,2457,4.432,2458,5.27,2459,6.526,2460,5.27,2461,4.93,2462,5.27,2463,4.93,2464,5.27,2465,4.432,2466,4.432,2467,4.432,2468,5.27]],["title/modules/NoteTagModule.html",[242,1.254,266,3.467]],["body/modules/NoteTagModule.html",[3,0.044,4,0.052,5,0.036,22,0.006,38,0.085,39,0.625,47,0.052,48,0.307,52,0.428,53,3.562,65,0.005,66,0.005,69,2.488,133,4.162,242,2.27,244,2.488,245,2.59,246,2.701,247,2.701,248,2.701,249,3.628,266,6.863,272,3.341,273,2.701,274,2.701,276,2.954,312,4.251,467,4.162,475,3.836,2457,4.445,2469,6.434,2470,6.434,2471,6.434]],["title/classes/NoteTagPagerDto.html",[48,0.228,2465,3.299]],["body/classes/NoteTagPagerDto.html",[3,0.043,4,0.051,5,0.035,22,0.006,23,0.726,24,0.649,38,0.119,47,0.073,48,0.408,52,0.418,65,0.005,66,0.005,134,1.261,162,1.943,312,4.158,325,1.997,589,1.855,590,1.736,591,2.13,592,1.794,841,2.433,842,2.253,844,2.482,850,3.692,1141,4.095,1155,4.213,2456,4.569,2457,4.348,2458,5.169,2459,5.169,2460,5.169,2461,4.836,2462,5.169,2463,4.836,2464,5.169,2465,5.423,2466,5.423,2467,5.423,2468,6.448]],["title/injectables/NoteTagService.html",[0,0.464,2472,3.922]],["body/injectables/NoteTagService.html",[0,0.62,2,1.133,3,0.032,4,0.037,5,0.026,7,0.55,8,1.65,10,1.424,12,1.126,19,1.127,21,1.187,22,0.006,23,0.914,24,0.858,25,1.018,28,1.375,38,0.097,39,0.447,42,2.623,47,0.037,48,0.219,52,0.424,62,1.187,65,0.004,66,0.004,73,2.324,80,1.778,86,2.799,93,2.416,122,1.151,199,2.216,312,5.689,325,1.169,386,3.013,509,2.892,515,2.162,545,2.5,559,2.111,567,3.002,570,2.931,741,3.002,867,3.145,871,4.41,876,4.65,883,3.899,887,4.905,891,4.905,905,3.533,906,3.624,927,3.426,928,2.799,996,4.048,2456,5.75,2457,5.949,2465,5.471,2472,5.243,2473,4.599,2474,4.599,2475,4.599,2476,4.599,2477,4.103,2478,4.599,2479,4.599,2480,4.103,2481,4.599,2482,3.777,2483,3.777,2484,4.599,2485,4.599,2486,4.599]],["title/injectables/NoteTagTrpcRouter.html",[0,0.464,2487,4.261]],["body/injectables/NoteTagTrpcRouter.html",[0,0.576,2,1.019,3,0.028,4,0.034,5,0.023,7,0.495,8,1.531,10,1.702,12,1.045,14,4.601,15,1.045,19,1.023,21,0.62,22,0.006,23,0.477,24,0.611,25,0.532,28,1.029,30,1.945,38,0.119,39,0.402,47,0.034,48,0.197,49,1.509,50,1.369,52,0.57,57,4.055,62,1.199,65,0.004,66,0.004,83,1.903,201,3.179,312,5.283,545,1.87,559,2.72,560,6.743,565,3.357,567,1.945,570,1.899,591,1.122,592,1.179,815,2.158,826,2.855,928,3.314,947,3.948,948,4.615,949,2.526,950,4.34,954,3.275,955,2.22,956,1.855,957,3.618,958,2.526,959,2.526,960,2.526,961,2.526,962,2.526,963,2.526,964,4.562,965,2.526,967,2.439,969,3.618,970,5.353,971,4.747,974,2.733,975,3.913,980,3.913,981,2.623,2313,4.092,2457,5.525,2461,3.178,2465,2.857,2472,7.038,2480,3.691,2487,5.286,2488,4.137,2489,5.924,2490,4.137,2491,4.137,2492,4.137,2493,4.137,2494,4.137,2495,4.137,2496,3.178,2497,4.137,2498,4.137,2499,4.137,2500,4.137]],["title/classes/NoteTagUpdateDto.html",[48,0.228,2463,3.669]],["body/classes/NoteTagUpdateDto.html",[3,0.044,4,0.052,5,0.036,22,0.006,23,0.741,24,0.661,38,0.12,47,0.073,48,0.412,52,0.426,65,0.005,66,0.005,134,1.286,162,1.956,312,4.239,325,2.021,589,1.892,590,1.77,591,2.156,592,1.829,841,2.481,842,2.297,844,2.531,850,3.017,1141,3.347,1155,3.443,2456,4.658,2457,4.432,2458,5.27,2459,5.27,2460,5.27,2461,4.93,2462,5.27,2463,6.105,2464,6.526,2465,4.432,2466,4.432,2467,4.432,2468,5.27]],["title/injectables/NoteTrpcRouter.html",[0,0.464,2359,3.467]],["body/injectables/NoteTrpcRouter.html",[0,0.379,2,0.59,3,0.016,4,0.019,5,0.013,7,0.287,8,1.007,10,1.517,12,0.687,14,3.699,15,0.687,19,0.768,21,0.359,22,0.006,23,0.276,24,0.402,25,0.308,28,0.677,30,1.126,38,0.112,39,0.233,47,0.019,48,0.114,49,0.874,50,1.311,52,0.622,57,3.35,62,1.278,65,0.002,66,0.002,83,2.619,93,2.151,122,2.133,201,4.375,325,0.991,386,1.601,545,2.112,559,3.959,562,2.38,563,1.05,565,2.809,567,1.126,569,1.286,570,1.1,586,1.519,591,0.65,592,0.683,595,1.249,800,1.006,815,1.249,826,4.156,927,4.375,928,3.821,947,2.809,948,3.465,949,1.463,950,3.49,954,2.154,955,1.286,956,1.075,957,2.38,958,1.463,959,1.463,960,1.463,961,1.463,962,1.463,963,1.463,964,4.863,965,1.463,967,1.412,969,4.489,970,5.69,971,5.131,974,1.582,975,4.42,978,1.739,980,3.748,981,2.471,1022,2.137,1023,2.137,1040,2.137,1206,1.967,1711,1.463,1717,1.655,1719,4.659,1758,4.659,1759,4.872,1773,1.967,2291,1.463,2299,1.412,2308,1.84,2309,1.967,2313,1.655,2331,1.655,2342,1.519,2343,1.519,2344,1.367,2359,2.829,2367,2.137,2371,2.137,2378,2.137,2380,2.137,2496,1.84,2501,2.395,2502,3.896,2503,2.395,2504,2.395,2505,2.395,2506,2.395,2507,4.925,2508,2.395,2509,6.691,2510,2.395,2511,2.395,2512,2.395,2513,2.395,2514,2.395,2515,2.395,2516,2.395,2517,4.925,2518,2.395,2519,2.395,2520,3.896,2521,2.395,2522,2.395,2523,2.395,2524,2.395,2525,2.395,2526,2.395,2527,2.395,2528,2.395,2529,2.395,2530,2.395,2531,2.395,2532,2.395]],["title/classes/NoteUpdateDto.html",[48,0.228,2303,3.029]],["body/classes/NoteUpdateDto.html",[3,0.038,4,0.045,5,0.031,22,0.006,25,0.715,38,0.123,47,0.074,48,0.423,52,0.37,65,0.004,66,0.004,134,1.115,162,1.975,198,3.251,509,2.195,589,1.64,590,1.535,591,1.969,592,1.587,800,2.336,841,2.151,842,1.992,844,2.195,850,3.798,956,2.496,1076,4.14,1083,2.986,1141,2.902,1143,3.529,1144,2.902,1859,3.844,2291,3.399,2299,3.281,2303,4.603,2325,4.04,2326,4.04,2327,4.04,2328,4.04,2329,4.04,2330,5.269,2331,3.844,2332,3.676,2333,5.269,2334,3.844,2335,4.04,2336,3.676,2337,4.04,2338,3.844,2339,4.04,2340,4.04,2341,5.269,2342,3.529,2343,3.529,2344,3.174,2345,3.399,2346,3.844]],["title/injectables/NotifactionTrpcRouter.html",[0,0.464,2533,3.467]],["body/injectables/NotifactionTrpcRouter.html",[0,0.658,2,1.233,3,0.034,4,0.041,5,0.028,7,0.6,8,1.749,10,1.784,12,1.194,14,4.886,15,1.194,19,1.112,21,0.751,22,0.006,23,0.578,24,0.698,25,0.644,28,1.175,30,2.355,38,0.117,39,0.487,47,0.041,48,0.239,49,1.827,50,1.564,52,0.509,62,1.149,65,0.004,66,0.004,83,2.174,122,1.694,198,2.016,201,3.632,826,2.414,947,4.373,948,5.014,949,3.059,950,4.609,954,3.742,957,4.133,958,3.059,959,3.059,960,3.059,961,3.059,962,3.059,963,3.059,964,3.861,965,3.059,969,3.059,970,5.014,971,3.861,1225,3.46,1251,4.113,2533,4.913,2534,5.008,2535,5.968,2536,6.768,2537,5.008,2538,5.008,2539,4.113,2540,3.848,2541,5.008,2542,5.008,2543,5.008,2544,4.469,2545,4.469]],["title/controllers/NotificationController.html",[67,1.81,2546,3.922]],["body/controllers/NotificationController.html",[3,0.037,4,0.044,5,0.03,7,0.65,12,1.261,19,0.968,21,1.071,22,0.006,23,0.825,24,0.737,25,0.918,28,1.241,38,0.117,39,0.528,47,0.044,48,0.259,50,1.255,62,1.071,65,0.004,66,0.004,67,2.06,69,2.101,71,2.618,73,2.228,79,4.471,80,2.762,83,2.724,86,3.501,93,2.179,101,2.834,102,2.618,105,3.753,107,3.753,122,1.36,561,4.463,724,3.951,826,2.618,833,3.753,835,3.204,967,4.213,1019,6.134,1024,3.945,1032,5.49,1225,4.936,1253,6.158,2535,5.274,2539,4.463,2540,4.175,2545,4.848,2546,5.869,2547,5.433,2548,5.433,2549,5.433,2550,5.433,2551,5.433,2552,4.848,2553,5.433,2554,5.433,2555,5.433,2556,5.433,2557,5.433,2558,5.433]],["title/injectables/NotificationListener.html",[0,0.464,2559,3.669]],["body/injectables/NotificationListener.html",[0,0.501,2,0.843,3,0.023,4,0.066,5,0.019,7,0.41,10,0.665,12,0.91,15,0.91,19,1.002,21,1.109,22,0.006,23,0.854,24,0.802,25,0.951,28,1.198,38,0.115,39,0.333,47,0.028,48,0.163,50,0.791,52,0.492,62,0.513,65,0.003,66,0.003,73,2.22,80,2.668,122,1.947,395,2.631,396,2.019,397,1.953,415,1.65,509,2.033,545,1.081,559,2.847,563,1.501,565,3.265,614,5.871,759,4.284,909,2.486,910,2.812,912,2.486,913,2.812,941,4.94,1048,5.01,1051,5.332,1082,4.587,1134,2.812,1136,2.631,1139,2.812,1140,2.631,1244,2.631,1248,5.976,1249,5.976,1510,5.093,1529,5.302,1531,3.055,1532,2.812,1867,4.6,1868,4.6,1875,4.6,1876,4.6,1878,4.6,1885,5.576,1890,3.055,1891,3.055,1898,4.234,1899,5.302,1906,3.055,1908,4.6,1911,3.055,1915,3.055,2332,4.096,2535,5.139,2540,2.631,2559,3.961,2560,3.424,2561,5.156,2562,5.156,2563,3.424,2564,3.424,2565,3.424,2566,3.424,2567,5.156,2568,3.424,2569,5.156,2570,5.156,2571,3.424,2572,3.055,2573,3.424,2574,7.779,2575,5.156,2576,7.402,2577,3.424,2578,3.424,2579,6.201,2580,3.424,2581,3.424,2582,5.156,2583,5.156,2584,3.424,2585,5.156,2586,5.156,2587,3.424,2588,3.424,2589,3.424,2590,3.424]],["title/modules/NotificationModule.html",[242,1.254,267,3.467]],["body/modules/NotificationModule.html",[3,0.038,4,0.045,5,0.031,22,0.006,38,0.121,39,0.534,47,0.045,48,0.262,52,0.365,53,3.489,65,0.004,66,0.004,69,2.784,133,3.967,242,2.109,244,2.126,245,2.213,246,2.308,247,2.308,248,2.308,249,3.371,267,7.118,271,5.017,272,3.023,273,2.308,274,2.308,276,3.306,467,3.967,475,3.47,481,3.798,2533,6.589,2535,5.995,2540,4.224,2546,6.595,2559,6.973,2591,4.906,2592,5.498,2593,5.498,2594,4.906,2595,5.498,2596,5.498,2597,5.498,2598,5.498]],["title/classes/NotificationPagerDto.html",[48,0.228,1253,3.467]],["body/classes/NotificationPagerDto.html",[3,0.042,4,0.063,5,0.035,22,0.006,38,0.122,47,0.072,48,0.371,52,0.517,65,0.005,66,0.005,134,1.241,162,1.842,325,2.417,563,2.715,565,3.262,589,1.826,590,1.708,591,2.109,592,1.766,841,2.394,842,2.217,844,2.442,941,3.533,1051,4.091,1082,4.583,1083,3.323,1090,4.496,1241,4.758,1242,5.525,1243,5.525,1244,4.758,1245,5.525,1246,5.525,1247,5.525,1248,4.758,1249,4.758,1250,5.525,1251,5.086,1252,5.525,1253,5.642,1254,6.935]],["title/injectables/NotificationService.html",[0,0.464,2535,3.155]],["body/injectables/NotificationService.html",[0,0.485,2,0.807,3,0.022,4,0.055,5,0.018,7,0.392,8,1.289,10,1.172,12,0.88,19,0.983,21,1.012,22,0.006,23,0.779,24,0.82,25,0.868,28,1.172,38,0.096,39,0.318,42,1.87,47,0.027,48,0.156,50,1.395,52,0.579,62,1.258,65,0.004,66,0.003,73,2.174,80,1.267,86,3.354,93,2.058,122,2.051,195,3.561,196,2.648,199,2.035,237,1.759,325,2.135,386,2.05,415,2.404,513,3.621,542,2.079,545,1.906,561,4.097,562,2.002,563,1.437,565,3.705,567,2.345,570,2.29,657,2.941,741,2.345,867,2.59,876,3.164,883,3.047,901,3.446,905,2.91,906,2.985,915,2.941,917,2.264,921,4.64,927,2.677,928,2.187,930,2.38,939,2.518,941,4.537,1051,5.901,1082,3.98,1142,3.621,1144,1.71,1155,2.677,1161,2.38,1225,4.662,1235,3.164,1241,5.186,1244,4.64,1248,6.11,1249,6.11,1253,4.9,1314,2.264,1383,2.264,1497,3.833,1844,2.518,2077,5.388,2535,3.295,2539,2.692,2572,4.451,2599,3.278,2600,4.988,2601,3.278,2602,3.278,2603,4.988,2604,3.278,2605,3.278,2606,3.278,2607,4.451,2608,3.278,2609,3.278,2610,3.278,2611,3.278,2612,3.278,2613,3.278,2614,3.278,2615,3.278,2616,3.278,2617,4.988,2618,3.278,2619,3.278,2620,3.278,2621,3.278,2622,3.278,2623,3.278,2624,4.988,2625,4.988,2626,3.278,2627,3.278,2628,3.278,2629,3.278]],["title/classes/PagerDto.html",[48,0.228,1355,3.155]],["body/classes/PagerDto.html",[3,0.043,4,0.051,5,0.035,22,0.006,25,1.006,38,0.113,47,0.069,48,0.299,52,0.52,65,0.005,66,0.005,134,1.254,162,1.697,229,2.874,325,1.592,534,3.691,589,1.845,590,1.727,591,2.123,592,1.785,594,3.359,741,2.943,800,2.628,841,2.42,915,3.691,996,3.97,1076,4.464,1141,3.265,1143,3.97,1144,3.265,1355,5.169,2069,4.545,2345,3.823,2346,4.324,2630,6.26,2631,7.825,2632,6.26,2633,6.26,2634,6.26,2635,6.26,2636,6.26,2637,6.26,2638,6.26,2639,7.979]],["title/injectables/ParseIntPipe.html",[0,0.464,2640,4.261]],["body/injectables/ParseIntPipe.html",[0,0.771,2,1.576,3,0.044,4,0.052,5,0.036,7,0.766,12,1.4,19,0.866,21,0.959,22,0.006,23,0.739,24,0.66,25,0.822,28,1.111,34,3.163,35,1.736,38,0.085,39,0.622,47,0.052,48,0.305,49,2.334,52,0.425,62,0.959,65,0.005,66,0.005,196,3.478,199,2.089,535,3.247,1364,5.255,2069,4.646,2639,7.078,2640,7.078,2641,7.932,2642,6.399,2643,7.932,2644,7.932,2645,7.692,2646,9.012,2647,6.399,2648,7.932,2649,6.399,2650,6.399,2651,6.399,2652,6.399,2653,6.399]],["title/classes/PasswordUpdateDto.html",[48,0.228,87,3.467]],["body/classes/PasswordUpdateDto.html",[3,0.042,4,0.05,5,0.034,22,0.006,38,0.103,47,0.069,48,0.368,52,0.513,62,0.918,65,0.005,66,0.005,75,3.288,87,5.605,134,1.228,162,1.833,198,3.402,545,1.934,589,1.806,590,1.69,591,2.095,592,1.747,798,5.361,800,2.572,2654,5.467,2655,6.34,2656,7.175,2657,6.34,2658,6.888,2659,6.888,2660,6.888,2661,5.467,2662,5.467,2663,5.467,2664,5.467,2665,5.032,2666,5.467,2667,5.467,2668,5.467,2669,4.707]],["title/guards/PolicyGuard.html",[2306,3.467,2670,4.261]],["body/guards/PolicyGuard.html",[0,0.631,1,5.873,3,0.032,4,0.038,5,0.026,7,0.564,10,1.442,12,1.145,15,1.145,18,5.503,19,0.879,21,0.973,22,0.006,23,0.749,24,0.669,25,0.834,28,0.818,35,1.278,38,0.12,39,0.458,40,2.457,42,2.688,47,0.038,48,0.225,49,1.719,50,1.089,52,0.591,57,3.484,62,1.113,65,0.004,66,0.004,73,1.829,83,2.085,84,3.128,122,1.179,189,2.778,190,2.605,203,4.288,229,2.163,535,2.391,545,2.65,554,2.778,565,1.978,795,4.204,867,3.185,905,3.857,906,3.209,930,5.392,1025,5.81,1791,3.62,1796,5.076,1799,2.878,1818,4.484,1822,3.421,2004,6.573,2007,5.792,2011,5.331,2015,3.87,2161,3.62,2306,5.392,2671,4.711,2672,4.711,2673,4.711,2674,4.711,2675,4.711,2676,4.711,2677,4.711,2678,4.711,2679,4.204,2680,4.711,2681,4.711,2682,3.87,2683,3.87,2684,4.711,2685,3.87,2686,5.331,2687,3.87]],["title/classes/PrismaClientExceptionFilter.html",[48,0.228,289,3.669]],["body/classes/PrismaClientExceptionFilter.html",[3,0.022,4,0.026,5,0.018,7,0.39,8,1.282,10,1.627,12,0.875,15,0.875,19,0.98,21,1.008,22,0.006,23,0.776,24,0.786,25,0.864,28,1.168,33,2.76,34,1.609,35,1.631,38,0.08,39,0.316,40,1.698,47,0.055,48,0.155,52,0.447,62,1.226,63,2.898,65,0.003,66,0.003,134,0.652,162,0.706,167,2.248,172,3.602,173,5.646,174,5.759,176,5.001,178,4.365,179,2.363,193,1.31,196,1.427,197,5.562,198,2.707,199,1.849,241,2.673,280,4.075,284,4.938,289,5.562,291,5.904,335,2.363,337,1.988,340,4.938,341,2.673,342,1.609,417,4.13,419,1.919,515,1.53,534,3.965,563,1.427,598,1.988,657,1.919,724,3.718,836,4.075,867,2.579,1018,4.265,1284,7.633,1285,6.265,1288,4.075,1289,6,1290,4.427,1291,2.904,1292,2.673,1293,4.938,1294,4.427,1295,4.427,1296,7.297,1297,4.427,1298,2.904,1299,6.459,1300,5.365,1301,4.427,1302,6,1303,4.427,1304,4.427,1305,4.427,1306,4.427,1307,5.365,1308,4.427,1309,4.427,1310,4.427,1311,4.427,1312,5.365,1313,2.904,1314,2.248,1315,2.904,1316,2.904,1317,2.904,1318,2.904,1319,2.904,1320,2.904,1321,4.427,1322,2.904,1323,2.904,1324,5.365,1325,2.904,1326,2.904,1327,2.904,1328,2.904,1329,4.427,1330,2.501,1331,4.427,1332,2.904,1333,2.904,1334,4.427,1335,4.427,1336,2.904,1337,2.904,1338,2.904,1339,2.904,1340,2.904,2688,4.961,2689,3.255,2690,3.255,2691,3.255,2692,3.255,2693,3.255,2694,3.255,2695,3.255]],["title/classes/RedisIoAdapter.html",[48,0.228,2696,4.261]],["body/classes/RedisIoAdapter.html",[3,0.039,4,0.046,5,0.032,7,0.676,12,1.293,15,0.996,19,0.992,21,1.098,22,0.006,23,0.846,24,0.755,25,0.942,28,0.98,38,0.114,39,0.549,47,0.06,48,0.269,50,1.305,52,0.572,62,0.846,65,0.004,66,0.004,134,1.132,141,5.319,156,3.581,162,1.589,196,3.567,208,5.076,403,4.099,515,2.655,627,4.637,657,3.329,671,6.538,677,4.637,835,3.329,2144,4.637,2696,6.538,2697,5.646,2698,8.134,2699,7.327,2700,5.646,2701,8.608,2702,5.646,2703,7.327,2704,7.327,2705,5.646,2706,4.338,2707,4.637,2708,5.646,2709,5.646,2710,5.038,2711,5.038,2712,5.646,2713,5.646,2714,5.038,2715,6.538,2716,5.646,2717,5.646,2718,5.646,2719,5.646,2720,5.038,2721,5.646]],["title/modules/RedisModule.html",[242,1.254,268,3.467]],["body/modules/RedisModule.html",[3,0.036,4,0.043,5,0.029,22,0.006,35,1.421,38,0.123,39,0.509,47,0.043,48,0.25,52,0.463,53,3.433,62,0.785,65,0.004,66,0.004,133,3.905,242,2.059,244,2.024,245,2.108,246,2.198,247,2.198,248,2.198,249,3.29,268,6.822,272,2.927,273,2.198,274,2.198,276,3.201,278,4.816,279,3.087,285,4.3,286,2.895,325,1.332,335,3.801,337,4.258,342,3.447,467,3.905,474,4.258,475,3.36,476,5.795,505,3.278,523,2.895,529,2.657,621,4.023,624,6.023,625,5.727,2707,5.727,2722,4.672,2723,4.672,2724,5.236,2725,6.878,2726,5.236,2727,5.236,2728,4.023,2729,4.672,2730,4.672,2731,5.236,2732,5.236,2733,5.236,2734,5.236]],["title/injectables/RedisPubSubService.html",[0,0.464,2725,3.669]],["body/injectables/RedisPubSubService.html",[0,0.664,2,1.252,3,0.035,4,0.041,5,0.028,7,0.609,10,0.987,12,1.207,15,0.897,19,1.119,21,1.238,22,0.006,23,0.954,24,0.852,25,1.062,28,1.341,30,3.884,38,0.103,39,0.494,47,0.041,48,0.243,50,1.175,62,1.158,65,0.004,66,0.004,73,2.3,93,2.356,199,2.264,342,2.514,367,4.19,386,3.789,419,4.032,505,2.391,614,5.336,2707,4.177,2725,5.254,2728,6.82,2729,4.538,2730,4.538,2735,5.086,2736,6.101,2737,6.101,2738,6.101,2739,5.086,2740,5.086,2741,6.101,2742,5.086,2743,6.101,2744,8.227,2745,5.086,2746,6.101,2747,5.086,2748,5.086,2749,5.086,2750,5.086,2751,5.086]],["title/classes/RedisSubPub.html",[48,0.228,2728,3.669]],["body/classes/RedisSubPub.html",[3,0.026,4,0.031,5,0.021,7,0.457,8,1.444,10,1.413,11,2.047,12,0.986,15,0.986,19,1.161,21,1.091,22,0.006,23,0.84,24,0.862,25,0.935,28,1.263,30,3.931,33,1.751,34,1.886,35,1.516,38,0.088,39,0.371,47,0.031,48,0.182,52,0.581,65,0.003,66,0.003,73,2.154,134,0.764,173,2.52,198,2.249,199,2.209,367,4.268,386,3.436,419,3.294,505,3.642,529,3.355,614,5.922,624,6.218,627,3.133,629,3.404,774,4.292,2710,3.404,2711,3.404,2714,6.911,2715,6.911,2728,4.292,2736,4.985,2737,4.985,2738,4.985,2741,4.985,2743,4.985,2744,7.221,2746,4.985,2752,8.747,2753,3.815,2754,5.587,2755,7.277,2756,3.815,2757,6.61,2758,5.587,2759,5.587,2760,3.815,2761,3.815,2762,3.815,2763,3.815,2764,3.815,2765,3.815,2766,3.815,2767,7.745,2768,3.815,2769,3.815,2770,3.815,2771,5.587,2772,3.815,2773,3.815,2774,3.815,2775,3.815,2776,6.61,2777,3.815,2778,3.815,2779,3.815,2780,5.587,2781,3.815,2782,8.093,2783,3.815,2784,3.815,2785,3.815,2786,3.815,2787,3.815,2788,3.815,2789,3.815,2790,3.815,2791,3.815]],["title/classes/RegisterDto.html",[48,0.228,356,3.467]],["body/classes/RegisterDto.html",[3,0.045,4,0.053,5,0.037,22,0.006,24,0.678,38,0.107,47,0.074,48,0.385,52,0.536,65,0.005,66,0.005,75,3.532,134,1.319,162,1.893,349,5.057,356,5.86,376,4.348,532,3.532,589,1.94,590,2.226,591,1.786,592,1.876,594,3.532,2110,5.872,2111,5.872,2112,5.872,2113,7.202,2114,5.872,2115,5.872,2116,5.872,2117,5.872,2118,5.872,2119,7.202]],["title/classes/ResOp.html",[48,0.228,191,3.029]],["body/classes/ResOp.html",[3,0.035,4,0.041,5,0.028,7,0.61,8,1.77,15,1.208,19,1.168,21,0.764,22,0.006,23,0.588,24,0.963,25,0.994,33,4.078,38,0.091,47,0.056,48,0.243,65,0.004,66,0.004,80,3.197,102,2.456,134,1.021,191,4.343,193,2.052,196,3.783,198,3.576,199,2.091,227,4.633,228,5.425,325,1.967,386,3.73,653,5.615,1591,5.269,1775,6.791,1776,4.548,1777,7.697,1778,7.378,1779,7.378,1780,4.548,1781,6.11,1782,4.548,1783,4.548,1784,4.548,1785,4.548,2792,5.097,2793,6.848,2794,8.269,2795,5.097,2796,5.097,2797,5.097]],["title/classes/ResetPasswordDto.html",[48,0.228,2798,3.922]],["body/classes/ResetPasswordDto.html",[3,0.045,4,0.054,5,0.037,22,0.006,38,0.121,47,0.066,48,0.386,65,0.005,66,0.005,75,4.339,95,4.792,108,5.421,134,1.323,162,1.896,325,2.223,589,2.384,590,1.821,591,2.194,592,1.882,798,5.128,806,3.892,844,2.603,1053,3.892,1159,4.031,1160,4.186,2656,6.716,2798,6.641,2799,5.889,2800,5.889,2801,5.889]],["title/classes/SendEmailCodeDto.html",[48,0.228,803,3.299]],["body/classes/SendEmailCodeDto.html",[3,0.043,4,0.051,5,0.035,22,0.006,38,0.104,47,0.073,48,0.427,65,0.005,66,0.005,134,1.261,162,2,198,3.444,227,3.283,532,4.213,589,1.855,590,1.736,591,2.13,592,1.794,721,4.348,746,4.348,747,4.348,796,4.569,797,4.836,798,5.847,799,4.836,800,3.296,801,4.836,802,4.836,803,5.423,804,6.032,805,4.569,806,3.711,807,4.836,808,4.836]],["title/classes/SendSmsCodeDto.html",[48,0.228,805,3.467]],["body/classes/SendSmsCodeDto.html",[3,0.043,4,0.051,5,0.035,22,0.006,38,0.104,47,0.073,48,0.427,65,0.005,66,0.005,134,1.254,162,1.996,198,3.436,227,3.265,532,3.359,589,1.845,590,1.727,591,2.123,592,1.785,721,4.324,746,4.324,747,4.324,796,4.545,797,4.809,798,5.838,799,4.809,800,3.284,801,4.809,802,4.809,803,4.324,804,4.809,805,5.681,806,4.614,807,6.012,808,6.012]],["title/classes/Snowflake.html",[48,0.228,2441,3.922]],["body/classes/Snowflake.html",[3,0.026,4,0.031,5,0.022,7,0.46,8,1.453,10,1.936,12,0.992,15,0.679,19,1.29,21,0.842,22,0.006,23,0.649,25,0.722,28,0.668,33,4.192,34,4.513,35,1.044,38,0.051,47,0.031,48,0.183,50,2.256,52,0.441,62,0.577,65,0.003,66,0.003,134,0.771,199,0.932,367,2.521,762,4.319,2069,2.793,2441,6,2802,3.847,2803,8.382,2804,9.764,2805,6.642,2806,5.621,2807,6.642,2808,6.642,2809,5.621,2810,5.621,2811,6.642,2812,5.621,2813,6.642,2814,5.621,2815,8.116,2816,6.642,2817,5.621,2818,6.642,2819,5.621,2820,6.642,2821,3.847,2822,5.621,2823,3.847,2824,7.305,2825,3.847,2826,6.642,2827,5.621,2828,3.847,2829,5.621,2830,3.847,2831,7.771,2832,3.847,2833,3.847,2834,3.847,2835,3.847,2836,3.847,2837,5.621,2838,3.847,2839,3.847,2840,3.847,2841,3.847,2842,3.847,2843,3.847,2844,3.847,2845,3.847,2846,3.847,2847,3.847,2848,3.847,2849,3.847,2850,3.847,2851,3.847,2852,3.847,2853,3.847,2854,3.847,2855,3.847,2856,3.847,2857,3.847,2858,3.847]],["title/modules/SocketModule.html",[242,1.254,269,3.467]],["body/modules/SocketModule.html",[3,0.04,4,0.048,5,0.033,22,0.006,38,0.12,39,0.572,47,0.048,48,0.281,52,0.392,53,3.45,65,0.005,66,0.005,133,4.215,242,2.18,244,2.278,245,2.372,246,2.473,247,2.473,248,2.473,249,3.484,252,6.386,269,7.032,271,5.111,272,3.161,273,2.473,274,2.473,276,3.457,301,5.257,467,4.215,474,4.599,475,3.629,2859,5.892,2860,5.892,2861,5.892,2862,5.892,2863,5.892,2864,5.892,2865,5.892]],["title/classes/SubCommentPagerDto.html",[48,0.228,1011,3.155]],["body/classes/SubCommentPagerDto.html",[3,0.041,4,0.049,5,0.034,22,0.006,38,0.123,47,0.074,48,0.399,52,0.506,65,0.005,66,0.005,134,1.202,162,1.91,325,1.526,589,1.769,590,1.655,591,2.067,592,1.71,841,2.319,842,2.147,844,2.366,854,3.582,956,2.691,997,3.963,1011,5.032,1015,3.963,1074,4.927,1075,4.927,1076,5.185,1077,4.927,1078,4.144,1079,4.609,1080,4.927,1081,4.927,1082,3.537,1083,3.219,1084,4.144,1085,4.927,1086,5.032,1087,6.257,1088,4.927,1089,4.927,1090,4.355,1091,6.257,1092,5.853]],["title/interfaces/TA.html",[193,1.922,2866,3.922]],["body/interfaces/TA.html",[0,0.466,1,3.864,3,0.021,4,0.025,5,0.017,7,0.373,8,1.24,10,1.566,11,3.139,14,3.234,15,0.549,17,3.939,18,3.71,22,0.006,24,0.731,26,2.557,35,1.926,38,0.122,39,0.303,40,1.624,47,0.025,48,0.149,49,1.136,50,1.64,52,0.594,53,1.892,54,2.557,56,1.776,57,2.574,59,2.557,62,1.288,63,1.501,65,0.003,66,0.003,71,1.501,73,0.767,83,1,93,1.463,111,3.337,122,1.644,154,2.392,180,1.539,181,1.624,183,1.464,184,1.501,185,1.501,188,3.168,189,2.828,190,2.652,193,1.253,199,0.755,201,2.574,223,4.688,229,1.43,345,2.557,350,4.247,367,3.183,393,1.836,417,1.776,428,2.151,446,2.261,535,3.335,542,4.953,545,2.24,554,1.836,565,1.307,653,3.482,867,1.336,905,2.311,906,2.371,919,2.261,928,2.565,930,3.482,947,4.719,950,1.624,954,2.652,964,1.776,971,1.776,1258,2.557,1259,2.557,1314,2.151,1360,4.539,1815,2.261,2017,3.939,2161,2.392,2682,2.557,2683,2.557,2685,2.557,2686,3.939,2687,2.557,2706,2.392,2866,3.939,2867,2.557,2868,2.778,2869,2.778,2870,4.28,2871,2.778,2872,4.28,2873,2.778,2874,4.28,2875,6.157,2876,2.778,2877,2.778,2878,2.778,2879,4.28,2880,2.778,2881,2.778,2882,2.557,2883,2.778,2884,3.939,2885,2.778,2886,3.939,2887,2.778,2888,2.778,2889,4.804,2890,2.778,2891,4.28,2892,5.22,2893,4.28,2894,2.778,2895,6.332,2896,2.778,2897,2.778,2898,2.778,2899,2.778,2900,2.778,2901,4.28,2902,2.778,2903,2.778,2904,4.28,2905,2.778,2906,2.778,2907,2.778,2908,2.778,2909,2.778,2910,2.557,2911,2.778,2912,5.397,2913,2.778,2914,2.778,2915,2.778,2916,2.778,2917,2.778,2918,2.778,2919,2.778,2920,2.778,2921,5.22,2922,2.778,2923,2.778,2924,2.778,2925,2.778,2926,2.778,2927,2.778,2928,2.778,2929,2.778,2930,2.778,2931,2.778,2932,2.778,2933,5.22,2934,2.778,2935,3.939]],["title/modules/TRPCModule.html",[242,1.254,270,3.467]],["body/modules/TRPCModule.html",[3,0.044,4,0.052,5,0.036,22,0.006,38,0.115,39,0.622,40,3.337,47,0.052,48,0.305,53,3.4,65,0.005,66,0.005,242,2.264,244,2.474,245,2.576,246,2.686,247,2.686,248,2.686,249,3.619,270,6.948,272,3.33,273,2.686,274,2.686,276,2.938,474,4.845,794,7.078,950,5.17,2936,5.709,2937,5.709,2938,5.709,2939,6.399,2940,6.399]],["title/injectables/TRPCService.html",[0,0.464,950,2.491]],["body/injectables/TRPCService.html",[0,0.417,1,4.89,2,0.665,3,0.018,4,0.022,5,0.015,7,0.323,8,1.108,10,1.681,11,3.789,12,0.757,14,3.903,15,0.757,16,2.408,17,4.992,18,4.694,19,1.158,21,0.643,22,0.006,23,0.495,24,0.816,25,0.551,26,3.522,28,0.926,30,2.016,35,1.799,38,0.119,39,0.262,40,1.407,47,0.022,48,0.129,49,0.984,50,1.532,52,0.576,53,1.691,54,2.216,56,1.539,57,2.301,59,2.216,62,1.24,63,1.3,65,0.003,66,0.003,71,1.3,73,0.665,83,0.867,93,1.308,111,4.222,122,1.521,140,3.113,154,2.073,180,1.334,181,1.407,183,1.269,184,1.3,185,1.3,188,2.832,189,2.528,190,2.371,193,1.086,199,0.654,201,2.301,223,4.381,229,1.239,345,2.216,350,3.873,367,2.974,417,1.539,428,1.864,446,1.959,535,3.084,542,4.694,545,2.093,554,1.591,565,1.133,653,4.412,867,2.288,905,2.929,906,2.12,919,1.959,928,2.34,930,3.113,947,4.027,950,2.236,954,3.36,964,3.043,971,1.539,1258,2.216,1259,2.216,1314,1.864,1360,4.198,1815,1.959,2017,3.522,2161,2.073,2682,2.216,2683,2.216,2685,2.216,2686,3.522,2687,2.216,2706,2.073,2866,2.216,2867,2.216,2868,2.408,2869,2.408,2870,5.423,2871,2.408,2872,3.826,2873,2.408,2874,3.826,2875,6.308,2876,2.408,2877,2.408,2878,2.408,2879,3.826,2880,2.408,2881,2.408,2882,2.216,2883,2.408,2884,3.522,2885,2.408,2886,3.522,2887,2.408,2888,2.408,2889,4.382,2890,2.408,2891,3.826,2892,4.76,2893,3.826,2894,2.408,2895,5.917,2896,2.408,2897,2.408,2898,2.408,2899,2.408,2900,2.408,2901,3.826,2902,2.408,2903,2.408,2904,3.826,2905,2.408,2906,4.76,2907,4.76,2908,4.76,2909,2.408,2910,4.382,2911,2.408,2912,5.798,2913,5.423,2914,2.408,2915,2.408,2916,2.408,2917,2.408,2918,2.408,2919,2.408,2920,2.408,2921,4.76,2922,3.826,2923,2.408,2924,2.408,2925,2.408,2926,2.408,2927,2.408,2928,2.408,2929,2.408,2930,2.408,2931,2.408,2932,2.408,2933,4.76,2934,2.408,2935,3.522,2941,4.288,2942,2.698,2943,2.698,2944,2.698,2945,2.698,2946,2.698,2947,2.698,2948,2.698,2949,2.698,2950,2.698,2951,2.698,2952,2.698,2953,2.698,2954,2.698,2955,2.698,2956,2.698,2957,2.698,2958,2.698,2959,2.698,2960,2.698]],["title/injectables/TimeoutInterceptor.html",[0,0.464,294,3.922]],["body/injectables/TimeoutInterceptor.html",[0,0.728,2,1.44,3,0.04,4,0.047,5,0.033,7,0.7,12,1.322,15,1.032,19,1.015,21,1.123,22,0.006,23,0.865,24,0.772,25,0.963,28,1.015,38,0.11,39,0.568,47,0.047,48,0.279,49,2.133,50,1.351,62,1.24,65,0.005,66,0.005,196,3.627,212,4.802,235,3.862,294,6.155,411,5.051,835,3.448,1790,5.758,1795,5.441,1796,5.532,1797,6.332,1799,3.571,1800,5.441,1805,4.802,1807,4.039,1839,4.492,2101,6.793,2720,5.217,2961,5.847,2962,5.847,2963,5.847,2964,7.494,2965,5.847,2966,7.494,2967,7.494,2968,5.847,2969,5.847,2970,5.217,2971,5.847,2972,5.847,2973,5.847,2974,5.847]],["title/injectables/TodoAbility.html",[0,0.464,2975,3.669]],["body/injectables/TodoAbility.html",[0,0.72,2,1.415,3,0.039,4,0.047,5,0.032,7,0.688,12,1.307,19,0.778,21,0.861,22,0.006,23,0.663,24,0.592,25,0.738,28,0.997,35,1.559,38,0.122,39,0.558,43,4.699,47,0.047,48,0.274,49,2.096,52,0.382,62,0.861,65,0.005,66,0.005,79,4.054,83,1.845,382,5.118,509,3.235,511,3.795,549,5.118,550,5.118,552,3.795,554,3.387,556,3.795,562,5.478,565,2.411,812,4.171,813,4.171,814,4.171,815,2.996,816,4.171,817,4.171,819,5.379,820,4.171,821,4.414,822,4.414,823,4.414,825,4.414,826,3.953,827,4.414,991,4.171,992,4.414,2975,5.693,2976,5.745,2977,5.745,2978,5.745]],["title/controllers/TodoController.html",[67,1.81,2979,3.922]],["body/controllers/TodoController.html",[3,0.025,4,0.029,5,0.02,7,0.431,12,0.945,19,1.073,21,1.188,22,0.006,23,0.915,24,0.817,25,1.019,28,1.376,38,0.116,39,0.35,47,0.029,48,0.172,50,0.832,52,0.239,57,4.058,62,0.802,65,0.003,66,0.003,67,1.365,69,1.392,71,1.735,73,2.324,79,4.259,80,3.064,83,2.767,86,3.902,93,1.633,98,3.156,99,2.766,100,2.283,101,1.878,102,1.735,105,4.888,107,2.487,122,1.771,220,3.838,360,3.536,545,2.017,562,5.434,565,3.735,567,2.517,569,2.873,570,3.472,586,4.487,595,1.878,724,1.991,815,1.878,826,3.08,833,2.487,835,2.123,871,3.698,883,2.199,955,4.706,956,1.615,967,3.156,974,2.378,978,2.614,981,2.283,1003,2.766,1010,2.766,1018,2.283,1024,2.614,1025,5.754,1026,2.766,1037,2.766,1045,2.766,1046,2.614,1711,3.269,1712,2.957,1717,2.487,1723,2.957,2292,3.212,2294,3.212,2296,3.212,2297,3.212,2300,3.212,2302,2.957,2304,3.212,2306,2.614,2307,2.957,2310,2.957,2312,4.221,2313,3.698,2314,3.212,2315,2.957,2316,3.212,2317,2.957,2318,2.957,2319,3.212,2320,2.957,2321,2.957,2322,2.957,2323,2.957,2324,2.957,2979,4.397,2980,3.6,2981,3.6,2982,3.6,2983,4.888,2984,3.6,2985,3.6,2986,3.6,2987,4.674,2988,3.6,2989,4.888,2990,3.6,2991,2.957,2992,2.957,2993,3.6]],["title/classes/TodoDto.html",[48,0.228,2983,3.299]],["body/classes/TodoDto.html",[3,0.044,4,0.052,5,0.036,22,0.006,34,3.19,38,0.12,47,0.073,48,0.413,52,0.429,65,0.005,66,0.005,134,1.293,162,1.96,195,3.805,325,2.028,589,1.902,590,1.78,591,2.164,592,1.84,841,2.495,842,2.31,844,2.545,850,3.034,1141,3.365,1155,3.463,2466,4.457,2467,4.457,2983,5.508,2987,4.262,2989,4.457,2994,5.3,2995,6.549,2996,5.3,2997,4.958,2998,5.3,2999,5.3,3000,5.3]],["title/modules/TodoModule.html",[242,1.254,333,3.467]],["body/modules/TodoModule.html",[3,0.04,4,0.047,5,0.032,22,0.006,38,0.119,39,0.562,47,0.047,48,0.276,52,0.385,53,3.546,65,0.005,66,0.005,69,2.878,133,4.032,242,2.162,244,2.238,245,2.33,246,2.43,247,2.43,248,2.43,249,3.455,272,3.125,273,2.43,274,2.43,333,7.099,467,4.032,475,3.588,2312,6.079,2975,7.07,2979,6.76,2992,4.754,3001,5.165,3002,5.165,3003,5.788,3004,6.681,3005,5.788,3006,5.788,3007,5.788,3008,5.788]],["title/classes/TodoPagerDto.html",[48,0.228,2987,3.155]],["body/classes/TodoPagerDto.html",[3,0.043,4,0.051,5,0.035,22,0.006,34,3.128,38,0.119,47,0.073,48,0.409,52,0.421,65,0.005,66,0.005,134,1.268,162,1.947,195,3.732,325,2.003,589,1.866,590,1.746,591,2.138,592,1.804,841,2.447,842,2.265,844,2.496,850,3.704,1141,4.109,1155,4.228,2466,5.442,2467,5.442,2983,4.372,2987,5.204,2989,4.372,2994,5.198,2995,5.198,2996,5.198,2997,4.862,2998,5.198,2999,5.198,3000,6.47]],["title/injectables/TodoService.html",[0,0.464,2312,3.155]],["body/injectables/TodoService.html",[0,0.556,2,0.972,3,0.027,4,0.032,5,0.022,7,0.472,8,1.48,10,1.308,12,1.01,19,1.144,21,1.227,22,0.006,23,0.945,24,0.871,25,1.053,28,1.422,38,0.09,39,0.383,47,0.032,48,0.188,52,0.448,62,1.227,65,0.004,66,0.004,73,2.354,80,1.525,86,3.591,93,2.497,122,1.433,199,2.345,325,1.003,386,3.038,509,3.653,515,1.855,545,2.667,567,2.692,569,3.073,570,2.629,595,2.986,741,2.692,867,2.891,871,3.955,876,4.274,883,3.497,887,4.399,891,4.399,903,4.399,905,3.248,906,3.331,927,3.968,928,2.511,996,3.631,1711,3.497,1738,4.702,2312,3.782,2406,3.24,2477,3.52,2482,3.24,2483,3.24,2983,5.107,2987,4.884,2989,5.107,2991,3.24,3009,3.945,3010,3.945,3011,3.945,3012,3.945,3013,3.945,3014,3.945,3015,3.945,3016,3.945,3017,3.945,3018,3.945,3019,3.945,3020,3.945,3021,3.945,3022,3.945]],["title/injectables/TodoTrpcRouter.html",[0,0.464,3004,3.467]],["body/injectables/TodoTrpcRouter.html",[0,0.535,2,0.921,3,0.026,4,0.03,5,0.021,7,0.448,8,1.423,10,1.655,12,0.972,14,4.443,15,0.972,19,0.976,21,0.561,22,0.006,23,0.432,24,0.568,25,0.481,28,0.956,30,1.759,38,0.118,39,0.363,47,0.03,48,0.178,49,1.364,50,1.272,52,0.596,57,4.313,62,1.245,65,0.003,66,0.003,83,2.099,201,3.507,386,2.263,545,2.275,562,4.908,565,3.488,567,1.759,569,2.007,570,1.717,586,2.372,591,1.015,592,1.066,595,1.951,800,1.57,815,1.951,826,3.149,928,3.524,947,3.728,948,4.403,949,2.284,950,4.192,954,3.044,955,2.007,956,1.678,957,3.363,958,2.284,959,2.284,960,2.284,961,2.284,962,2.284,963,2.284,964,4.74,965,2.284,967,2.206,969,3.363,970,5.545,971,5.048,974,2.471,975,4.762,978,2.716,980,3.638,981,3.492,1711,2.284,1717,2.584,1773,3.072,2312,5.489,2313,3.804,2317,3.072,2322,3.072,2323,3.072,2324,3.072,2496,2.874,2987,2.471,2991,3.072,2992,3.072,2997,2.874,3004,3.998,3023,3.74,3024,5.507,3025,3.74,3026,3.74,3027,3.74,3028,3.74,3029,3.74,3030,3.74,3031,3.74,3032,3.74]],["title/classes/TodoUpdateDto.html",[48,0.228,2989,3.299]],["body/classes/TodoUpdateDto.html",[3,0.044,4,0.052,5,0.036,22,0.006,34,3.19,38,0.12,47,0.073,48,0.413,52,0.429,65,0.005,66,0.005,134,1.293,162,1.96,195,3.805,325,2.028,589,1.902,590,1.78,591,2.164,592,1.84,841,2.495,842,2.31,844,2.545,850,3.034,1141,3.365,1155,3.463,2466,4.457,2467,4.457,2983,4.457,2987,4.262,2989,5.508,2994,5.3,2995,5.3,2996,5.3,2997,4.958,2998,5.3,2999,6.549,3000,5.3]],["title/injectables/TokenService.html",[0,0.464,401,2.917]],["body/injectables/TokenService.html",[0,0.547,2,0.949,3,0.026,4,0.031,5,0.022,7,0.461,10,1.093,12,0.993,15,0.993,19,1.1,21,1.166,22,0.006,23,0.898,24,0.802,25,1,28,1.35,35,1.527,38,0.111,39,0.374,47,0.031,48,0.184,50,1.3,52,0.583,56,2.198,62,1.289,63,1.857,65,0.003,66,0.003,73,2.307,79,3.614,93,2.028,122,1.946,143,6.089,150,2.545,182,2.797,183,1.812,184,1.857,185,1.857,199,2.16,229,3.357,380,2.96,384,4.637,401,3.437,417,2.198,419,2.272,504,2.444,505,4.043,509,3.067,512,6.524,515,1.812,522,3.318,523,2.13,529,1.955,535,1.955,542,4.216,641,3.438,657,4.311,673,2.662,674,2.797,675,2.198,676,2.198,788,3.438,1591,2.353,1697,3.165,1754,3.165,2011,3.165,2023,3.438,2034,3.165,2665,5.46,3033,3.853,3034,5.628,3035,5.628,3036,5.628,3037,7.311,3038,5.628,3039,3.853,3040,5.628,3041,3.853,3042,5.628,3043,3.853,3044,5.628,3045,3.853,3046,3.853,3047,5.628,3048,3.853,3049,3.853,3050,3.853,3051,7.311,3052,3.853,3053,3.853,3054,3.853,3055,3.853,3056,3.853,3057,3.853,3058,3.853,3059,3.853,3060,3.853,3061,3.853,3062,3.853,3063,3.853,3064,3.853,3065,6.648,3066,6.648,3067,3.853,3068,3.853,3069,3.853]],["title/injectables/TransformInterceptor.html",[0,0.464,296,3.922]],["body/injectables/TransformInterceptor.html",[0,0.623,2,1.139,3,0.032,4,0.038,5,0.026,7,0.554,10,1.428,12,1.131,15,0.816,18,5.472,19,0.996,21,1.102,22,0.006,23,0.849,24,0.758,25,0.945,28,1.113,35,1.255,38,0.122,39,0.45,40,2.413,47,0.038,48,0.221,49,1.688,50,1.069,52,0.489,62,1.326,65,0.004,66,0.004,191,4.065,220,2.348,296,5.265,325,1.176,364,4.128,365,4.128,386,3.427,411,4.492,428,3.196,446,3.359,598,2.826,711,3.196,835,2.728,1365,5.72,1543,3.555,1790,5.651,1791,3.555,1795,3.359,1796,5.036,1797,5.765,1799,3.915,1800,4.654,1807,3.196,1815,5.34,1818,3.196,1821,4.925,1822,3.359,1823,3.8,1839,3.555,1844,4.925,2015,3.8,2101,6.041,2970,4.128,3070,4.626,3071,6.41,3072,4.626,3073,4.626,3074,6.41,3075,4.626,3076,4.626,3077,4.626,3078,4.626,3079,4.128,3080,6.41,3081,4.626,3082,6.41,3083,4.626,3084,6.41,3085,4.626,3086,4.626,3087,4.626,3088,4.626,3089,4.626,3090,4.626,3091,4.626,3092,4.626,3093,4.626]],["title/classes/UpdateProfileDto.html",[48,0.228,95,3.467]],["body/classes/UpdateProfileDto.html",[3,0.044,4,0.053,5,0.036,22,0.006,38,0.12,47,0.065,48,0.382,65,0.005,66,0.005,75,3.482,95,5.809,108,5.329,134,1.3,162,1.881,325,2.409,589,2.557,590,1.79,591,2.171,592,1.85,798,4.115,806,4.718,844,2.559,1053,4.718,1159,4.887,1160,5.074,2656,6.147,2798,5.329,2799,5.79,2800,5.79,2801,7.139]],["title/injectables/UserAbility.html",[0,0.464,3094,3.669]],["body/injectables/UserAbility.html",[0,0.75,2,1.509,3,0.042,4,0.05,5,0.034,7,0.733,12,1.362,19,0.83,21,0.918,22,0.006,23,0.707,24,0.631,25,0.788,28,1.064,35,1.662,38,0.124,39,0.595,43,4.896,47,0.05,48,0.292,49,2.235,52,0.407,62,0.918,65,0.005,66,0.005,79,4.178,83,2.48,382,4.232,511,4.047,549,5.333,550,5.333,552,4.047,554,3.613,556,4.047,565,2.572,812,4.448,813,4.448,814,4.448,815,3.195,816,4.448,817,4.448,819,5.605,820,4.448,991,4.448,992,4.707,3094,5.931,3095,6.127,3096,6.127,3097,6.127]],["title/controllers/UserController.html",[67,1.81,3098,3.922]],["body/controllers/UserController.html",[3,0.026,4,0.031,5,0.021,7,0.452,10,0.733,12,0.979,15,0.666,19,1.092,21,1.209,22,0.006,23,0.931,24,0.831,25,1.037,28,1.4,38,0.118,39,0.367,47,0.031,48,0.18,50,0.873,57,2.976,62,0.831,65,0.003,66,0.003,67,1.432,69,1.46,71,1.82,73,2.34,75,2.976,80,3.118,83,1.782,86,3.889,93,1.691,98,3.27,99,2.902,100,2.396,101,1.97,102,1.82,103,4.949,104,3.37,109,3.875,122,1.93,220,1.917,360,3.664,545,2.075,565,2.328,567,2.608,569,2.976,570,3.017,724,2.088,815,1.97,883,2.307,955,4.76,956,1.694,967,3.27,998,3.37,1003,2.902,1004,3.37,1010,2.902,1018,2.396,1019,6.404,1025,4.027,1026,2.902,1032,6.196,1037,2.902,1045,2.902,1046,2.742,1377,3.37,1979,3.37,2302,3.102,2306,2.742,2307,3.102,2310,3.102,2313,2.609,2315,3.102,2318,3.102,2320,3.102,2321,3.102,2552,3.37,2669,5.564,3098,4.555,3099,3.777,3100,4.555,3101,5.003,3102,3.777,3103,3.777,3104,3.777,3105,3.777,3106,3.777,3107,5.003,3108,3.777,3109,3.777,3110,3.777,3111,3.777,3112,3.777,3113,5.258,3114,3.777,3115,3.777,3116,3.37,3117,3.37,3118,3.102,3119,3.777,3120,3.777,3121,3.777,3122,3.777,3123,3.777,3124,3.777,3125,3.777,3126,3.777,3127,3.777,3128,3.777,3129,3.777,3130,3.777]],["title/classes/UserDto.html",[48,0.228,3101,3.299]],["body/classes/UserDto.html",[3,0.044,4,0.052,5,0.036,22,0.006,38,0.12,47,0.07,48,0.412,52,0.426,65,0.005,66,0.005,134,1.286,162,1.956,195,3.783,589,2.343,590,1.77,591,2.156,592,1.829,806,3.783,841,3.072,842,2.297,844,2.531,1083,3.443,1144,3.347,1861,4.93,2344,3.66,2345,5.51,3101,5.489,3107,4.432,3113,4.658,3131,5.27,3132,6.526,3133,5.27,3134,5.27,3135,5.27,3136,5.27,3137,5.27]],["title/classes/UserFollowEvent.html",[48,0.228,1529,3.669]],["body/classes/UserFollowEvent.html",[3,0.045,4,0.053,5,0.037,7,0.788,8,2.086,15,1.161,19,1.182,21,0.986,22,0.006,23,0.76,24,0.9,25,0.846,47,0.053,48,0.314,65,0.005,66,0.005,134,1.319,199,2.206,367,3.62,509,3.443,515,3.095,1052,5.86,1053,5.507,1058,4.778,1510,7.17,1529,6.201,3138,9.101,3139,6.581,3140,8.071,3141,6.581]],["title/modules/UserModule.html",[242,1.254,271,2.64]],["body/modules/UserModule.html",[3,0.038,4,0.045,5,0.031,22,0.006,38,0.121,39,0.541,47,0.045,48,0.265,52,0.37,53,3.502,65,0.004,66,0.004,69,2.806,109,5.369,133,3.983,242,2.122,244,2.151,245,2.24,246,2.336,247,2.336,248,2.336,249,3.39,271,5.429,272,3.047,273,2.336,274,2.336,467,3.983,475,3.498,1962,6.29,3094,6.996,3098,6.634,3118,4.57,3142,4.965,3143,5.565,3144,4.965,3145,6.61,3146,5.565,3147,5.565,3148,5.565,3149,4.965,3150,5.565]],["title/classes/UserNotePagerDto.html",[48,0.228,2342,3.029]],["body/classes/UserNotePagerDto.html",[3,0.038,4,0.045,5,0.031,22,0.006,25,0.71,38,0.123,47,0.074,48,0.423,52,0.367,65,0.004,66,0.004,134,1.107,162,1.971,198,3.24,509,2.849,589,1.629,590,1.524,591,1.96,592,1.575,800,2.319,841,2.136,842,1.978,844,2.179,850,4.014,956,2.478,1076,4.592,1083,2.965,1141,2.881,1143,3.504,1144,2.881,1859,3.816,2291,3.374,2299,3.258,2303,3.504,2325,4.011,2326,4.011,2327,4.011,2328,4.011,2329,4.011,2330,5.244,2331,3.816,2332,3.65,2333,5.244,2334,3.816,2335,4.011,2336,3.65,2337,4.011,2338,3.816,2339,4.011,2340,4.011,2341,4.011,2342,4.581,2343,3.504,2344,3.152,2345,3.374,2346,3.816]],["title/classes/UserPasswordDto.html",[48,0.228,2669,3.669]],["body/classes/UserPasswordDto.html",[3,0.043,4,0.051,5,0.035,22,0.006,38,0.104,47,0.069,48,0.373,52,0.52,62,0.938,65,0.005,66,0.005,75,4.199,87,4.545,134,1.254,162,1.851,198,3.15,545,2.47,589,1.845,590,1.727,591,2.123,592,1.785,798,5.413,800,3.284,2654,5.585,2655,5.141,2656,7.073,2657,5.141,2658,5.585,2659,5.585,2660,5.585,2661,5.585,2662,5.585,2663,5.585,2664,5.585,2665,5.141,2666,5.585,2667,5.585,2668,5.585,2669,6.012]],["title/injectables/UserPublicService.html",[0,0.464,1962,3.299]],["body/injectables/UserPublicService.html",[0,0.66,2,1.241,3,0.035,4,0.041,5,0.028,7,0.603,10,1.32,12,1.199,15,1.199,19,1.041,21,1.153,22,0.006,23,0.888,24,0.793,25,0.989,28,1.18,35,1.368,38,0.122,39,0.49,42,2.876,47,0.041,48,0.24,50,1.571,62,1.019,65,0.004,66,0.004,73,2.181,93,2.073,122,1.701,180,2.492,181,2.629,183,2.37,184,2.429,185,2.429,199,2.146,325,1.729,504,3.197,505,4.255,522,4.008,523,2.787,529,2.558,545,2.428,595,3.546,867,3.299,905,3.967,906,3.36,907,3.482,908,3.482,933,3.66,1155,3.648,1962,4.696,2607,6.862,3100,5.583,3151,5.041,3152,6.798,3153,5.041,3154,6.065,3155,5.041,3156,6.798,3157,5.041,3158,4.498,3159,4.498,3160,5.041,3161,5.041,3162,4.498,3163,5.041]],["title/classes/UserQueryDto.html",[48,0.228,3107,3.299]],["body/classes/UserQueryDto.html",[3,0.043,4,0.051,5,0.035,22,0.006,38,0.119,47,0.069,48,0.408,52,0.417,65,0.005,66,0.005,134,1.258,162,1.941,195,4.622,589,2.52,590,1.731,591,2.127,592,1.79,806,3.701,841,3.304,842,2.247,844,2.476,1083,4.206,1144,3.274,1861,6.022,2344,4.471,2345,5.627,3101,4.336,3107,5.414,3113,4.557,3131,5.155,3132,5.155,3133,5.155,3134,5.155,3135,5.155,3136,5.155,3137,5.155]],["title/injectables/UserService.html",[0,0.464,109,2.816]],["body/injectables/UserService.html",[0,0.355,2,0.546,3,0.037,4,0.018,5,0.012,7,0.266,10,0.906,12,0.645,15,0.645,19,1.099,21,1.217,22,0.006,23,0.937,24,0.85,25,1.044,28,1.384,35,0.993,38,0.113,39,0.216,42,1.265,47,0.018,48,0.106,50,1.079,52,0.54,62,1.141,65,0.002,66,0.002,73,2.33,75,4.278,77,3.264,83,2.291,84,3.109,86,2.829,87,3.933,93,2.175,95,3.933,109,2.157,122,2.185,180,1.808,181,1.157,183,1.043,184,1.069,185,1.069,195,3.804,199,2.251,220,1.126,237,1.19,286,1.226,325,0.564,342,1.096,347,4.166,356,3.933,376,5.029,386,3.276,504,1.407,505,3.208,509,2.813,511,3.578,522,2.157,523,1.226,527,1.979,528,1.822,529,1.126,532,2.505,535,1.857,536,1.979,537,3.264,539,1.979,545,2.403,567,2.195,569,2.505,570,1.679,711,1.532,729,1.822,741,1.72,806,1.308,821,2.811,867,2.003,876,2.32,901,2.527,903,1.704,905,2.611,906,1.808,907,1.532,908,1.532,921,2.811,932,1.979,991,1.61,996,2.32,1053,2.753,1155,1.19,1159,2.851,1160,3.435,1467,3.435,1570,3.933,1573,1.61,2069,3.933,2344,3.892,2418,4.166,2482,1.822,2483,1.822,2655,1.822,2657,1.822,3100,3.005,3101,3.742,3107,3.742,3116,1.979,3117,1.979,3154,3.264,3158,1.979,3159,1.979,3162,3.264,3164,2.218,3165,3.658,3166,3.658,3167,3.658,3168,3.658,3169,3.658,3170,2.218,3171,2.218,3172,2.218,3173,3.658,3174,2.218,3175,3.658,3176,3.658,3177,2.218,3178,3.658,3179,2.218,3180,3.658,3181,2.218,3182,2.218,3183,3.658,3184,2.218,3185,2.218,3186,2.218,3187,2.218,3188,2.218,3189,3.658,3190,2.218,3191,3.658,3192,2.218,3193,2.218,3194,2.218,3195,2.218,3196,2.218,3197,3.658,3198,3.658,3199,3.658,3200,2.218,3201,4.669,3202,3.658,3203,3.658,3204,3.658,3205,3.658,3206,2.218,3207,2.218,3208,3.658,3209,3.658,3210,2.218,3211,2.218,3212,2.218,3213,3.658,3214,3.658,3215,2.218,3216,2.218,3217,2.218,3218,2.218,3219,2.218,3220,2.218,3221,2.218,3222,2.218]],["title/injectables/UserTrpcRouter.html",[0,0.464,3145,3.467]],["body/injectables/UserTrpcRouter.html",[0,0.642,2,1.189,3,0.033,4,0.039,5,0.027,7,0.578,8,1.706,10,1.794,12,1.165,14,4.833,15,1.165,19,1.095,21,0.724,22,0.006,23,0.557,24,0.681,25,0.621,28,1.146,30,2.271,38,0.119,39,0.469,47,0.039,48,0.23,49,1.762,50,1.738,52,0.538,62,1.128,65,0.004,66,0.004,76,3.711,83,2.121,109,5.277,121,4.31,122,1.652,201,3.543,545,1.525,947,4.292,948,4.939,949,2.95,950,4.56,954,3.651,955,2.592,956,2.167,957,4.033,958,2.95,959,2.95,960,2.95,961,2.95,962,2.95,963,2.95,964,3.767,965,2.95,969,2.95,970,4.939,971,3.767,980,3.191,1962,6.182,2496,3.711,2544,4.31,3118,3.967,3145,4.794,3149,4.31,3223,4.83,3224,6.603,3225,4.83,3226,4.83,3227,4.83,3228,4.83]],["title/classes/UserUpdateDto.html",[48,0.228,3113,3.467]],["body/classes/UserUpdateDto.html",[3,0.044,4,0.052,5,0.036,22,0.006,38,0.12,47,0.07,48,0.412,52,0.426,65,0.005,66,0.005,134,1.286,162,1.956,195,3.783,589,2.343,590,1.77,591,2.156,592,1.829,806,3.783,841,3.072,842,2.297,844,2.531,1083,3.443,1144,3.347,1861,4.93,2344,3.66,2345,5.51,3101,4.432,3107,4.432,3113,5.769,3131,5.27,3132,5.27,3133,5.27,3134,5.27,3135,5.27,3136,5.27,3137,6.526]],["title/injectables/ViewService.html",[0,0.464,1921,3.669]],["body/injectables/ViewService.html",[0,0.697,2,1.348,3,0.038,4,0.044,5,0.031,7,0.655,10,1.062,12,1.267,15,0.966,19,1.085,21,1.201,22,0.006,23,0.925,24,0.91,25,1.03,28,1.246,38,0.117,39,0.532,47,0.044,48,0.261,62,0.82,65,0.004,66,0.004,73,2.232,84,4.099,122,1.796,196,4.156,504,3.47,505,4.343,522,3.227,523,3.025,529,2.777,675,3.122,676,3.122,739,4.494,854,4.262,1133,5.641,1227,3.47,1921,5.516,3229,5.472,3230,7.179,3231,7.179,3232,5.472,3233,7.179,3234,8.505,3235,5.472,3236,7.179,3237,5.472,3238,5.472,3239,5.472]],["title/classes/WebEventsGateway.html",[48,0.228,467,2.142]],["body/classes/WebEventsGateway.html",[3,0.037,4,0.044,5,0.03,7,0.646,8,1.838,10,1.047,15,1.255,19,1.077,21,0.809,22,0.006,23,0.623,24,0.733,25,0.693,38,0.12,47,0.044,48,0.257,49,2.594,50,1.838,52,0.359,62,0.809,65,0.004,66,0.004,80,2.086,134,1.081,136,6.113,137,6.113,138,6.382,139,7.099,140,5.164,141,6.554,142,4.814,143,6.554,144,5.165,146,6.113,148,4.814,150,3.564,151,4.814,152,6.346,153,3.727,155,3.422,156,3.422,157,6.346,158,4.814,159,5.465,160,5.465,162,1.17,163,4.814,164,4.814,401,5.706,402,4.431,467,3.19,3240,5.395,3241,5.395,3242,5.395,3243,5.395,3244,7.112]],["title/dependencies.html",[245,2.316,3245,3.544]],["body/dependencies.html",[5,0.024,22,0.006,39,0.41,40,2.201,65,0.004,66,0.004,102,2.034,150,2.788,153,2.915,156,3.811,190,3.869,245,1.699,277,2.788,279,2.488,352,3.064,380,3.242,396,2.488,397,3.428,479,2.577,505,1.984,523,2.333,528,3.466,529,3.05,554,2.488,556,2.788,563,1.85,590,1.93,591,1.631,635,3.466,636,5.748,638,4.617,677,4.935,711,2.915,727,3.064,731,3.466,732,3.765,867,2.577,1131,3.242,1132,3.242,1235,2.676,1373,3.765,1543,3.242,1596,5.536,1597,3.466,1598,3.466,1642,3.466,1678,3.466,1689,3.765,1807,2.915,1889,3.242,2089,3.765,2129,3.466,2144,3.466,2170,3.466,2231,5.362,2235,3.765,2236,3.765,2645,3.765,2706,4.617,2875,3.466,2935,3.466,3079,3.765,3246,4.22,3247,4.22,3248,4.22,3249,4.22,3250,4.22,3251,6.009,3252,4.22,3253,4.22,3254,4.22,3255,4.22,3256,4.22,3257,4.22,3258,4.22,3259,8.059,3260,4.22,3261,6.009,3262,4.22,3263,4.22,3264,4.22,3265,4.22,3266,4.22,3267,4.22,3268,4.22,3269,4.22,3270,4.22,3271,4.22,3272,4.22,3273,4.22,3274,4.22,3275,4.22,3276,4.22,3277,4.22,3278,4.22,3279,4.22,3280,4.22,3281,4.22,3282,4.22,3283,6.009,3284,4.22,3285,6.009,3286,4.22,3287,4.22,3288,6.998,3289,4.22,3290,4.22,3291,6.009,3292,4.22,3293,4.22,3294,4.22,3295,4.22,3296,4.22,3297,4.22,3298,4.22,3299,4.22,3300,4.22,3301,4.22,3302,4.22,3303,4.22,3304,4.22,3305,4.22,3306,4.22,3307,4.22,3308,4.22,3309,4.22,3310,6.009,3311,4.22,3312,4.22,3313,4.22,3314,4.22,3315,4.22,3316,4.22,3317,4.22,3318,4.22,3319,4.22,3320,4.22,3321,4.22,3322,4.22,3323,4.22,3324,4.22,3325,4.22,3326,4.22,3327,4.22,3328,4.22,3329,4.22,3330,4.22,3331,4.22,3332,4.22,3333,4.22,3334,4.22,3335,4.22,3336,4.22,3337,4.22]],["title/miscellaneous/enumerations.html",[3338,3.052,3339,5.133]],["body/miscellaneous/enumerations.html",[3,0.037,5,0.03,7,0.429,22,0.006,33,1.645,34,5.02,65,0.003,66,0.003,183,2.508,237,1.923,339,2.943,398,4.381,406,3.873,415,2.571,417,3.043,547,2.943,559,3.241,565,2.239,566,4.76,567,2.508,568,4.76,569,2.863,570,2.449,645,3.197,673,3.685,912,3.873,1078,3.685,1133,3.258,1136,4.099,1159,3.258,1424,4.381,1497,4.099,1532,4.381,1893,4.099,2203,3.197,2206,4.76,2208,4.76,2209,4.76,2237,4.76,3338,2.753,3339,3.197,3340,3.197,3341,3.583,3342,5.335,3343,5.335,3344,5.335,3345,3.583,3346,3.583,3347,5.335,3348,3.583,3349,5.335,3350,3.197,3351,6.373,3352,3.583,3353,5.335,3354,5.335,3355,3.583,3356,3.583,3357,5.335,3358,5.335,3359,5.335,3360,5.335,3361,5.335,3362,5.335,3363,5.335,3364,3.583,3365,3.583,3366,3.583,3367,3.583,3368,3.583,3369,3.583,3370,3.583,3371,3.583,3372,3.583,3373,3.583,3374,6.373,3375,3.583,3376,3.583,3377,3.583,3378,3.583,3379,3.583,3380,3.583,3381,3.583,3382,3.583,3383,3.583,3384,3.583,3385,3.583,3386,3.583,3387,3.583,3388,3.583,3389,3.583,3390,3.583,3391,3.583,3392,3.583,3393,3.583,3394,3.583,3395,3.583,3396,3.583,3397,3.583,3398,3.583,3399,3.583,3400,3.583,3401,3.583,3402,3.583,3403,3.583,3404,3.583,3405,3.583,3406,3.583,3407,3.583,3408,3.583,3409,3.583,3410,3.583,3411,3.583,3412,3.583,3413,3.583,3414,3.583,3415,3.583,3416,3.583,3417,3.583,3418,3.583,3419,3.583,3420,3.583,3421,3.583,3422,3.197,3423,5.335,3424,5.335,3425,7.059,3426,3.583,3427,3.583,3428,3.583,3429,5.335,3430,5.335,3431,3.583,3432,3.583,3433,3.583,3434,3.583,3435,3.583,3436,3.583,3437,3.583,3438,3.583,3439,3.583,3440,5.335,3441,5.335,3442,5.335,3443,3.583,3444,3.583,3445,3.583,3446,3.583,3447,3.583,3448,3.583,3449,3.583,3450,3.583,3451,5.335,3452,5.335]],["title/index.html",[7,0.572,3453,4.261]],["body/index.html",[1,4.673,2,0.594,22,0.006,53,0.952,65,0.002,66,0.002,69,0.933,109,2.918,133,4.284,134,0.484,144,3.911,237,1.295,242,0.634,243,7.428,244,0.933,245,0.971,246,1.013,247,1.013,248,1.013,249,1.013,250,2.153,251,2.153,252,5.967,253,3.936,254,4.874,255,4.874,256,5.824,257,5.899,258,4.55,259,5.136,260,3.593,261,5.685,262,5.263,263,6.022,264,4.874,265,6.222,266,4.55,267,6.032,268,5.136,269,5.531,270,4.874,271,4.946,272,1.645,273,1.013,274,1.013,333,5.685,393,1.423,462,2.153,463,2.153,464,2.153,465,2.153,466,4.55,467,4.284,468,3.593,469,3.803,470,3.803,630,2.153,631,2.153,632,2.153,790,2.153,791,2.153,792,2.153,809,3.803,831,3.27,857,2.153,860,2.153,861,3.593,950,3.69,987,3.803,1028,3.419,1064,2.153,1066,2.153,1068,3.593,1105,3.023,1208,3.139,1255,3.803,1275,3.593,1375,3.593,1417,2.153,1419,2.153,1495,3.419,1681,2.153,1682,2.153,1683,2.153,1684,2.153,1685,5.817,1719,3.27,1725,2.153,1727,2.153,1728,3.593,1758,3.27,1759,3.419,1865,3.803,1916,2.153,1919,2.153,1920,3.593,1921,3.803,1962,3.419,2092,2.153,2093,2.153,2094,2.153,2095,5.435,2123,2.153,2124,2.153,2280,3.803,2312,3.27,2347,3.803,2355,2.153,2358,2.153,2359,3.593,2533,3.593,2535,3.27,2559,3.803,2591,2.153,2594,2.153,2670,2.153,2722,2.153,2723,2.153,2725,3.803,2936,2.153,2937,2.153,2938,2.153,2975,3.803,3001,2.153,3002,2.153,3004,3.593,3094,3.803,3142,2.153,3144,2.153,3145,3.593,3453,2.153,3454,2.413,3455,2.413,3456,2.413,3457,2.413,3458,2.413]],["title/modules.html",[244,2.533]],["body/modules.html",[22,0.004,65,0.004,66,0.004,243,4.296,244,2.162,252,3.863,253,3.863,254,4.059,255,4.059,256,3.863,257,3.863,258,4.059,259,4.059,260,4.059,261,4.059,262,3.863,263,3.694,264,4.059,265,3.863,266,4.059,267,4.059,268,4.059,269,4.059,270,4.059,271,3.091,333,4.059,466,4.059,731,8.244,1685,4.059,3459,10.037,3460,10.037,3461,10.069,3462,7.281,3463,7.281]],["title/interfaces/myError.html",[193,1.922,194,3.922]],["body/interfaces/myError.html",[3,0.03,4,0.036,5,0.025,7,0.527,8,1.601,10,0.855,11,3.324,15,0.777,22,0.006,24,0.739,25,0.999,35,1.681,38,0.113,39,0.428,47,0.036,48,0.21,49,1.607,50,1.796,52,0.58,62,0.66,63,3.453,65,0.004,66,0.004,93,1.344,165,3.043,166,3.931,167,3.043,168,5.527,169,3.931,171,3.931,172,3.198,173,2.91,174,4.497,176,6.154,178,4.497,179,3.198,180,3.542,181,2.298,182,5.202,183,2.071,184,2.123,185,2.123,186,4.497,187,3.385,188,2.91,189,2.598,190,2.436,191,3.929,192,3.931,193,1.773,194,5.088,195,5.253,196,3.827,197,5.973,198,3.586,199,1.737,200,3.931,201,2.364,202,3.931,203,2.91,204,3.931,205,3.618,206,3.931,207,3.618,208,2.598,209,3.931,210,3.043,211,3.931,212,5.885,213,3.931,214,3.931,215,3.931,216,5.527,217,3.931,218,3.931,219,3.931,220,2.236,221,3.931,222,3.931,223,2.91,224,3.931,225,3.931,226,3.931,227,2.298,228,2.691,229,2.022,230,3.931,231,3.931,232,5.527,233,3.931,234,3.931,235,4.092,236,3.931,393,2.598]],["title/properties.html",[8,1.487,3245,3.544]],["body/properties.html",[8,1.984,22,0.006,65,0.005,66,0.005,3464,7.677,3465,7.677,3466,7.677,3467,7.677]],["title/miscellaneous/typealiases.html",[3338,3.052,3468,5.753]],["body/miscellaneous/typealiases.html",[7,0.52,22,0.006,24,0.733,41,5.476,65,0.004,66,0.004,71,2.958,84,2.095,167,4.239,196,1.906,199,1.487,220,2.206,291,4.239,419,4.194,480,5.04,509,1.715,513,4.456,519,5.476,534,2.563,545,1.372,547,3.57,552,4.054,553,3.879,573,5.476,621,4.715,643,3.879,655,5.476,658,5.476,759,4.239,861,3.156,905,2.958,928,2.691,954,2.403,1068,3.156,1142,3.156,1285,3.57,1288,3.57,1292,5.04,1293,3.57,1444,5.476,1467,3.892,1591,2.655,1594,5.04,1728,3.156,1799,3.748,1857,3.879,1864,5.476,1920,3.156,2034,5.04,2132,5.476,2359,3.156,2533,3.156,2679,6.347,2867,3.57,2882,5.04,2884,5.04,2886,5.842,2889,5.04,2910,5.04,2912,5.04,3004,3.156,3145,3.156,3338,3.34,3340,5.476,3350,3.879,3422,3.879,3469,4.347,3470,6.137,3471,8.694,3472,8.694,3473,6.137,3474,4.347,3475,6.137,3476,7.113,3477,6.137,3478,4.347,3479,6.137,3480,6.137,3481,4.347,3482,6.137,3483,6.137,3484,7.113,3485,4.347,3486,4.347,3487,6.137,3488,4.347,3489,4.347,3490,4.347,3491,4.347,3492,4.347,3493,4.347,3494,6.137,3495,4.347,3496,4.347,3497,4.347,3498,6.137,3499,6.137,3500,6.137,3501,6.137,3502,6.137,3503,6.137,3504,6.137,3505,4.347,3506,4.347,3507,6.137,3508,4.347,3509,4.347,3510,6.137,3511,6.137,3512,6.137,3513,6.137,3514,6.137,3515,6.137,3516,4.347,3517,6.137,3518,4.347,3519,6.137,3520,4.347,3521,4.347,3522,4.347,3523,4.347,3524,4.347,3525,4.347,3526,4.347,3527,4.347,3528,4.347,3529,4.347,3530,4.347,3531,4.347,3532,4.347,3533,8.694,3534,4.347,3535,4.347,3536,4.347,3537,4.347,3538,4.347,3539,4.347,3540,4.347,3541,4.347,3542,4.347,3543,4.347,3544,4.347,3545,4.347,3546,4.347]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CaslModule.html":{},"classes/CheckCodeDto.html":{},"injectables/CollectionAbility.html":{},"controllers/CollectionController.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"modules/CollectionModule.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"modules/CommentModule.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"classes/HistoryPagerDto.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"classes/IdDto.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"modules/SocketModule.html":{},"classes/SubCommentPagerDto.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"classes/TodoDto.html":{},"modules/TodoModule.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFollowEvent.html":{},"modules/UserModule.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/UserUpdateDto.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"interfaces/myError.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":1235,"title":{},"body":{"injectables/CountingService.html":{},"injectables/FollowService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/LikeService.html":{},"injectables/MailerService.html":{},"injectables/NotificationService.html":{},"dependencies.html":{}}}],["0).map(item",{"_index":2614,"title":{},"body":{"injectables/NotificationService.html":{}}}],["0.1.0",{"_index":3465,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":3316,"title":{},"body":{"dependencies.html":{}}}],["0.22.0",{"_index":3306,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":3310,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":1675,"title":{},"body":{"controllers/HealthController.html":{}}}],["0n",{"_index":2835,"title":{},"body":{"classes/Snowflake.html":{}}}],["0x1f",{"_index":2855,"title":{},"body":{"classes/Snowflake.html":{}}}],["1",{"_index":237,"title":{"classes/AllExceptionsFilter-1.html":{},"classes/LoginResult-1.html":{}},"body":{"injectables/CommentService.html":{},"injectables/CountingService.html":{},"injectables/FollowService.html":{},"injectables/HistoryService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/MailerService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["1.0.0",{"_index":3313,"title":{},"body":{"dependencies.html":{}}}],["1.0.37",{"_index":3328,"title":{},"body":{"dependencies.html":{}}}],["1.0.4",{"_index":3327,"title":{},"body":{"dependencies.html":{}}}],["1.11.10",{"_index":3290,"title":{},"body":{"dependencies.html":{}}}],["1.2.2",{"_index":3280,"title":{},"body":{"dependencies.html":{}}}],["1.4.0",{"_index":3324,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":3247,"title":{},"body":{"dependencies.html":{}}}],["1.4.4",{"_index":3331,"title":{},"body":{"dependencies.html":{}}}],["1.6.1",{"_index":3276,"title":{},"body":{"dependencies.html":{}}}],["1.9.1",{"_index":3255,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":2069,"title":{},"body":{"injectables/LikeService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Snowflake.html":{},"injectables/UserService.html":{}}}],["10.0.0",{"_index":3294,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":3257,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":3263,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":3266,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":3262,"title":{},"body":{"dependencies.html":{}}}],["10.3.1",{"_index":3259,"title":{},"body":{"dependencies.html":{}}}],["10.45.1",{"_index":3271,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":754,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["1000",{"_index":339,"title":{},"body":{"modules/AppModule.html":{},"injectables/InteractTrpcRouter.html":{},"miscellaneous/enumerations.html":{}}}],["1000).toutcstring",{"_index":1402,"title":{},"body":{"controllers/FileController.html":{}}}],["10000",{"_index":2720,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["1001",{"_index":3390,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["1024",{"_index":1662,"title":{},"body":{"controllers/HealthController.html":{}}}],["1024mb",{"_index":1664,"title":{},"body":{"controllers/HealthController.html":{}}}],["1102",{"_index":3392,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["1103",{"_index":3387,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["1200",{"_index":3394,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["1234567890",{"_index":758,"title":{},"body":{"controllers/CaptchaController.html":{},"injectables/MailerService.html":{}}}],["12n",{"_index":2837,"title":{},"body":{"classes/Snowflake.html":{}}}],["14",{"_index":3455,"title":{},"body":{"index.html":{}}}],["16.3.1",{"_index":3292,"title":{},"body":{"dependencies.html":{}}}],["1704067200000n",{"_index":2829,"title":{},"body":{"classes/Snowflake.html":{}}}],["1n",{"_index":2831,"title":{},"body":{"classes/Snowflake.html":{}}}],["1分钟最多接收1",{"_index":2186,"title":{},"body":{"injectables/MailerService.html":{}}}],["1天一个邮箱最多接收5",{"_index":2188,"title":{},"body":{"injectables/MailerService.html":{}}}],["2",{"_index":742,"title":{},"body":{"controllers/CaptchaController.html":{},"controllers/EmailController.html":{},"injectables/FollowService.html":{}}}],["2.0.0",{"_index":3311,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":3323,"title":{},"body":{"dependencies.html":{}}}],["2.0.3",{"_index":3261,"title":{},"body":{"dependencies.html":{}}}],["2.1.1",{"_index":3258,"title":{},"body":{"dependencies.html":{}}}],["2.18.1",{"_index":3304,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1000,"title":{},"body":{"controllers/CommentController.html":{},"modules/HelperModule.html":{}}}],["200",{"_index":1661,"title":{},"body":{"controllers/HealthController.html":{}}}],["2001",{"_index":3396,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2002",{"_index":3398,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2003",{"_index":3400,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["200mb",{"_index":1659,"title":{},"body":{"controllers/HealthController.html":{}}}],["24",{"_index":3454,"title":{},"body":{"index.html":{}}}],["3",{"_index":1697,"title":{},"body":{"modules/HelperModule.html":{},"injectables/NotePublicService.html":{},"injectables/TokenService.html":{}}}],["3.0.0",{"_index":3307,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":3256,"title":{},"body":{"dependencies.html":{}}}],["3.1.1",{"_index":3260,"title":{},"body":{"dependencies.html":{}}}],["3.1.6",{"_index":3284,"title":{},"body":{"dependencies.html":{}}}],["3.11.0",{"_index":3332,"title":{},"body":{"dependencies.html":{}}}],["3.22.4",{"_index":3334,"title":{},"body":{"dependencies.html":{}}}],["3.3.6",{"_index":3305,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":3402,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3001",{"_index":3404,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3002",{"_index":3406,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["31536000",{"_index":1401,"title":{},"body":{"controllers/FileController.html":{}}}],["3_000",{"_index":1895,"title":{},"body":{"injectables/InteractListener.html":{}}}],["4",{"_index":750,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["4.0.0",{"_index":3264,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":3312,"title":{},"body":{"dependencies.html":{}}}],["4.11.4",{"_index":3278,"title":{},"body":{"dependencies.html":{}}}],["4.14.201",{"_index":3273,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":3302,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":3289,"title":{},"body":{"dependencies.html":{}}}],["4.24.3",{"_index":3295,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":3333,"title":{},"body":{"dependencies.html":{}}}],["4.7.2",{"_index":3321,"title":{},"body":{"dependencies.html":{}}}],["4.7.8",{"_index":3298,"title":{},"body":{"dependencies.html":{}}}],["4.9.0",{"_index":3286,"title":{},"body":{"dependencies.html":{}}}],["4001",{"_index":3408,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["4002",{"_index":3410,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["404",{"_index":713,"title":{},"body":{"classes/CannotFindException.html":{}}}],["5",{"_index":762,"title":{},"body":{"controllers/CaptchaController.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/MailerService.html":{},"classes/Snowflake.html":{}}}],["5.0.1",{"_index":3267,"title":{},"body":{"dependencies.html":{}}}],["5.0.5",{"_index":3318,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":3269,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":3277,"title":{},"body":{"dependencies.html":{}}}],["5.2.4",{"_index":3279,"title":{},"body":{"dependencies.html":{}}}],["5.21.16",{"_index":3326,"title":{},"body":{"dependencies.html":{}}}],["5.3.0",{"_index":3282,"title":{},"body":{"dependencies.html":{}}}],["5.3.2",{"_index":3301,"title":{},"body":{"dependencies.html":{}}}],["5.5.0",{"_index":3320,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":756,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["500",{"_index":3385,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["5001",{"_index":3412,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["52",{"_index":3456,"title":{},"body":{"index.html":{}}}],["5n",{"_index":2824,"title":{},"body":{"classes/Snowflake.html":{}}}],["6",{"_index":2668,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["6.12.0",{"_index":3253,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":3246,"title":{},"body":{"dependencies.html":{}}}],["6.9.7",{"_index":3309,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":704,"title":{},"body":{"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"controllers/FileController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/MailerService.html":{}}}],["60000",{"_index":1698,"title":{},"body":{"modules/HelperModule.html":{}}}],["600000",{"_index":744,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["60_000",{"_index":1280,"title":{},"body":{"controllers/EmailController.html":{},"controllers/FileController.html":{},"injectables/HistoryService.html":{}}}],["65",{"_index":3457,"title":{},"body":{"index.html":{}}}],["7.0.7",{"_index":3337,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":3300,"title":{},"body":{"dependencies.html":{}}}],["7.1.15",{"_index":3265,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":3319,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1672,"title":{},"body":{"controllers/HealthController.html":{}}}],["8",{"_index":3374,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["8.0.0",{"_index":3251,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":3268,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":3458,"title":{},"body":{"index.html":{}}}],["9.0.5",{"_index":3254,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":3249,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9",{"_index":808,"title":{},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["9_",{"_index":3066,"title":{},"body":{"injectables/TokenService.html":{}}}],["_app",{"_index":2944,"title":{},"body":{"injectables/TRPCService.html":{}}}],["_app.gethttpadapter().all(`/api/trpc/:path",{"_index":2923,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["_app.register",{"_index":2931,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["_context",{"_index":2082,"title":{},"body":{"injectables/LocalGuard.html":{}}}],["_count",{"_index":2624,"title":{},"body":{"injectables/NotificationService.html":{}}}],["_data",{"_index":2777,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["_emitter",{"_index":644,"title":{},"body":{"injectables/CacheService.html":{}}}],["_json",{"_index":1612,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["_p",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["_procedureauth",{"_index":2906,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["_req",{"_index":1565,"title":{},"body":{"controllers/GoogleController.html":{}}}],["_server",{"_index":139,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/WebEventsGateway.html":{}}}],["ability",{"_index":2682,"title":{},"body":{"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["ability.can(action",{"_index":2686,"title":{},"body":{"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["ability.class",{"_index":44,"title":{},"body":{"injectables/AbilityService.html":{}}}],["ability.decorator",{"_index":46,"title":{},"body":{"injectables/AbilityService.html":{}}}],["ability_factory_key",{"_index":45,"title":{},"body":{"injectables/AbilityService.html":{}}}],["abilitybuilder",{"_index":812,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["abilitybuilder(createprismaability",{"_index":820,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["abilitymap",{"_index":9,"title":{},"body":{"injectables/AbilityService.html":{}}}],["abilitymap[model",{"_index":60,"title":{},"body":{"injectables/AbilityService.html":{}}}],["abilityservice",{"_index":1,"title":{"injectables/AbilityService.html":{}},"body":{"injectables/AbilityService.html":{},"modules/CaslModule.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"index.html":{}}}],["abstract",{"_index":548,"title":{},"body":{"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{}}}],["access_ip",{"_index":3450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accessip",{"_index":3449,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accessors",{"_index":140,"title":{},"body":{"classes/AdminEventsGateway.html":{},"injectables/CacheService.html":{},"injectables/MyLogger.html":{},"injectables/TRPCService.html":{},"classes/WebEventsGateway.html":{}}}],["accesstoken",{"_index":1610,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["account",{"_index":72,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AuthService.html":{},"injectables/CaptchaService.html":{},"injectables/LocalStrategy.html":{}}}],["accountcontroller",{"_index":68,"title":{"controllers/AccountController.html":{}},"body":{"controllers/AccountController.html":{},"modules/AuthModule.html":{}}}],["action",{"_index":565,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{},"classes/CreateNotificationDto.html":{},"injectables/NoteAbility.html":{},"controllers/NoteController.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotificationListener.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["action.create",{"_index":974,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"controllers/NoteController.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["action.delete",{"_index":981,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{},"controllers/NoteController.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["action.read",{"_index":2313,"title":{},"body":{"controllers/NoteController.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{},"controllers/UserController.html":{}}}],["action.update",{"_index":978,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"controllers/NoteController.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["actions",{"_index":2621,"title":{},"body":{"injectables/NotificationService.html":{}}}],["actions.map(async",{"_index":2622,"title":{},"body":{"injectables/NotificationService.html":{}}}],["activity",{"_index":3441,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["adapter",{"_index":2144,"title":{},"body":{"modules/MailerModule.html":{},"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["additem",{"_index":868,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{}}}],["additem(itemid",{"_index":881,"title":{},"body":{"injectables/CollectionService.html":{}}}],["address",{"_index":2139,"title":{},"body":{"modules/MailerModule.html":{}}}],["addview",{"_index":3230,"title":{},"body":{"injectables/ViewService.html":{}}}],["addview(type",{"_index":3233,"title":{},"body":{"injectables/ViewService.html":{}}}],["admin",{"_index":161,"title":{},"body":{"classes/AdminEventsGateway.html":{}}}],["admineventsgateway",{"_index":133,"title":{"classes/AdminEventsGateway.html":{}},"body":{"classes/AdminEventsGateway.html":{},"modules/AuthModule.html":{},"modules/CaptchaModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["age=31536000",{"_index":1398,"title":{},"body":{"controllers/FileController.html":{}}}],["agent",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["aliases",{"_index":3469,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionsfilter",{"_index":165,"title":{"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"interfaces/myError.html":{}}}],["allmodelnames",{"_index":3470,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allocated",{"_index":1665,"title":{},"body":{"controllers/HealthController.html":{}}}],["alphabet",{"_index":1367,"title":{},"body":{"controllers/FileController.html":{}}}],["any).path",{"_index":2925,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["any)?.response?.message",{"_index":217,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["api/trpc",{"_index":2933,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["apioperation",{"_index":1019,"title":{},"body":{"controllers/CommentController.html":{},"controllers/HistoryController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":1777,"title":{},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["apiproperty({type",{"_index":2794,"title":{},"body":{"classes/ResOp.html":{}}}],["apisecurityauth",{"_index":103,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":101,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/CaptchaController.html":{},"controllers/CollectionController.html":{},"controllers/CommentController.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"controllers/GoogleController.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["apitags('account",{"_index":117,"title":{},"body":{"controllers/AccountController.html":{}}}],["apitags('auth",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmailController.html":{},"controllers/GoogleController.html":{}}}],["apitags('business",{"_index":833,"title":{},"body":{"controllers/CollectionController.html":{},"controllers/CommentController.html":{},"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"controllers/TodoController.html":{}}}],["apitags('captcha",{"_index":736,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["apitags('health",{"_index":1645,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('system",{"_index":1377,"title":{},"body":{"controllers/FileController.html":{},"controllers/UserController.html":{}}}],["app",{"_index":2703,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["app.get(httpadapterhost",{"_index":1318,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["app.useglobalfilters(new",{"_index":1319,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["app_filter",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["app_guard",{"_index":281,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["app_pipe",{"_index":283,"title":{},"body":{"modules/AppModule.html":{}}}],["appability",{"_index":552,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{},"miscellaneous/typealiases.html":{}}}],["appconfig",{"_index":1570,"title":{},"body":{"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/MailerService.html":{},"injectables/UserService.html":{}}}],["appconfig.baseurl}/${appconfig.globalprefix}/auth/google/callback",{"_index":1606,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["appendinteractinfo",{"_index":1094,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{}}}],["appendinteractinfo(items",{"_index":1107,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{}}}],["appendiplocation",{"_index":1095,"title":{},"body":{"injectables/CommentService.html":{}}}],["appendiplocation(id",{"_index":1109,"title":{},"body":{"injectables/CommentService.html":{}}}],["application/json;charset=utf",{"_index":3373,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application/x",{"_index":3376,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["applicationref",{"_index":1312,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["applymiddleware",{"_index":2941,"title":{},"body":{"injectables/TRPCService.html":{}}}],["applymiddleware(_app",{"_index":2922,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["appmodule",{"_index":243,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["approuter",{"_index":2912,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{},"miscellaneous/typealiases.html":{}}}],["arg",{"_index":602,"title":{},"body":{"classes/BizException.html":{}}}],["args",{"_index":421,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["argumentmetadata",{"_index":2646,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["arguments",{"_index":2025,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["argumentshost",{"_index":174,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/myError.html":{}}}],["array.isarray(items",{"_index":1187,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{}}}],["array.isarray(key",{"_index":694,"title":{},"body":{"injectables/CacheService.html":{}}}],["array.isarray(omitkeys",{"_index":3088,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["assets/templates",{"_index":2143,"title":{},"body":{"modules/MailerModule.html":{}}}],["async",{"_index":73,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailerService.html":{},"controllers/NoteController.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"guards/PolicyGuard.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/ViewService.html":{}}}],["auditfile",{"_index":2258,"title":{},"body":{"injectables/MyLogger.html":{}}}],["auth",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["auth.constant",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{}}}],["auth.controller",{"_index":482,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard",{"_index":116,"title":{},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{}}}],["auth.guard.ts",{"_index":2002,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":2006,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:25",{"_index":2008,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:56",{"_index":2010,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.model",{"_index":734,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["auth.service",{"_index":112,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleController.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.constant",{"_index":3195,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/captcha",{"_index":718,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["auth/decorators/auth",{"_index":1024,"title":{},"body":{"controllers/CommentController.html":{},"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"controllers/TodoController.html":{}}}],["auth/decorators/public.decorator",{"_index":1644,"title":{},"body":{"controllers/HealthController.html":{}}}],["auth/dtos/account.dto",{"_index":3196,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/email",{"_index":1270,"title":{},"body":{"controllers/EmailController.html":{}}}],["auth/google",{"_index":1559,"title":{},"body":{"controllers/GoogleController.html":{}}}],["auth_failed",{"_index":3359,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["authcontroller",{"_index":343,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authfail",{"_index":3388,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["authfailed(client",{"_index":423,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["authgateway",{"_index":159,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"classes/WebEventsGateway.html":{}}}],["authgatewayoptions",{"_index":392,"title":{"interfaces/AuthGatewayOptions.html":{}},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["authguard",{"_index":1569,"title":{},"body":{"controllers/GoogleController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalGuard.html":{}}}],["authguard(authstrategy.jwt",{"_index":2003,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(authstrategy.local",{"_index":2079,"title":{},"body":{"injectables/LocalGuard.html":{}}}],["authmodule",{"_index":252,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocketModule.html":{},"index.html":{},"modules.html":{}}}],["authorization",{"_index":2017,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["authservice",{"_index":111,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/GoogleController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["authservice.validatetoken(authorization",{"_index":2898,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["authstrategy",{"_index":1571,"title":{},"body":{"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{}}}],["authstrategy.google",{"_index":1599,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["authstrategy.jwt",{"_index":2028,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authstrategy.local",{"_index":2084,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["authtoken",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"classes/ImageCaptcha.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{}}}],["authtoken(token",{"_index":427,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["authuser",{"_index":105,"title":{},"body":{"controllers/AccountController.html":{},"controllers/CommentController.html":{},"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"controllers/TodoController.html":{}}}],["available",{"_index":3463,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":1159,"title":{},"body":{"injectables/CommentService.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["await",{"_index":122,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LikeService.html":{},"injectables/LocalStrategy.html":{},"injectables/MailerService.html":{},"controllers/NoteController.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{}}}],["awaited",{"_index":3528,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["axios",{"_index":3275,"title":{},"body":{"dependencies.html":{}}}],["badrequestexception",{"_index":1364,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/ParseIntPipe.html":{}}}],["badrequestexception('id",{"_index":2651,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["base.gateway",{"_index":405,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["base64",{"_index":761,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["baseability",{"_index":43,"title":{"classes/BaseAbility.html":{}},"body":{"injectables/AbilityService.html":{},"classes/BaseAbility.html":{},"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["based",{"_index":2024,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["baseexceptionfilter",{"_index":1290,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["basegateway",{"_index":574,"title":{"classes/BaseGateway.html":{}},"body":{"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{}}}],["basegateway:18",{"_index":618,"title":{},"body":{"classes/BroadcastBaseGateway.html":{}}}],["basegateway:24",{"_index":617,"title":{},"body":{"classes/BroadcastBaseGateway.html":{}}}],["basegateway:6",{"_index":616,"title":{},"body":{"classes/BroadcastBaseGateway.html":{}}}],["basepagerschema",{"_index":841,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/HistoryPagerDto.html":{},"classes/InteractPagerDto.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/PagerDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["basepagerschema.extend",{"_index":1090,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/NotificationPagerDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["basetype",{"_index":3473,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["baseurl",{"_index":1491,"title":{},"body":{"injectables/FileService.html":{}}}],["baseurl.replace",{"_index":1493,"title":{},"body":{"injectables/FileService.html":{}}}],["basewsexceptionfilter",{"_index":240,"title":{},"body":{"classes/AllExceptionsFilter-1.html":{}}}],["batchdelete",{"_index":1711,"title":{},"body":{"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{}}}],["batchdelete(@body",{"_index":1723,"title":{},"body":{"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["batchdelete(dto",{"_index":1712,"title":{},"body":{"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["batchdelete(ids",{"_index":1738,"title":{},"body":{"injectables/HistoryService.html":{},"injectables/NoteService.html":{},"injectables/TodoService.html":{}}}],["batchdeletedto",{"_index":586,"title":{"classes/BatchDeleteDto.html":{}},"body":{"classes/BatchDeleteDto.html":{},"controllers/HistoryController.html":{},"injectables/HistoryTrpcRouter.html":{},"controllers/NoteController.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["batchdeleteschema",{"_index":593,"title":{},"body":{"classes/BatchDeleteDto.html":{}}}],["batchnotifyfunction",{"_index":3475,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["bcrypt",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bigint(datacenterid",{"_index":2858,"title":{},"body":{"classes/Snowflake.html":{}}}],["biz",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["bizcode",{"_index":599,"title":{},"body":{"classes/BizException.html":{}}}],["bizexception",{"_index":180,"title":{"classes/BizException.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"classes/BizException.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"controllers/FileController.html":{},"injectables/MailerService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"interfaces/myError.html":{}}}],["bizexception(errorcodeenum.authfail",{"_index":2897,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["bizexception(errorcodeenum.commentnotfound",{"_index":1164,"title":{},"body":{"injectables/CommentService.html":{}}}],["bizexception(errorcodeenum.jwtinvalid",{"_index":2899,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["bizexception(errorcodeenum.nopermission",{"_index":2905,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["bizexception(errorcodeenum.notenotfound",{"_index":934,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{}}}],["bizexception(errorcodeenum.passwordmismatch",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["bizexception(errorcodeenum.requesttoofast",{"_index":2187,"title":{},"body":{"injectables/MailerService.html":{}}}],["bizexception(errorcodeenum.resourcenotfound",{"_index":919,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"controllers/FileController.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["bizexception(errorcodeenum.usernotfound",{"_index":3162,"title":{},"body":{"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["bizexception(errorcodeenum.verificationcodeerror",{"_index":787,"title":{},"body":{"injectables/CaptchaService.html":{},"injectables/MailerService.html":{}}}],["bizexception(errorcodeenum.verificationcodesendfail",{"_index":2196,"title":{},"body":{"injectables/MailerService.html":{}}}],["body",{"_index":98,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/EmailController.html":{},"controllers/HistoryController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":1591,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IBaseResponse.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/NotePublicService.html":{},"classes/ResOp.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{}}}],["bootstrap",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["broadcast",{"_index":612,"title":{},"body":{"classes/BroadcastBaseGateway.html":{}}}],["broadcast(event",{"_index":457,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"interfaces/IAuthGateway.html":{}}}],["broadcastbasegateway",{"_index":404,"title":{"classes/BroadcastBaseGateway.html":{}},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"interfaces/IAuthGateway.html":{}}}],["browse",{"_index":3461,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3459,"title":{},"body":{"modules.html":{}}}],["bufferencoding",{"_index":1459,"title":{},"body":{"injectables/FileService.html":{}}}],["build",{"_index":819,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["bull",{"_index":1889,"title":{},"body":{"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":253,"title":{"modules/BullModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BullModule.html":{},"modules/InteractModule.html":{},"index.html":{},"modules.html":{}}}],["bullmodule.registerqueue",{"_index":1931,"title":{},"body":{"modules/InteractModule.html":{}}}],["bus.constant",{"_index":400,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["bus.constant.ts",{"_index":3349,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["business",{"_index":407,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"interfaces/IAuthGateway.html":{}}}],["businessevents",{"_index":406,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"interfaces/IAuthGateway.html":{},"miscellaneous/enumerations.html":{}}}],["businessexception",{"_index":611,"title":{},"body":{"classes/BizException.html":{}}}],["byid",{"_index":2496,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["bypass",{"_index":1365,"title":{},"body":{"controllers/FileController.html":{},"injectables/TransformInterceptor.html":{}}}],["bypass_key",{"_index":3080,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["cache",{"_index":638,"title":{},"body":{"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/InteractTrpcRouter.html":{},"dependencies.html":{}}}],["cache.service",{"_index":639,"title":{},"body":{"modules/CacheModule.html":{}}}],["cache_get",{"_index":3448,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cache_manager",{"_index":670,"title":{},"body":{"injectables/CacheService.html":{}}}],["cacheget",{"_index":645,"title":{},"body":{"injectables/CacheService.html":{},"miscellaneous/enumerations.html":{}}}],["cacheget(options",{"_index":651,"title":{},"body":{"injectables/CacheService.html":{}}}],["cachekey",{"_index":692,"title":{},"body":{"injectables/CacheService.html":{},"injectables/HistoryService.html":{}}}],["cachemodule",{"_index":254,"title":{"modules/CacheModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CacheModule.html":{},"index.html":{},"modules.html":{}}}],["cacheservice",{"_index":144,"title":{"injectables/CacheService.html":{}},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/HistoryService.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractTrpcRouter.html":{},"classes/WebEventsGateway.html":{},"index.html":{}}}],["cachevalue",{"_index":696,"title":{},"body":{"injectables/CacheService.html":{}}}],["call",{"_index":2105,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["call$.pipe",{"_index":2108,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["callback",{"_index":2744,"title":{},"body":{"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{}}}],["callback(json.parse(message",{"_index":2785,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["callbackurl",{"_index":1605,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["caller",{"_index":2910,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{},"miscellaneous/typealiases.html":{}}}],["callhandler",{"_index":1797,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["can(action.create",{"_index":822,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{}}}],["can(action.delete",{"_index":827,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{}}}],["can(action.manage",{"_index":992,"title":{},"body":{"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["can(action.read",{"_index":823,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{}}}],["can(action.update",{"_index":825,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{}}}],["canactivate",{"_index":2004,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalGuard.html":{},"guards/PolicyGuard.html":{}}}],["canactivate(_context",{"_index":2080,"title":{},"body":{"injectables/LocalGuard.html":{}}}],["canactivate(context",{"_index":2007,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PolicyGuard.html":{}}}],["cannotfindexception",{"_index":705,"title":{"classes/CannotFindException.html":{}},"body":{"classes/CannotFindException.html":{}}}],["captcha",{"_index":732,"title":{},"body":{"controllers/CaptchaController.html":{},"dependencies.html":{}}}],["captcha.controller",{"_index":769,"title":{},"body":{"modules/CaptchaModule.html":{}}}],["captcha.dto",{"_index":735,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["captcha.service",{"_index":771,"title":{},"body":{"modules/CaptchaModule.html":{}}}],["captcha/captcha.dto",{"_index":1277,"title":{},"body":{"controllers/EmailController.html":{}}}],["captcha/captcha.module",{"_index":483,"title":{},"body":{"modules/AuthModule.html":{}}}],["captcha:${to}:send:limit",{"_index":2181,"title":{},"body":{"injectables/MailerService.html":{}}}],["captcha_store",{"_index":3447,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["captchabyimg",{"_index":719,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["captchabyimg(@query",{"_index":745,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["captchabyimg(dto",{"_index":720,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["captchacontroller",{"_index":716,"title":{"controllers/CaptchaController.html":{}},"body":{"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{}}}],["captchalogservice",{"_index":781,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["captchamodule",{"_index":466,"title":{"modules/CaptchaModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CaptchaModule.html":{},"index.html":{},"modules.html":{}}}],["captchaservice",{"_index":770,"title":{"injectables/CaptchaService.html":{}},"body":{"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{}}}],["captchastore",{"_index":3446,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["case",{"_index":1173,"title":{},"body":{"injectables/CommentService.html":{}}}],["casl.service",{"_index":795,"title":{},"body":{"modules/CaslModule.html":{},"guards/PolicyGuard.html":{}}}],["casl/ability",{"_index":554,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{},"dependencies.html":{}}}],["casl/ability.class",{"_index":815,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/NoteAbility.html":{},"controllers/NoteController.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{}}}],["casl/ability.decorator",{"_index":817,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["casl/policy.decortor",{"_index":1026,"title":{},"body":{"controllers/CommentController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["casl/policy.guard",{"_index":2307,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["casl/prisma",{"_index":556,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{},"dependencies.html":{}}}],["caslmodule",{"_index":255,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"index.html":{},"modules.html":{}}}],["catch",{"_index":63,"title":{},"body":{"injectables/AbilityService.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/CacheService.html":{},"injectables/CollectionService.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"interfaces/IAuthGateway.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailerService.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TokenService.html":{},"interfaces/myError.html":{}}}],["catch(exception",{"_index":172,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/myError.html":{}}}],["catch(prisma?.prismaclientknownrequesterror",{"_index":1298,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["catch(resourcenotfoundwrapper",{"_index":933,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/UserPublicService.html":{}}}],["catch(resourcenotfoundwrapper(new",{"_index":3198,"title":{},"body":{"injectables/UserService.html":{}}}],["catchclientknownrequesterror",{"_index":1324,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["catchclientknownrequesterror(exception",{"_index":2693,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["catcherror",{"_index":1805,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/TimeoutInterceptor.html":{}}}],["catcherror((err",{"_index":2972,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["catcherror(async",{"_index":1842,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["catches",{"_index":1295,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["cb",{"_index":2782,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["chalk",{"_index":3281,"title":{},"body":{"dependencies.html":{}}}],["channel",{"_index":2767,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["channelprefix",{"_index":2757,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["charpreset",{"_index":757,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["chat_message",{"_index":3363,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chatmodule",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["check_policy_key",{"_index":2678,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["checkcode",{"_index":2147,"title":{},"body":{"injectables/MailerService.html":{}}}],["checkcode(to",{"_index":2154,"title":{},"body":{"injectables/MailerService.html":{}}}],["checkcodedto",{"_index":796,"title":{"classes/CheckCodeDto.html":{}},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["checkdatabase",{"_index":1621,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkdisk",{"_index":1622,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkimgcaptcha",{"_index":773,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["checkimgcaptcha(id",{"_index":776,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["checkisexist",{"_index":1432,"title":{},"body":{"injectables/FileService.html":{}}}],["checkisexist(path",{"_index":1441,"title":{},"body":{"injectables/FileService.html":{}}}],["checklimit",{"_index":2148,"title":{},"body":{"injectables/MailerService.html":{}}}],["checklimit(to",{"_index":2156,"title":{},"body":{"injectables/MailerService.html":{}}}],["checkmemoryheap",{"_index":1623,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkmemoryrss",{"_index":1624,"title":{},"body":{"controllers/HealthController.html":{}}}],["checknetwork",{"_index":1625,"title":{},"body":{"controllers/HealthController.html":{}}}],["children",{"_index":1156,"title":{},"body":{"injectables/CommentService.html":{}}}],["cjs",{"_index":3336,"title":{},"body":{"dependencies.html":{}}}],["class",{"_index":48,"title":{"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"classes/CannotFindException.html":{},"classes/CheckCodeDto.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{},"classes/HistoryPagerDto.html":{},"classes/IdDto.html":{},"classes/ImageCaptcha.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/PagerDto.html":{},"classes/PasswordUpdateDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserDto.html":{},"classes/UserFollowEvent.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{},"classes/WebEventsGateway.html":{}},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CaslModule.html":{},"classes/CheckCodeDto.html":{},"injectables/CollectionAbility.html":{},"controllers/CollectionController.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"modules/CollectionModule.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"modules/CommentModule.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"classes/HistoryPagerDto.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"classes/IdDto.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"modules/SocketModule.html":{},"classes/SubCommentPagerDto.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"classes/TodoDto.html":{},"modules/TodoModule.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFollowEvent.html":{},"modules/UserModule.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/UserUpdateDto.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["classes",{"_index":134,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"classes/CannotFindException.html":{},"classes/CheckCodeDto.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{},"classes/HistoryPagerDto.html":{},"classes/IdDto.html":{},"classes/ImageCaptcha.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/PagerDto.html":{},"classes/PasswordUpdateDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserDto.html":{},"classes/UserFollowEvent.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{},"classes/WebEventsGateway.html":{},"index.html":{}}}],["classtype",{"_index":3477,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["clearloginstatus",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["clearloginstatus(userid",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["client",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/typealiases.html":{}}}],["client.disconnect",{"_index":426,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["client.handshake.headers.authorization",{"_index":435,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["client.handshake.query.token",{"_index":434,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["client.id",{"_index":440,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["client.send",{"_index":424,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"interfaces/IAuthGateway.html":{}}}],["clientid",{"_index":1601,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":1603,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["cluster_appmodule",{"_index":250,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":462,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":465,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_cachemodule",{"_index":630,"title":{},"body":{"modules/CacheModule.html":{},"index.html":{}}}],["cluster_cachemodule_exports",{"_index":631,"title":{},"body":{"modules/CacheModule.html":{},"index.html":{}}}],["cluster_cachemodule_providers",{"_index":632,"title":{},"body":{"modules/CacheModule.html":{},"index.html":{}}}],["cluster_captchamodule",{"_index":766,"title":{},"body":{"modules/CaptchaModule.html":{}}}],["cluster_captchamodule_exports",{"_index":767,"title":{},"body":{"modules/CaptchaModule.html":{}}}],["cluster_caslmodule",{"_index":790,"title":{},"body":{"modules/CaslModule.html":{},"index.html":{}}}],["cluster_caslmodule_exports",{"_index":792,"title":{},"body":{"modules/CaslModule.html":{},"index.html":{}}}],["cluster_caslmodule_providers",{"_index":791,"title":{},"body":{"modules/CaslModule.html":{},"index.html":{}}}],["cluster_collectionmodule",{"_index":857,"title":{},"body":{"modules/CollectionModule.html":{},"index.html":{}}}],["cluster_collectionmodule_exports",{"_index":858,"title":{},"body":{"modules/CollectionModule.html":{}}}],["cluster_collectionmodule_imports",{"_index":859,"title":{},"body":{"modules/CollectionModule.html":{}}}],["cluster_collectionmodule_providers",{"_index":860,"title":{},"body":{"modules/CollectionModule.html":{},"index.html":{}}}],["cluster_commentmodule",{"_index":1064,"title":{},"body":{"modules/CommentModule.html":{},"index.html":{}}}],["cluster_commentmodule_exports",{"_index":1067,"title":{},"body":{"modules/CommentModule.html":{}}}],["cluster_commentmodule_imports",{"_index":1065,"title":{},"body":{"modules/CommentModule.html":{}}}],["cluster_commentmodule_providers",{"_index":1066,"title":{},"body":{"modules/CommentModule.html":{},"index.html":{}}}],["cluster_databasemodule",{"_index":1261,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cluster_databasemodule_exports",{"_index":1262,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cluster_filemodule",{"_index":1417,"title":{},"body":{"modules/FileModule.html":{},"index.html":{}}}],["cluster_filemodule_exports",{"_index":1418,"title":{},"body":{"modules/FileModule.html":{}}}],["cluster_filemodule_providers",{"_index":1419,"title":{},"body":{"modules/FileModule.html":{},"index.html":{}}}],["cluster_helpermodule",{"_index":1681,"title":{},"body":{"modules/HelperModule.html":{},"index.html":{}}}],["cluster_helpermodule_exports",{"_index":1684,"title":{},"body":{"modules/HelperModule.html":{},"index.html":{}}}],["cluster_helpermodule_imports",{"_index":1682,"title":{},"body":{"modules/HelperModule.html":{},"index.html":{}}}],["cluster_helpermodule_providers",{"_index":1683,"title":{},"body":{"modules/HelperModule.html":{},"index.html":{}}}],["cluster_historymodule",{"_index":1725,"title":{},"body":{"modules/HistoryModule.html":{},"index.html":{}}}],["cluster_historymodule_exports",{"_index":1726,"title":{},"body":{"modules/HistoryModule.html":{}}}],["cluster_historymodule_providers",{"_index":1727,"title":{},"body":{"modules/HistoryModule.html":{},"index.html":{}}}],["cluster_interactmodule",{"_index":1916,"title":{},"body":{"modules/InteractModule.html":{},"index.html":{}}}],["cluster_interactmodule_exports",{"_index":1918,"title":{},"body":{"modules/InteractModule.html":{}}}],["cluster_interactmodule_imports",{"_index":1917,"title":{},"body":{"modules/InteractModule.html":{}}}],["cluster_interactmodule_providers",{"_index":1919,"title":{},"body":{"modules/InteractModule.html":{},"index.html":{}}}],["cluster_loggermodule",{"_index":2092,"title":{},"body":{"modules/LoggerModule.html":{},"index.html":{}}}],["cluster_loggermodule_exports",{"_index":2093,"title":{},"body":{"modules/LoggerModule.html":{},"index.html":{}}}],["cluster_loggermodule_providers",{"_index":2094,"title":{},"body":{"modules/LoggerModule.html":{},"index.html":{}}}],["cluster_mailermodule",{"_index":2123,"title":{},"body":{"modules/MailerModule.html":{},"index.html":{}}}],["cluster_mailermodule_exports",{"_index":2125,"title":{},"body":{"modules/MailerModule.html":{}}}],["cluster_mailermodule_providers",{"_index":2124,"title":{},"body":{"modules/MailerModule.html":{},"index.html":{}}}],["cluster_notemodule",{"_index":2355,"title":{},"body":{"modules/NoteModule.html":{},"index.html":{}}}],["cluster_notemodule_exports",{"_index":2357,"title":{},"body":{"modules/NoteModule.html":{}}}],["cluster_notemodule_imports",{"_index":2356,"title":{},"body":{"modules/NoteModule.html":{}}}],["cluster_notemodule_providers",{"_index":2358,"title":{},"body":{"modules/NoteModule.html":{},"index.html":{}}}],["cluster_notetagmodule",{"_index":2469,"title":{},"body":{"modules/NoteTagModule.html":{}}}],["cluster_notetagmodule_exports",{"_index":2470,"title":{},"body":{"modules/NoteTagModule.html":{}}}],["cluster_notificationmodule",{"_index":2591,"title":{},"body":{"modules/NotificationModule.html":{},"index.html":{}}}],["cluster_notificationmodule_exports",{"_index":2593,"title":{},"body":{"modules/NotificationModule.html":{}}}],["cluster_notificationmodule_imports",{"_index":2592,"title":{},"body":{"modules/NotificationModule.html":{}}}],["cluster_notificationmodule_providers",{"_index":2594,"title":{},"body":{"modules/NotificationModule.html":{},"index.html":{}}}],["cluster_redismodule",{"_index":2722,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["cluster_redismodule_exports",{"_index":2724,"title":{},"body":{"modules/RedisModule.html":{}}}],["cluster_redismodule_providers",{"_index":2723,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["cluster_socketmodule",{"_index":2859,"title":{},"body":{"modules/SocketModule.html":{}}}],["cluster_socketmodule_exports",{"_index":2861,"title":{},"body":{"modules/SocketModule.html":{}}}],["cluster_socketmodule_imports",{"_index":2860,"title":{},"body":{"modules/SocketModule.html":{}}}],["cluster_todomodule",{"_index":3001,"title":{},"body":{"modules/TodoModule.html":{},"index.html":{}}}],["cluster_todomodule_exports",{"_index":3003,"title":{},"body":{"modules/TodoModule.html":{}}}],["cluster_todomodule_providers",{"_index":3002,"title":{},"body":{"modules/TodoModule.html":{},"index.html":{}}}],["cluster_trpcmodule",{"_index":2936,"title":{},"body":{"modules/TRPCModule.html":{},"index.html":{}}}],["cluster_trpcmodule_exports",{"_index":2938,"title":{},"body":{"modules/TRPCModule.html":{},"index.html":{}}}],["cluster_trpcmodule_providers",{"_index":2937,"title":{},"body":{"modules/TRPCModule.html":{},"index.html":{}}}],["cluster_usermodule",{"_index":3142,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["cluster_usermodule_exports",{"_index":3143,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":3144,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["code",{"_index":227,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BaseGateway.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CaptchaService.html":{},"classes/CheckCodeDto.html":{},"controllers/EmailController.html":{},"interfaces/IBaseResponse.html":{},"classes/ImageCaptchaDto.html":{},"injectables/MailerService.html":{},"classes/ResOp.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"interfaces/myError.html":{}}}],["code.constant",{"_index":185,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"classes/BizException.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"controllers/FileController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailerService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TokenService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"interfaces/myError.html":{}}}],["code.constant.ts",{"_index":3347,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["code.tolowercase",{"_index":785,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["codes",{"_index":1299,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["collect",{"_index":1224,"title":{},"body":{"injectables/CountingService.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["collect.event",{"_index":911,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/InteractListener.html":{}}}],["collect.event.ts",{"_index":2285,"title":{},"body":{"classes/NoteCollectEvent.html":{}}}],["collect.event.ts:4",{"_index":2287,"title":{},"body":{"classes/NoteCollectEvent.html":{}}}],["collect.event.ts:5",{"_index":2286,"title":{},"body":{"classes/NoteCollectEvent.html":{}}}],["collectedcount",{"_index":1956,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["collectedcountpromise",{"_index":1951,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["collectedlist",{"_index":2426,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["collectedlist[index",{"_index":2429,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["collection",{"_index":557,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{}}}],["collection.ability",{"_index":863,"title":{},"body":{"modules/CollectionModule.html":{}}}],["collection.controller",{"_index":864,"title":{},"body":{"modules/CollectionModule.html":{}}}],["collection.dto",{"_index":914,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{}}}],["collection.service",{"_index":832,"title":{},"body":{"controllers/CollectionController.html":{},"modules/CollectionModule.html":{},"injectables/CollectionTrpcRouter.html":{}}}],["collection.trpc",{"_index":865,"title":{},"body":{"modules/CollectionModule.html":{}}}],["collection.trpc.ts",{"_index":837,"title":{},"body":{"controllers/CollectionController.html":{}}}],["collection/collection.module",{"_index":2361,"title":{},"body":{"modules/NoteModule.html":{}}}],["collection/collection.service",{"_index":2407,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["collectionability",{"_index":809,"title":{"injectables/CollectionAbility.html":{}},"body":{"injectables/CollectionAbility.html":{},"modules/CollectionModule.html":{},"index.html":{}}}],["collectioncontroller",{"_index":828,"title":{"controllers/CollectionController.html":{}},"body":{"controllers/CollectionController.html":{},"modules/CollectionModule.html":{}}}],["collectiondto",{"_index":838,"title":{"classes/CollectionDto.html":{}},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"classes/CollectionUpdateDto.html":{}}}],["collectionid",{"_index":852,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"classes/CollectionUpdateDto.html":{}}}],["collectioninputschema",{"_index":845,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{}}}],["collectionitemdto",{"_index":855,"title":{"classes/CollectionItemDto.html":{}},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{}}}],["collectionitemquerydto",{"_index":851,"title":{"classes/CollectionItemQueryDto.html":{}},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"classes/CollectionUpdateDto.html":{}}}],["collectionitemschema",{"_index":853,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{}}}],["collectionmodule",{"_index":256,"title":{"modules/CollectionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CollectionModule.html":{},"modules/NoteModule.html":{},"index.html":{},"modules.html":{}}}],["collectionoptionaldefaultsschema",{"_index":843,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{}}}],["collectionoptionaldefaultsschema.pick",{"_index":846,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{}}}],["collectionpagerdto",{"_index":849,"title":{"classes/CollectionPagerDto.html":{}},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{}}}],["collections",{"_index":830,"title":{},"body":{"controllers/CollectionController.html":{},"injectables/CollectionService.html":{},"injectables/NotePublicService.html":{}}}],["collectionservice",{"_index":831,"title":{"injectables/CollectionService.html":{}},"body":{"controllers/CollectionController.html":{},"modules/CollectionModule.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/NotePublicService.html":{},"index.html":{}}}],["collectiontrpcrouter",{"_index":861,"title":{"injectables/CollectionTrpcRouter.html":{}},"body":{"modules/CollectionModule.html":{},"injectables/CollectionTrpcRouter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["collectionupdatedto",{"_index":847,"title":{"classes/CollectionUpdateDto.html":{}},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{}}}],["color",{"_index":751,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["comment",{"_index":415,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseAbility.html":{},"injectables/CacheService.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"interfaces/IAuthGateway.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"miscellaneous/enumerations.html":{}}}],["comment.ability",{"_index":1071,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment.constant",{"_index":1079,"title":{},"body":{"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["comment.content",{"_index":2583,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["comment.controller",{"_index":1072,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment.create",{"_index":3370,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["comment.dislike",{"_index":3368,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["comment.dto",{"_index":1027,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{}}}],["comment.id",{"_index":1911,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["comment.like",{"_index":3366,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["comment.parentid",{"_index":1915,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["comment.refid",{"_index":1914,"title":{},"body":{"injectables/InteractListener.html":{}}}],["comment.reftype",{"_index":1913,"title":{},"body":{"injectables/InteractListener.html":{}}}],["comment.service",{"_index":1029,"title":{},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentTrpcRouter.html":{}}}],["comment.trpc",{"_index":1073,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment.user.id",{"_index":1184,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment/comment.constant",{"_index":1890,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["comment/comment.module",{"_index":2362,"title":{},"body":{"modules/NoteModule.html":{}}}],["comment/events/comment",{"_index":1891,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["commentability",{"_index":987,"title":{"injectables/CommentAbility.html":{}},"body":{"injectables/CommentAbility.html":{},"modules/CommentModule.html":{},"index.html":{}}}],["commentcontroller",{"_index":993,"title":{"controllers/CommentController.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{}}}],["commentcount",{"_index":1957,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["commentcountpromise",{"_index":1953,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["commentcreate",{"_index":3369,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["commentcreateevent",{"_index":1048,"title":{"classes/CommentCreateEvent.html":{}},"body":{"classes/CommentCreateEvent.html":{},"injectables/CommentService.html":{},"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["commentdislike",{"_index":3367,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["commentevents",{"_index":1136,"title":{},"body":{"injectables/CommentService.html":{},"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{},"miscellaneous/enumerations.html":{}}}],["commentlike",{"_index":3365,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["commentlikeevent",{"_index":1059,"title":{"classes/CommentLikeEvent.html":{}},"body":{"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/InteractListener.html":{}}}],["commentmodule",{"_index":257,"title":{"modules/CommentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/NoteModule.html":{},"index.html":{},"modules.html":{}}}],["commentnotfound",{"_index":3409,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["commentpagerdto",{"_index":1015,"title":{"classes/CommentPagerDto.html":{}},"body":{"controllers/CommentController.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["commentpagerschema",{"_index":1089,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["commentreftype",{"_index":1078,"title":{},"body":{"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{},"miscellaneous/enumerations.html":{}}}],["commentreftype.note",{"_index":1174,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentreftype.xxx",{"_index":1176,"title":{},"body":{"injectables/CommentService.html":{}}}],["comments",{"_index":995,"title":{},"body":{"controllers/CommentController.html":{}}}],["commentschema",{"_index":1077,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["commentschema.pick",{"_index":1081,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["commentselect",{"_index":1137,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentservice",{"_index":1028,"title":{"injectables/CommentService.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"index.html":{}}}],["commenttrpcrouter",{"_index":1068,"title":{"injectables/CommentTrpcRouter.html":{}},"body":{"modules/CommentModule.html":{},"injectables/CommentTrpcRouter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["commomids",{"_index":1977,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["commomids.includes(user.id",{"_index":1983,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["common/filters/any",{"_index":287,"title":{},"body":{"modules/AppModule.html":{}}}],["common/filters/prisma",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["common/interceptors/idempotence.interceptor",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["common/interceptors/timeout.interceptor",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["common/interceptors/transform.interceptor",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pipes/zod",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["comparesync",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["comparesync(oldpassword",{"_index":3206,"title":{},"body":{"injectables/UserService.html":{}}}],["comparesync(password",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"injectables/MyLogger.html":{},"modules/RedisModule.html":{}}}],["config.changed",{"_index":3421,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["config.npm.levels",{"_index":2244,"title":{},"body":{"injectables/MyLogger.html":{}}}],["configchanged",{"_index":3420,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["configmodule",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"modules/MailerModule.html":{},"modules/RedisModule.html":{}}}],["configmodule.forroot",{"_index":323,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":476,"title":{},"body":{"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CronService.html":{},"injectables/FileService.html":{},"modules/MailerModule.html":{},"injectables/MyLogger.html":{},"modules/RedisModule.html":{}}}],["configservice.get('app')!.name",{"_index":2138,"title":{},"body":{"modules/MailerModule.html":{}}}],["configservice.get('mailer",{"_index":2136,"title":{},"body":{"modules/MailerModule.html":{}}}],["configservice.get('mailer')!.auth.user",{"_index":2140,"title":{},"body":{"modules/MailerModule.html":{}}}],["configservice.get('redis",{"_index":625,"title":{},"body":{"modules/BullModule.html":{},"modules/CacheModule.html":{},"modules/RedisModule.html":{}}}],["configservice.get('security",{"_index":495,"title":{},"body":{"modules/AuthModule.html":{}}}],["configtype",{"_index":3533,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["confirm",{"_index":2200,"title":{},"body":{"injectables/MailerService.html":{}}}],["confirmation",{"_index":2201,"title":{},"body":{"injectables/MailerService.html":{}}}],["conflictexception",{"_index":1801,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["conflictexception(message",{"_index":1837,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["connect",{"_index":938,"title":{},"body":{"injectables/CollectionService.html":{}}}],["connectorcreate",{"_index":2451,"title":{},"body":{"injectables/NoteService.html":{}}}],["consola.debug(`token",{"_index":449,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["console.error('uncaughtexception",{"_index":236,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["console.error('unhandledrejection",{"_index":233,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["consolelogger",{"_index":2204,"title":{},"body":{"injectables/MyLogger.html":{}}}],["consoleloggeroptions",{"_index":2213,"title":{},"body":{"injectables/MyLogger.html":{}}}],["const",{"_index":52,"title":{},"body":{"injectables/AbilityService.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"modules/CollectionModule.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"classes/IdDto.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LikeService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/Snowflake.html":{},"modules/SocketModule.html":{},"classes/SubCommentPagerDto.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"classes/TodoDto.html":{},"modules/TodoModule.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/UserUpdateDto.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"classes/BizException.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalStrategy.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/NotificationListener.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"classes/Snowflake.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"classes/UserFollowEvent.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["constructor(@inject(cache_manager",{"_index":678,"title":{},"body":{"injectables/CacheService.html":{}}}],["constructor(@inject(redis_pubsub",{"_index":2748,"title":{},"body":{"injectables/RedisPubSubService.html":{}}}],["constructor(@injectredis",{"_index":739,"title":{},"body":{"controllers/CaptchaController.html":{},"injectables/LikeService.html":{},"injectables/ViewService.html":{}}}],["constructor(app",{"_index":2700,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["constructor(appconfig",{"_index":2151,"title":{},"body":{"injectables/MailerService.html":{}}}],["constructor(applicationref",{"_index":2689,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["constructor(arg",{"_index":600,"title":{},"body":{"classes/BizException.html":{}}}],["constructor(authservice",{"_index":2085,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(cache",{"_index":649,"title":{},"body":{"injectables/CacheService.html":{}}}],["constructor(cacheservice",{"_index":1736,"title":{},"body":{"injectables/HistoryService.html":{}}}],["constructor(code",{"_index":605,"title":{},"body":{"classes/BizException.html":{}}}],["constructor(configservice",{"_index":1439,"title":{},"body":{"injectables/FileService.html":{}}}],["constructor(context",{"_index":2212,"title":{},"body":{"injectables/MyLogger.html":{}}}],["constructor(countingservice",{"_index":2349,"title":{},"body":{"injectables/NoteListener.html":{}}}],["constructor(discovery",{"_index":16,"title":{},"body":{"injectables/AbilityService.html":{},"injectables/TRPCService.html":{}}}],["constructor(eventemitter",{"_index":877,"title":{},"body":{"injectables/CollectionService.html":{}}}],["constructor(googleconfig",{"_index":1614,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["constructor(interactqueue",{"_index":1871,"title":{},"body":{"injectables/InteractListener.html":{}}}],["constructor(jwtservice",{"_index":142,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/WebEventsGateway.html":{}}}],["constructor(likeservice",{"_index":1104,"title":{},"body":{"injectables/CommentService.html":{},"classes/InteractProcessor.html":{},"injectables/NotePublicService.html":{}}}],["constructor(message",{"_index":604,"title":{},"body":{"classes/BizException.html":{}}}],["constructor(notificationservice",{"_index":2563,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["constructor(partial",{"_index":1052,"title":{},"body":{"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{},"classes/UserFollowEvent.html":{}}}],["constructor(prisma",{"_index":1213,"title":{},"body":{"injectables/CountingService.html":{},"injectables/CronService.html":{}}}],["constructor(private",{"_index":835,"title":{},"body":{"controllers/CollectionController.html":{},"injectables/FileService.html":{},"controllers/HistoryController.html":{},"injectables/LocalStrategy.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"classes/RedisIoAdapter.html":{},"injectables/TimeoutInterceptor.html":{},"controllers/TodoController.html":{},"injectables/TransformInterceptor.html":{}}}],["constructor(redis",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaptchaService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{},"injectables/TokenService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/ViewService.html":{}}}],["constructor(redisconfig",{"_index":2756,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["constructor(redissubpub",{"_index":2739,"title":{},"body":{"injectables/RedisPubSubService.html":{}}}],["constructor(reflector",{"_index":1791,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"guards/PolicyGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["constructor(securityconfig",{"_index":2029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(time",{"_index":2962,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["constructor(trpcservice",{"_index":949,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["constructor(undefined",{"_index":2792,"title":{},"body":{"classes/ResOp.html":{}}}],["constructor(workerid",{"_index":2821,"title":{},"body":{"classes/Snowflake.html":{}}}],["contains",{"_index":2418,"title":{},"body":{"injectables/NotePublicService.html":{},"injectables/UserService.html":{}}}],["content",{"_index":1082,"title":{},"body":{"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/NotificationListener.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/SubCommentPagerDto.html":{}}}],["contenttypeenum",{"_index":3344,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["context",{"_index":1799,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"guards/PolicyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["context.getclass",{"_index":2015,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PolicyGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["context.gethandler",{"_index":1822,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"guards/PolicyGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":1818,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"guards/PolicyGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":2016,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.switchtohttp().getresponse().status(httpstatus.no_content",{"_index":3087,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["contexttype",{"_index":1288,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/typealiases.html":{}}}],["control",{"_index":1396,"title":{},"body":{"controllers/FileController.html":{}}}],["controller",{"_index":67,"title":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/CaptchaController.html":{},"controllers/CollectionController.html":{},"controllers/CommentController.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"controllers/GoogleController.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/CaptchaController.html":{},"controllers/CollectionController.html":{},"controllers/CommentController.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"controllers/GoogleController.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["controller('account",{"_index":119,"title":{},"body":{"controllers/AccountController.html":{}}}],["controller('auth",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/captcha",{"_index":738,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["controller('auth/email",{"_index":1278,"title":{},"body":{"controllers/EmailController.html":{}}}],["controller('auth/google",{"_index":1572,"title":{},"body":{"controllers/GoogleController.html":{}}}],["controller('collections",{"_index":834,"title":{},"body":{"controllers/CollectionController.html":{}}}],["controller('comments",{"_index":1030,"title":{},"body":{"controllers/CommentController.html":{}}}],["controller('health",{"_index":1646,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('historys",{"_index":1721,"title":{},"body":{"controllers/HistoryController.html":{}}}],["controller('notes",{"_index":2311,"title":{},"body":{"controllers/NoteController.html":{}}}],["controller('notification",{"_index":2554,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('todos",{"_index":2993,"title":{},"body":{"controllers/TodoController.html":{}}}],["controller('users",{"_index":3119,"title":{},"body":{"controllers/UserController.html":{}}}],["controller(['objects",{"_index":1378,"title":{},"body":{"controllers/FileController.html":{}}}],["controllers",{"_index":69,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"controllers/CollectionController.html":{},"modules/CollectionModule.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"controllers/GoogleController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"index.html":{}}}],["controllers/account.controller",{"_index":484,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/email.controller",{"_index":485,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/google.controller",{"_index":486,"title":{},"body":{"modules/AuthModule.html":{}}}],["count",{"_index":1225,"title":{},"body":{"injectables/CountingService.html":{},"injectables/LikeService.html":{},"injectables/MailerService.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["count(@authuser",{"_index":2558,"title":{},"body":{"controllers/NotificationController.html":{}}}],["count(recipientid",{"_index":2600,"title":{},"body":{"injectables/NotificationService.html":{}}}],["count(user",{"_index":2548,"title":{},"body":{"controllers/NotificationController.html":{}}}],["counting",{"_index":1901,"title":{},"body":{"injectables/InteractListener.html":{}}}],["countingservice",{"_index":1208,"title":{"injectables/CountingService.html":{}},"body":{"injectables/CountingService.html":{},"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/NoteListener.html":{},"index.html":{}}}],["counttype",{"_index":1222,"title":{},"body":{"injectables/CountingService.html":{}}}],["counttype}count",{"_index":1239,"title":{},"body":{"injectables/CountingService.html":{}}}],["countviews",{"_index":3231,"title":{},"body":{"injectables/ViewService.html":{}}}],["countviews(type",{"_index":3236,"title":{},"body":{"injectables/ViewService.html":{}}}],["cover",{"_index":2449,"title":{},"body":{"injectables/NoteService.html":{}}}],["crash",{"_index":431,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["create",{"_index":567,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotificationService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["create(@body",{"_index":2318,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["create(dto",{"_index":883,"title":{},"body":{"injectables/CollectionService.html":{},"controllers/CommentController.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NotificationService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{}}}],["create(itemid",{"_index":1740,"title":{},"body":{"injectables/HistoryService.html":{}}}],["create(undefined",{"_index":3171,"title":{},"body":{"injectables/UserService.html":{}}}],["create.event",{"_index":1139,"title":{},"body":{"injectables/CommentService.html":{},"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["create.event.ts",{"_index":1050,"title":{},"body":{"classes/CommentCreateEvent.html":{}}}],["create.event.ts:4",{"_index":1057,"title":{},"body":{"classes/CommentCreateEvent.html":{}}}],["create.event.ts:5",{"_index":1055,"title":{},"body":{"classes/CommentCreateEvent.html":{}}}],["create.event.ts:6",{"_index":1056,"title":{},"body":{"classes/CommentCreateEvent.html":{}}}],["create.event.ts:7",{"_index":1054,"title":{},"body":{"classes/CommentCreateEvent.html":{}}}],["createability",{"_index":13,"title":{},"body":{"injectables/AbilityService.html":{}}}],["createadapter",{"_index":2709,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createadapter(pubclient",{"_index":2718,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createapprouter",{"_index":2913,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["createauthgateway",{"_index":157,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/WebEventsGateway.html":{}}}],["createauthgateway(options",{"_index":420,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["createcaller",{"_index":2908,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["createcomment",{"_index":1096,"title":{},"body":{"injectables/CommentService.html":{}}}],["createcomment(dto",{"_index":1111,"title":{},"body":{"injectables/CommentService.html":{}}}],["createcommentdto",{"_index":997,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentController.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["createcommentinputschema",{"_index":1080,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["createcontext",{"_index":2879,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["createdat",{"_index":1142,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NotificationService.html":{},"miscellaneous/typealiases.html":{}}}],["createdefaultcollection",{"_index":869,"title":{},"body":{"injectables/CollectionService.html":{}}}],["createdefaultcollection(userid",{"_index":885,"title":{},"body":{"injectables/CollectionService.html":{}}}],["createforuser",{"_index":549,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["createforuser(user",{"_index":550,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["createioserver",{"_index":2699,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createioserver(port",{"_index":2704,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createlogger",{"_index":2232,"title":{},"body":{"injectables/MyLogger.html":{}}}],["createnotificationdto",{"_index":1241,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{}}}],["createprismaability",{"_index":813,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["createrouter",{"_index":948,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["createwritestream",{"_index":1461,"title":{},"body":{"injectables/FileService.html":{}}}],["createwritestream(filepath",{"_index":1485,"title":{},"body":{"injectables/FileService.html":{}}}],["createzoddto",{"_index":589,"title":{},"body":{"classes/BatchDeleteDto.html":{},"classes/CheckCodeDto.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{},"classes/HistoryPagerDto.html":{},"classes/IdDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"classes/InteractPagerDto.html":{},"classes/LoginDto.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/PagerDto.html":{},"classes/PasswordUpdateDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["createzoddto(basepagerschema",{"_index":2631,"title":{},"body":{"classes/PagerDto.html":{}}}],["createzoddto(basepagerschema.extend",{"_index":850,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"classes/HistoryPagerDto.html":{},"classes/InteractPagerDto.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/NoteUpdateDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["createzoddto(batchdeleteschema",{"_index":588,"title":{},"body":{"classes/BatchDeleteDto.html":{}}}],["createzoddto(collectioninputschema",{"_index":840,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{}}}],["createzoddto(collectioninputschema.partial",{"_index":848,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{}}}],["createzoddto(collectionitemschema",{"_index":856,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{}}}],["createzoddto(commentpagerschema",{"_index":1075,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["createzoddto(commentpagerschema.extend",{"_index":1091,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["createzoddto(createcommentinputschema",{"_index":1088,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["createzoddto(credentialsschema",{"_index":2111,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["createzoddto(credentialsschema.extend",{"_index":2119,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["createzoddto(filequeryschema",{"_index":1423,"title":{},"body":{"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{}}}],["createzoddto(fileuploadschema",{"_index":1430,"title":{},"body":{"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{}}}],["createzoddto(imagesschema",{"_index":1858,"title":{},"body":{"classes/ImagesDto.html":{}}}],["createzoddto(noteinputschema",{"_index":2326,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["createzoddto(noteinputschema.partial",{"_index":2341,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["createzoddto(notetaginputschema",{"_index":2459,"title":{},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{}}}],["createzoddto(notetaginputschema.partial",{"_index":2464,"title":{},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{}}}],["createzoddto(notificationinputschema",{"_index":1243,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/NotificationPagerDto.html":{}}}],["createzoddto(notificationpagerschema",{"_index":1254,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/NotificationPagerDto.html":{}}}],["createzoddto(todoinputschema",{"_index":2995,"title":{},"body":{"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{}}}],["createzoddto(todoinputschema.partial",{"_index":2999,"title":{},"body":{"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{}}}],["createzoddto(userinputschema",{"_index":3132,"title":{},"body":{"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["createzoddto(userinputschema.partial",{"_index":3137,"title":{},"body":{"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["createzoddto(z.object",{"_index":798,"title":{},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/PasswordUpdateDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserPasswordDto.html":{}}}],["credential",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["credentialsschema",{"_index":2116,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["cron",{"_index":3283,"title":{},"body":{"dependencies.html":{}}}],["cron.service",{"_index":1691,"title":{},"body":{"modules/HelperModule.html":{}}}],["cronservice",{"_index":1255,"title":{"injectables/CronService.html":{}},"body":{"injectables/CronService.html":{},"modules/HelperModule.html":{},"index.html":{}}}],["crypto",{"_index":3287,"title":{},"body":{"dependencies.html":{}}}],["ctc",{"_index":2754,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["ctx",{"_index":201,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{},"interfaces/myError.html":{}}}],["ctx.getrequest",{"_index":204,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["ctx.getresponse",{"_index":206,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["cursor",{"_index":915,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/FollowService.html":{},"injectables/HistoryService.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/LikeService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{}}}],["cursorpaginationmeta",{"_index":1130,"title":{},"body":{"injectables/CommentService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{}}}],["custom",{"_index":1315,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["customalphabet",{"_index":1372,"title":{},"body":{"controllers/FileController.html":{}}}],["customalphabet(alphabet)(18",{"_index":1409,"title":{},"body":{"controllers/FileController.html":{}}}],["customprismamodule",{"_index":1264,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["customprismamodule.forrootasync",{"_index":1267,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dabase",{"_index":1415,"title":{},"body":{"controllers/FileController.html":{}}}],["daily",{"_index":2235,"title":{},"body":{"injectables/MyLogger.html":{},"dependencies.html":{}}}],["data",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"controllers/CaptchaController.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentService.html":{},"injectables/FileService.html":{},"controllers/GoogleController.html":{},"injectables/HistoryService.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotificationService.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{}}}],["data.id",{"_index":764,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["data.newpassword",{"_index":2660,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["data.oldpassword",{"_index":2659,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["data:image/svg+xml;base64,${buffer.from(svg.data).tostring",{"_index":760,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["data;charset=utf",{"_index":3382,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["database/prisma.extension",{"_index":1258,"title":{},"body":{"injectables/CronService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["databasemodule",{"_index":258,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["datacenterid",{"_index":2803,"title":{},"body":{"classes/Snowflake.html":{}}}],["datacenteridbits",{"_index":2805,"title":{},"body":{"classes/Snowflake.html":{}}}],["datacenteridshift",{"_index":2806,"title":{},"body":{"classes/Snowflake.html":{}}}],["date",{"_index":1754,"title":{},"body":{"injectables/HistoryService.html":{},"injectables/NoteService.html":{},"injectables/TokenService.html":{}}}],["date().toisostring",{"_index":3054,"title":{},"body":{"injectables/TokenService.html":{}}}],["date(date.now",{"_index":1400,"title":{},"body":{"controllers/FileController.html":{}}}],["date.now",{"_index":1534,"title":{},"body":{"injectables/FollowService.html":{},"injectables/LoggingInterceptor.html":{}}}],["datepattern",{"_index":2252,"title":{},"body":{"injectables/MyLogger.html":{}}}],["day",{"_index":2177,"title":{},"body":{"injectables/MailerService.html":{}}}],["day').todate",{"_index":2416,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["dayjs",{"_index":2170,"title":{},"body":{"injectables/MailerService.html":{},"injectables/NotePublicService.html":{},"dependencies.html":{}}}],["dayjs().subtract(7",{"_index":2415,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["db",{"_index":1647,"title":{},"body":{"controllers/HealthController.html":{}}}],["dd",{"_index":2255,"title":{},"body":{"injectables/MyLogger.html":{}}}],["debug",{"_index":2206,"title":{},"body":{"injectables/MyLogger.html":{},"miscellaneous/enumerations.html":{}}}],["debug(message",{"_index":2215,"title":{},"body":{"injectables/MyLogger.html":{}}}],["declarations",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["declare",{"_index":1291,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["decodeuri(url",{"_index":224,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["decorators",{"_index":80,"title":{},"body":{"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"controllers/AuthController.html":{},"controllers/CaptchaController.html":{},"injectables/CollectionService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"controllers/GoogleController.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"controllers/NoteController.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"classes/ResOp.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"classes/WebEventsGateway.html":{}}}],["decorators/bypass.decorator",{"_index":3081,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["decorators/idempotence.decorator",{"_index":1810,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["decorators/protect",{"_index":3083,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["decorators/public.decorator",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CaptchaController.html":{},"controllers/EmailController.html":{},"controllers/GoogleController.html":{}}}],["decr(getrediskey(`${type}:${id}:likes",{"_index":2062,"title":{},"body":{"injectables/LikeService.html":{}}}],["deep",{"_index":3093,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["default",{"_index":33,"title":{},"body":{"injectables/AbilityService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"interfaces/IBaseResponse.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/InteractProcessor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/NotePublicService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"classes/Snowflake.html":{},"miscellaneous/enumerations.html":{}}}],["default_limit",{"_index":2633,"title":{},"body":{"classes/PagerDto.html":{}}}],["defaultcollection",{"_index":935,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/NotePublicService.html":{}}}],["defaultcollection.id",{"_index":937,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/NotePublicService.html":{}}}],["defaultkeys",{"_index":3482,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["defaults",{"_index":2137,"title":{},"body":{"modules/MailerModule.html":{}}}],["defaultschemaomit",{"_index":2328,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["defineability",{"_index":816,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["defineability('collection",{"_index":818,"title":{},"body":{"injectables/CollectionAbility.html":{}}}],["defineability('comment",{"_index":990,"title":{},"body":{"injectables/CommentAbility.html":{}}}],["defineability('note",{"_index":2283,"title":{},"body":{"injectables/NoteAbility.html":{}}}],["defineability('todo",{"_index":2978,"title":{},"body":{"injectables/TodoAbility.html":{}}}],["defineability('user",{"_index":3097,"title":{},"body":{"injectables/UserAbility.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/IdempotenceInterceptor.html":{},"classes/ImageCaptcha.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"classes/Snowflake.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserFollowEvent.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{}}}],["definetrpcrouter",{"_index":959,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["definetrpcrouter('collection",{"_index":966,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["definetrpcrouter('comment",{"_index":1198,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["definetrpcrouter('history",{"_index":1764,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["definetrpcrouter('interact",{"_index":1969,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["definetrpcrouter('note",{"_index":2506,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["definetrpcrouter('notetag",{"_index":2493,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["definetrpcrouter('notification",{"_index":2541,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{}}}],["definetrpcrouter('todo",{"_index":3027,"title":{},"body":{"injectables/TodoTrpcRouter.html":{}}}],["definetrpcrouter('user",{"_index":3227,"title":{},"body":{"injectables/UserTrpcRouter.html":{}}}],["definition",{"_index":1301,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["definitions",{"_index":572,"title":{},"body":{"classes/BaseAbility.html":{}}}],["delay",{"_index":1894,"title":{},"body":{"injectables/InteractListener.html":{}}}],["delete",{"_index":570,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{},"controllers/FileController.html":{},"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotificationService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["delete('/:type/:name",{"_index":1347,"title":{},"body":{"controllers/FileController.html":{}}}],["delete(':id",{"_index":1045,"title":{},"body":{"controllers/CommentController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1004,"title":{},"body":{"controllers/CommentController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@policy({model",{"_index":2294,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["delete('batchdelete",{"_index":1713,"title":{},"body":{"controllers/HistoryController.html":{}}}],["delete(@param",{"_index":1046,"title":{},"body":{"controllers/CommentController.html":{},"controllers/FileController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["delete(dto",{"_index":2603,"title":{},"body":{"injectables/NotificationService.html":{}}}],["delete(id",{"_index":887,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/TodoService.html":{}}}],["delete(params",{"_index":1345,"title":{},"body":{"controllers/FileController.html":{}}}],["delete(undefined",{"_index":1003,"title":{},"body":{"controllers/CommentController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["delete(userids",{"_index":3173,"title":{},"body":{"injectables/UserService.html":{}}}],["deletecomment",{"_index":1097,"title":{},"body":{"injectables/CommentService.html":{}}}],["deletecomment(id",{"_index":1113,"title":{},"body":{"injectables/CommentService.html":{}}}],["deletedat",{"_index":3531,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["deletefile",{"_index":1433,"title":{},"body":{"injectables/FileService.html":{}}}],["deletefile(type",{"_index":1443,"title":{},"body":{"injectables/FileService.html":{}}}],["deleteitem",{"_index":870,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{}}}],["deleteitem(itemid",{"_index":889,"title":{},"body":{"injectables/CollectionService.html":{}}}],["delimiter",{"_index":1701,"title":{},"body":{"modules/HelperModule.html":{}}}],["dependencies",{"_index":245,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{}}}],["desc",{"_index":1144,"title":{},"body":{"injectables/CommentService.html":{},"injectables/HistoryService.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["description",{"_index":598,"title":{},"body":{"classes/BizException.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"injectables/LikeService.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["dir",{"_index":1381,"title":{},"body":{"controllers/FileController.html":{},"modules/MailerModule.html":{}}}],["dir.map(async",{"_index":1384,"title":{},"body":{"controllers/FileController.html":{}}}],["disable",{"_index":410,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseAbility.html":{},"injectables/CacheService.html":{},"interfaces/IAuthGateway.html":{}}}],["disablegeneratekey",{"_index":1817,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["disconnect",{"_index":942,"title":{},"body":{"injectables/CollectionService.html":{}}}],["discovery",{"_index":26,"title":{},"body":{"injectables/AbilityService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["discoverymodule",{"_index":794,"title":{},"body":{"modules/CaslModule.html":{},"modules/TRPCModule.html":{}}}],["discoveryservice",{"_index":17,"title":{},"body":{"injectables/AbilityService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["disk",{"_index":1649,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1637,"title":{},"body":{"controllers/HealthController.html":{}}}],["dislike",{"_index":1206,"title":{},"body":{"injectables/CommentTrpcRouter.html":{},"injectables/LikeService.html":{},"injectables/NoteTrpcRouter.html":{}}}],["dislike(type",{"_index":2046,"title":{},"body":{"injectables/LikeService.html":{}}}],["dislikecomment",{"_index":1098,"title":{},"body":{"injectables/CommentService.html":{}}}],["dislikecomment(itemid",{"_index":1115,"title":{},"body":{"injectables/CommentService.html":{}}}],["dislikenote",{"_index":2370,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["dislikenote(itemid",{"_index":2384,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["dotenv",{"_index":3291,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":86,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/CaptchaController.html":{},"injectables/CollectionService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/EmailController.html":{},"injectables/FollowService.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/LikeService.html":{},"controllers/NoteController.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto.password",{"_index":3130,"title":{},"body":{"controllers/UserController.html":{}}}],["dto/password.dto",{"_index":3116,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/user.dto",{"_index":3117,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/account.dto",{"_index":113,"title":{},"body":{"controllers/AccountController.html":{}}}],["e",{"_index":2020,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["email",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaptchaService.html":{},"classes/CheckCodeDto.html":{},"controllers/EmailController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"classes/ImageCaptchaDto.html":{},"classes/LoginDto.html":{},"injectables/MailerService.html":{},"classes/RegisterDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"injectables/UserService.html":{}}}],["email.init",{"_index":3415,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["email_verified",{"_index":1586,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["emailcontroller",{"_index":472,"title":{"controllers/EmailController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/EmailController.html":{}}}],["emailinit",{"_index":3414,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["emit('message",{"_index":460,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["emitter",{"_index":397,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"injectables/CacheService.html":{},"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/FollowService.html":{},"modules/HelperModule.html":{},"interfaces/IAuthGateway.html":{},"injectables/InteractListener.html":{},"injectables/NotePublicService.html":{},"injectables/NotificationListener.html":{},"dependencies.html":{}}}],["emitter(this.redisclient",{"_index":688,"title":{},"body":{"injectables/CacheService.html":{}}}],["encoding",{"_index":1458,"title":{},"body":{"injectables/FileService.html":{}}}],["end",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["endcursor",{"_index":1148,"title":{},"body":{"injectables/CommentService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{}}}],["engine",{"_index":1302,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["enum",{"_index":564,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/MyLogger.html":{}}}],["enumerations",{"_index":3339,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["epoch",{"_index":2807,"title":{},"body":{"classes/Snowflake.html":{}}}],["err",{"_index":235,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CacheService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/myError.html":{}}}],["error",{"_index":417,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"injectables/CacheService.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"interfaces/IAuthGateway.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TokenService.html":{},"miscellaneous/enumerations.html":{}}}],["error(message",{"_index":2217,"title":{},"body":{"injectables/MyLogger.html":{}}}],["error.%date%.log",{"_index":2262,"title":{},"body":{"injectables/MyLogger.html":{}}}],["error.json",{"_index":2264,"title":{},"body":{"injectables/MyLogger.html":{}}}],["error.message",{"_index":2928,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["error.stack",{"_index":2929,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["errorcode",{"_index":182,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BizException.html":{},"injectables/JwtAuthGuard.html":{},"injectables/TokenService.html":{},"interfaces/myError.html":{}}}],["errorcode[code",{"_index":610,"title":{},"body":{"classes/BizException.html":{}}}],["errorcode[errorcodeenum.servererror",{"_index":221,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["errorcodeenum",{"_index":183,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"classes/BizException.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"controllers/FileController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailerService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TokenService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"interfaces/myError.html":{}}}],["errorcodeenum.default",{"_index":607,"title":{},"body":{"classes/BizException.html":{}}}],["errorcodeenum.maximumfiveverificationcodesperday",{"_index":2190,"title":{},"body":{"injectables/MailerService.html":{}}}],["errorcodesstatusmapping",{"_index":1284,"title":{"interfaces/ErrorCodesStatusMapping.html":{}},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["errorhandler",{"_index":1824,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["errorhandler(request",{"_index":1836,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["errormessage",{"_index":1001,"title":{},"body":{"controllers/CommentController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["eslint",{"_index":409,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseAbility.html":{},"injectables/CacheService.html":{},"interfaces/IAuthGateway.html":{}}}],["event",{"_index":614,"title":{},"body":{"classes/BroadcastBaseGateway.html":{},"injectables/InteractListener.html":{},"injectables/NoteListener.html":{},"injectables/NotificationListener.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{}}}],["event.constant",{"_index":408,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"interfaces/IAuthGateway.html":{}}}],["event.constant.ts",{"_index":3342,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eventbusevents",{"_index":398,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"miscellaneous/enumerations.html":{}}}],["eventemitter",{"_index":880,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/FollowService.html":{},"injectables/NotePublicService.html":{}}}],["eventemitter2",{"_index":878,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/FollowService.html":{},"injectables/NotePublicService.html":{}}}],["eventemittermodule",{"_index":1687,"title":{},"body":{"modules/HelperModule.html":{}}}],["eventemittermodule.forroot",{"_index":1699,"title":{},"body":{"modules/HelperModule.html":{}}}],["events/admin.gateway",{"_index":2864,"title":{},"body":{"modules/SocketModule.html":{}}}],["events/comment",{"_index":1138,"title":{},"body":{"injectables/CommentService.html":{}}}],["events/note",{"_index":2409,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["events/user",{"_index":1530,"title":{},"body":{"injectables/FollowService.html":{}}}],["events/web.gateway",{"_index":2865,"title":{},"body":{"modules/SocketModule.html":{}}}],["ex",{"_index":703,"title":{},"body":{"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/MailerService.html":{}}}],["example",{"_index":1317,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["example.com/auth/confirm?token=${token",{"_index":2198,"title":{},"body":{"injectables/MailerService.html":{}}}],["exceed",{"_index":1671,"title":{},"body":{"controllers/HealthController.html":{}}}],["exception",{"_index":176,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"injectables/JwtAuthGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/myError.html":{}}}],["exception.bizcode",{"_index":225,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["exception.code",{"_index":1326,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["exception.filter.ts",{"_index":167,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/myError.html":{},"miscellaneous/typealiases.html":{}}}],["exception.filter.ts:15",{"_index":1287,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{}}}],["exception.filter.ts:27",{"_index":170,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.filter.ts:30",{"_index":2691,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter.ts:33",{"_index":175,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.filter.ts:34",{"_index":2690,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter.ts:68",{"_index":2692,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter.ts:72",{"_index":2694,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter.ts:85",{"_index":177,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.filter.ts:9",{"_index":239,"title":{},"body":{"classes/AllExceptionsFilter-1.html":{}}}],["exception.filter.ts:99",{"_index":2695,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.getstatus",{"_index":213,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["exception.message",{"_index":1328,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["exceptionfilter",{"_index":168,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["exceptions",{"_index":1297,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["exceptionshortmessage",{"_index":2688,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exceptionshortmessage(message",{"_index":1334,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["exec",{"_index":2061,"title":{},"body":{"injectables/LikeService.html":{}}}],["executioncontext",{"_index":1796,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalGuard.html":{},"injectables/LoggingInterceptor.html":{},"guards/PolicyGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["exist",{"_index":3209,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":921,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/FileService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["exists(type",{"_index":1446,"title":{},"body":{"injectables/FileService.html":{}}}],["expand",{"_index":3293,"title":{},"body":{"dependencies.html":{}}}],["expect",{"_index":416,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"injectables/CacheService.html":{},"interfaces/IAuthGateway.html":{}}}],["expired",{"_index":450,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"controllers/CommentController.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["expires",{"_index":497,"title":{},"body":{"modules/AuthModule.html":{},"controllers/FileController.html":{}}}],["expiretime",{"_index":690,"title":{},"body":{"injectables/CacheService.html":{}}}],["export",{"_index":47,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CaslModule.html":{},"classes/CheckCodeDto.html":{},"injectables/CollectionAbility.html":{},"controllers/CollectionController.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"modules/CollectionModule.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"modules/CommentModule.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"classes/HistoryPagerDto.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"classes/IdDto.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"modules/SocketModule.html":{},"classes/SubCommentPagerDto.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"classes/TodoDto.html":{},"modules/TodoModule.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFollowEvent.html":{},"modules/UserModule.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/UserUpdateDto.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["exports",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["ext",{"_index":1388,"title":{},"body":{"controllers/FileController.html":{}}}],["ext.tolowercase",{"_index":1410,"title":{},"body":{"controllers/FileController.html":{}}}],["extend",{"_index":1083,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["extendedprismaclient",{"_index":905,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"injectables/HistoryService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NotificationService.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["extends",{"_index":162,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter-1.html":{},"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"classes/CannotFindException.html":{},"classes/CheckCodeDto.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"classes/HistoryPagerDto.html":{},"interfaces/IAuthGateway.html":{},"classes/IdDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"classes/InteractPagerDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/MyLogger.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/PagerDto.html":{},"classes/PasswordUpdateDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{},"classes/WebEventsGateway.html":{}}}],["extension",{"_index":1131,"title":{},"body":{"injectables/CommentService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{},"dependencies.html":{}}}],["extra",{"_index":1472,"title":{},"body":{"injectables/FileService.html":{}}}],["extractjwt",{"_index":2035,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2038,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractroutertype",{"_index":2884,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{},"miscellaneous/typealiases.html":{}}}],["failed",{"_index":2653,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["false",{"_index":229,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/CommentService.html":{},"injectables/FileService.html":{},"modules/HelperModule.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotePublicService.html":{},"classes/PagerDto.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TokenService.html":{},"interfaces/myError.html":{}}}],["fastify",{"_index":190,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/GoogleController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"dependencies.html":{},"interfaces/myError.html":{}}}],["fastify/cookie",{"_index":3248,"title":{},"body":{"dependencies.html":{}}}],["fastify/multipart",{"_index":3250,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":3252,"title":{},"body":{"dependencies.html":{}}}],["fastifyreply",{"_index":188,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/GoogleController.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"interfaces/myError.html":{}}}],["fastifyrequest",{"_index":189,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/FileController.html":{},"controllers/GoogleController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"interfaces/myError.html":{}}}],["fastifyrequesthandler",{"_index":2872,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CaslModule.html":{},"classes/CheckCodeDto.html":{},"injectables/CollectionAbility.html":{},"controllers/CollectionController.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"modules/CollectionModule.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"modules/CommentModule.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"classes/HistoryPagerDto.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"classes/IdDto.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"modules/SocketModule.html":{},"classes/SubCommentPagerDto.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"classes/TodoDto.html":{},"modules/TodoModule.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFollowEvent.html":{},"modules/UserModule.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/UserUpdateDto.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"interfaces/myError.html":{}}}],["file.constant",{"_index":1425,"title":{},"body":{"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{}}}],["file.controller",{"_index":1421,"title":{},"body":{"modules/FileModule.html":{}}}],["file.dto",{"_index":1374,"title":{},"body":{"controllers/FileController.html":{}}}],["file.fieldname",{"_index":1406,"title":{},"body":{"controllers/FileController.html":{}}}],["file.file",{"_index":1413,"title":{},"body":{"controllers/FileController.html":{}}}],["file.service",{"_index":1376,"title":{},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{}}}],["filecontroller",{"_index":1341,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{}}}],["filemodule",{"_index":259,"title":{"modules/FileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FileModule.html":{},"index.html":{},"modules.html":{}}}],["filename",{"_index":1408,"title":{},"body":{"controllers/FileController.html":{},"injectables/MyLogger.html":{}}}],["filepath",{"_index":1479,"title":{},"body":{"injectables/FileService.html":{}}}],["filequerydto",{"_index":1346,"title":{"classes/FileQueryDto.html":{}},"body":{"controllers/FileController.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{}}}],["filequeryschema",{"_index":1426,"title":{},"body":{"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{}}}],["files",{"_index":1379,"title":{},"body":{"controllers/FileController.html":{}}}],["fileservice",{"_index":1375,"title":{"injectables/FileService.html":{}},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"index.html":{}}}],["filetype",{"_index":1444,"title":{},"body":{"injectables/FileService.html":{},"miscellaneous/typealiases.html":{}}}],["filetypeenum",{"_index":1424,"title":{},"body":{"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{},"miscellaneous/enumerations.html":{}}}],["fileuploaddto",{"_index":1356,"title":{"classes/FileUploadDto.html":{}},"body":{"controllers/FileController.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{}}}],["fileuploadschema",{"_index":1428,"title":{},"body":{"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{}}}],["filter((provider",{"_index":2914,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["filter((router",{"_index":2918,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["find",{"_index":2616,"title":{},"body":{"injectables/NotificationService.html":{}}}],["findone",{"_index":871,"title":{},"body":{"injectables/CollectionService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["findone(@param",{"_index":2316,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["findone(id",{"_index":891,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/TodoService.html":{}}}],["findone(undefined",{"_index":2296,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["finduniqueorthrow",{"_index":932,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/UserService.html":{}}}],["fixme",{"_index":1577,"title":{},"body":{"controllers/GoogleController.html":{}}}],["follow",{"_index":1497,"title":{},"body":{"injectables/FollowService.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NotificationService.html":{},"miscellaneous/enumerations.html":{}}}],["follow(targetid",{"_index":1508,"title":{},"body":{"injectables/FollowService.html":{}}}],["follow.event",{"_index":1531,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationListener.html":{}}}],["follow.event.ts",{"_index":3139,"title":{},"body":{"classes/UserFollowEvent.html":{}}}],["follow.event.ts:2",{"_index":3141,"title":{},"body":{"classes/UserFollowEvent.html":{}}}],["follow.event.ts:3",{"_index":3140,"title":{},"body":{"classes/UserFollowEvent.html":{}}}],["followercount",{"_index":1998,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["followercountpromise",{"_index":1993,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["followers",{"_index":1984,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["followfeed",{"_index":2371,"title":{},"body":{"injectables/NotePublicService.html":{},"injectables/NoteTrpcRouter.html":{}}}],["followfeed(dto",{"_index":2386,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["followids",{"_index":2412,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["following",{"_index":1974,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["following:2",{"_index":1535,"title":{},"body":{"injectables/FollowService.html":{}}}],["followingcount",{"_index":1997,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["followingcountpromise",{"_index":1991,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["follows:1",{"_index":1537,"title":{},"body":{"injectables/FollowService.html":{}}}],["followserive",{"_index":1961,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["followservice",{"_index":1495,"title":{"injectables/FollowService.html":{}},"body":{"injectables/FollowService.html":{},"modules/InteractModule.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NotePublicService.html":{},"index.html":{}}}],["forceupdatepassword",{"_index":3165,"title":{},"body":{"injectables/UserService.html":{}}}],["forceupdatepassword(userid",{"_index":3176,"title":{},"body":{"injectables/UserService.html":{}}}],["foreach((provider",{"_index":55,"title":{},"body":{"injectables/AbilityService.html":{}}}],["form",{"_index":3378,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["form_data",{"_index":3380,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["form_urlencoded",{"_index":3375,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["format",{"_index":2233,"title":{},"body":{"injectables/MyLogger.html":{}}}],["format.colorize",{"_index":2268,"title":{},"body":{"injectables/MyLogger.html":{}}}],["format.combine",{"_index":2245,"title":{},"body":{"injectables/MyLogger.html":{}}}],["format.combine(format.timestamp",{"_index":2257,"title":{},"body":{"injectables/MyLogger.html":{}}}],["format.errors",{"_index":2246,"title":{},"body":{"injectables/MyLogger.html":{}}}],["format.json",{"_index":2248,"title":{},"body":{"injectables/MyLogger.html":{}}}],["format.simple",{"_index":2267,"title":{},"body":{"injectables/MyLogger.html":{}}}],["format.timestamp",{"_index":2247,"title":{},"body":{"injectables/MyLogger.html":{}}}],["forwardref",{"_index":1730,"title":{},"body":{"modules/HistoryModule.html":{},"modules/NoteModule.html":{}}}],["found",{"_index":714,"title":{},"body":{"classes/CannotFindException.html":{}}}],["found.exception.ts",{"_index":707,"title":{},"body":{"classes/CannotFindException.html":{}}}],["found.exception.ts:6",{"_index":709,"title":{},"body":{"classes/CannotFindException.html":{}}}],["fs",{"_index":1471,"title":{},"body":{"injectables/FileService.html":{}}}],["fs.access(path",{"_index":1476,"title":{},"body":{"injectables/FileService.html":{}}}],["fs.createreadstream(this.resolvefilepath(type",{"_index":1478,"title":{},"body":{"injectables/FileService.html":{}}}],["fs.mkdir(path.dirname(filepath",{"_index":1482,"title":{},"body":{"injectables/FileService.html":{}}}],["fs.mkdir(this.resolvefilepath(type",{"_index":1488,"title":{},"body":{"injectables/FileService.html":{}}}],["fs.readdir(path_1",{"_index":1490,"title":{},"body":{"injectables/FileService.html":{}}}],["fs.unlink(this.resolvefilepath(type",{"_index":1487,"title":{},"body":{"injectables/FileService.html":{}}}],["full",{"_index":1673,"title":{},"body":{"controllers/HealthController.html":{}}}],["function",{"_index":419,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"injectables/CacheService.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IdempotenceOption.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{}}}],["gateway_connect",{"_index":3357,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["gateway_disconnect",{"_index":3358,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["gatewaymessageformat",{"_index":576,"title":{},"body":{"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{}}}],["gatewaymessageformat(type",{"_index":579,"title":{},"body":{"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{}}}],["gatewaymetadata",{"_index":151,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/WebEventsGateway.html":{}}}],["gender",{"_index":3160,"title":{},"body":{"injectables/UserPublicService.html":{}}}],["generatekey",{"_index":1789,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["generatekey(req",{"_index":1793,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["generatetoken",{"_index":3034,"title":{},"body":{"injectables/TokenService.html":{}}}],["generatetoken(payload",{"_index":3040,"title":{},"body":{"injectables/TokenService.html":{}}}],["generateuuid",{"_index":728,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["get('/:type",{"_index":1357,"title":{},"body":{"controllers/FileController.html":{}}}],["get('/:type/:name",{"_index":1386,"title":{},"body":{"controllers/FileController.html":{}}}],["get('/:type/:name')@throttle({default",{"_index":1351,"title":{},"body":{"controllers/FileController.html":{}}}],["get(':id",{"_index":2315,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["get(':id')@apioperation({summary",{"_index":3105,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':id')@policy({model",{"_index":2297,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["get(':id/sub/page",{"_index":1036,"title":{},"body":{"controllers/CommentController.html":{}}}],["get(':id/sub/page')@apioperation({summary",{"_index":1012,"title":{},"body":{"controllers/CommentController.html":{}}}],["get('callback",{"_index":1576,"title":{},"body":{"controllers/GoogleController.html":{}}}],["get('callback')@useguards(undefined",{"_index":1567,"title":{},"body":{"controllers/GoogleController.html":{}}}],["get('count",{"_index":2557,"title":{},"body":{"controllers/NotificationController.html":{}}}],["get('count')@apioperation({summary",{"_index":2549,"title":{},"body":{"controllers/NotificationController.html":{}}}],["get('database",{"_index":1653,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('database')@healthcheck",{"_index":1626,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('disk",{"_index":1667,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('disk')@healthcheck",{"_index":1628,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('image",{"_index":740,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["get('image')@public()@throttle({default",{"_index":722,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["get('logout",{"_index":81,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('memory",{"_index":1630,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('menus",{"_index":127,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('network",{"_index":1650,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('network')@healthcheck",{"_index":1635,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('page",{"_index":1031,"title":{},"body":{"controllers/CommentController.html":{},"controllers/HistoryController.html":{}}}],["get('page')@apioperation({summary",{"_index":1016,"title":{},"body":{"controllers/CommentController.html":{},"controllers/HistoryController.html":{}}}],["get('permissions",{"_index":130,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('profile",{"_index":91,"title":{},"body":{"controllers/AccountController.html":{}}}],["get()@apioperation({summary",{"_index":2552,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["get()@policy({model",{"_index":2300,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["get()@useguards(undefined",{"_index":1563,"title":{},"body":{"controllers/GoogleController.html":{}}}],["get(@param",{"_index":1387,"title":{},"body":{"controllers/FileController.html":{}}}],["get(key",{"_index":654,"title":{},"body":{"injectables/CacheService.html":{}}}],["get(params",{"_index":1350,"title":{},"body":{"controllers/FileController.html":{}}}],["getallfollowingids",{"_index":1498,"title":{},"body":{"injectables/FollowService.html":{}}}],["getallfollowingids(userid",{"_index":1511,"title":{},"body":{"injectables/FollowService.html":{}}}],["getallnoteidsbyuserid",{"_index":2372,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getallnoteidsbyuserid(userid",{"_index":2388,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getclient",{"_index":646,"title":{},"body":{"injectables/CacheService.html":{}}}],["getcommentbyid",{"_index":1099,"title":{},"body":{"injectables/CommentService.html":{}}}],["getcommentbyid(id",{"_index":1117,"title":{},"body":{"injectables/CommentService.html":{}}}],["getcommentcount",{"_index":1100,"title":{},"body":{"injectables/CommentService.html":{},"injectables/CountingService.html":{}}}],["getcommentcount(itemtype",{"_index":1119,"title":{},"body":{"injectables/CommentService.html":{}}}],["getcommentcount(reftype",{"_index":1215,"title":{},"body":{"injectables/CountingService.html":{}}}],["getcommonfollowerids",{"_index":1499,"title":{},"body":{"injectables/FollowService.html":{}}}],["getcommonfollowerids(targetid",{"_index":1513,"title":{},"body":{"injectables/FollowService.html":{}}}],["getcommonfollowingids",{"_index":1500,"title":{},"body":{"injectables/FollowService.html":{}}}],["getcommonfollowingids(targetid",{"_index":1515,"title":{},"body":{"injectables/FollowService.html":{}}}],["getcreatecaller",{"_index":2959,"title":{},"body":{"injectables/TRPCService.html":{}}}],["getdefaultcollection",{"_index":872,"title":{},"body":{"injectables/CollectionService.html":{}}}],["getdefaultcollection(userid",{"_index":893,"title":{},"body":{"injectables/CollectionService.html":{}}}],["getdir",{"_index":1434,"title":{},"body":{"injectables/FileService.html":{}}}],["getdir(type",{"_index":1448,"title":{},"body":{"injectables/FileService.html":{}}}],["getemitter",{"_index":668,"title":{},"body":{"injectables/CacheService.html":{}}}],["getfastifyplugin",{"_index":2874,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["getfilestream",{"_index":1435,"title":{},"body":{"injectables/FileService.html":{}}}],["getfilestream(type",{"_index":1450,"title":{},"body":{"injectables/FileService.html":{}}}],["getfollowercount",{"_index":1501,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowercount(userid",{"_index":1517,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowerids",{"_index":1502,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowerids(userid",{"_index":1519,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowingcount",{"_index":1503,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowingcount(userid",{"_index":1521,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowingids",{"_index":1504,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowingids(dto",{"_index":1523,"title":{},"body":{"injectables/FollowService.html":{}}}],["getip",{"_index":1803,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["getip(req",{"_index":1849,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["getiplocation",{"_index":1128,"title":{},"body":{"injectables/CommentService.html":{}}}],["getiplocation(ip",{"_index":1179,"title":{},"body":{"injectables/CommentService.html":{}}}],["getitembyid",{"_index":1101,"title":{},"body":{"injectables/CommentService.html":{}}}],["getitembyid(itemid",{"_index":1121,"title":{},"body":{"injectables/CommentService.html":{}}}],["getitemcollectcount",{"_index":1210,"title":{},"body":{"injectables/CountingService.html":{}}}],["getitemcollectcount(itemid",{"_index":1217,"title":{},"body":{"injectables/CountingService.html":{}}}],["getitemcollectedcount",{"_index":873,"title":{},"body":{"injectables/CollectionService.html":{}}}],["getitemcollectedcount(itemid",{"_index":895,"title":{},"body":{"injectables/CollectionService.html":{}}}],["getitemliked",{"_index":2042,"title":{},"body":{"injectables/LikeService.html":{}}}],["getitemliked(type",{"_index":2048,"title":{},"body":{"injectables/LikeService.html":{}}}],["getitemlikedcount",{"_index":2043,"title":{},"body":{"injectables/LikeService.html":{}}}],["getitemlikedcount(type",{"_index":2050,"title":{},"body":{"injectables/LikeService.html":{}}}],["getitems",{"_index":874,"title":{},"body":{"injectables/CollectionService.html":{}}}],["getitems(dto",{"_index":897,"title":{},"body":{"injectables/CollectionService.html":{}}}],["getlevel",{"_index":2227,"title":{},"body":{"injectables/MyLogger.html":{}}}],["getmaxfiles",{"_index":2229,"title":{},"body":{"injectables/MyLogger.html":{}}}],["getnotebyid",{"_index":2373,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getnotebyid(id",{"_index":2390,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getnotesbycollectionid",{"_index":2374,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getnotesbycollectionid(dto",{"_index":2392,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getnotesbyids",{"_index":2375,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getnotesbyids(ids",{"_index":2394,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getnotesbyuserid",{"_index":2376,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getnotesbyuserid(dto",{"_index":2396,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getprocedure",{"_index":2957,"title":{},"body":{"injectables/TRPCService.html":{}}}],["getprocedureauth",{"_index":2955,"title":{},"body":{"injectables/TRPCService.html":{}}}],["getprofile",{"_index":3166,"title":{},"body":{"injectables/UserService.html":{}}}],["getprofile(userid",{"_index":3178,"title":{},"body":{"injectables/UserService.html":{}}}],["getredisclient",{"_index":666,"title":{},"body":{"injectables/CacheService.html":{}}}],["getrediskey",{"_index":675,"title":{},"body":{"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/FollowService.html":{},"injectables/HistoryService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/LikeService.html":{},"injectables/TokenService.html":{},"injectables/ViewService.html":{}}}],["getrediskey(`followers:${targetid",{"_index":1557,"title":{},"body":{"injectables/FollowService.html":{}}}],["getrediskey(`followers:${userid",{"_index":1551,"title":{},"body":{"injectables/FollowService.html":{}}}],["getrediskey(`following:${targetid",{"_index":1556,"title":{},"body":{"injectables/FollowService.html":{}}}],["getrediskey(`following:${userid",{"_index":1545,"title":{},"body":{"injectables/FollowService.html":{}}}],["getrediskey(`idempotence:${idempotence",{"_index":1831,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["getrediskey(`u:${id}:interact_state",{"_index":1988,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["getrediskey(rediskeys.captchastore",{"_index":782,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["getrediskey(rediskeys.jwtstore",{"_index":3051,"title":{},"body":{"injectables/TokenService.html":{}}}],["getrediskey(rediskeys.view",{"_index":1745,"title":{},"body":{"injectables/HistoryService.html":{}}}],["getremaintime",{"_index":2171,"title":{},"body":{"injectables/MailerService.html":{}}}],["getrequestitemid",{"_index":2675,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["getrequestitemid(request",{"_index":2684,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["getserver",{"_index":148,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/WebEventsGateway.html":{}}}],["gett",{"_index":2953,"title":{},"body":{"injectables/TRPCService.html":{}}}],["gettrpc",{"_index":2951,"title":{},"body":{"injectables/TRPCService.html":{}}}],["gettypes",{"_index":1343,"title":{},"body":{"controllers/FileController.html":{}}}],["gettypes(@query",{"_index":1380,"title":{},"body":{"controllers/FileController.html":{}}}],["gettypes(query",{"_index":1354,"title":{},"body":{"controllers/FileController.html":{}}}],["getuserbyemail",{"_index":3167,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyemail(email",{"_index":3180,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyid",{"_index":3100,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["getuserbyid(@param",{"_index":3121,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(id",{"_index":3154,"title":{},"body":{"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["getuserbyid(undefined",{"_index":3104,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyids",{"_index":3152,"title":{},"body":{"injectables/UserPublicService.html":{}}}],["getuserbyids(ids",{"_index":3156,"title":{},"body":{"injectables/UserPublicService.html":{}}}],["getuserbyusername",{"_index":3168,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyusername(username",{"_index":3183,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserlikedcount",{"_index":1211,"title":{},"body":{"injectables/CountingService.html":{}}}],["getuserlikedcount(userid",{"_index":1219,"title":{},"body":{"injectables/CountingService.html":{}}}],["getuserlikedids",{"_index":2044,"title":{},"body":{"injectables/LikeService.html":{}}}],["getuserlikedids(dto",{"_index":2052,"title":{},"body":{"injectables/LikeService.html":{}}}],["getuserlikednotes",{"_index":2377,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getuserlikednotes(dto",{"_index":2398,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["getuserlikescount(type",{"_index":2072,"title":{},"body":{"injectables/LikeService.html":{}}}],["getvaluefun",{"_index":689,"title":{},"body":{"injectables/CacheService.html":{}}}],["getworkeranddatacenterid",{"_index":2856,"title":{},"body":{"classes/Snowflake.html":{}}}],["given_name",{"_index":1587,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["global",{"_index":474,"title":{},"body":{"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"modules/CaslModule.html":{},"modules/DatabaseModule.html":{},"modules/HelperModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{}}}],["google",{"_index":1597,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["googleauth",{"_index":1560,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googleauth(@req",{"_index":1575,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googleauth(_req",{"_index":1562,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googleauthredirect",{"_index":1561,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googleauthredirect(req",{"_index":1566,"title":{},"body":{"controllers/GoogleController.html":{}}}],["googleconfig",{"_index":1593,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["googleconfig.clientid",{"_index":1602,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["googleconfig.secret",{"_index":1604,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["googlecontroller",{"_index":473,"title":{"controllers/GoogleController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleController.html":{}}}],["googleprofile",{"_index":1584,"title":{"interfaces/GoogleProfile.html":{}},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["googlestrategy",{"_index":468,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"index.html":{}}}],["gqlcontexttype",{"_index":1292,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/typealiases.html":{}}}],["graph",{"_index":3462,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":1293,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/typealiases.html":{}}}],["gte",{"_index":2417,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["guard",{"_index":2670,"title":{"guards/PolicyGuard.html":{}},"body":{"index.html":{}}}],["guards",{"_index":2671,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["guards/jwt",{"_index":115,"title":{},"body":{"controllers/AccountController.html":{}}}],["guards/local.guard",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlebars",{"_index":3297,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":2130,"title":{},"body":{"modules/MailerModule.html":{}}}],["handlecommentcreateevent",{"_index":1867,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["handlecommentcreateevent(event",{"_index":1875,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["handlecommentlikeevent",{"_index":1868,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["handlecommentlikeevent(event",{"_index":1878,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["handleconnect",{"_index":577,"title":{},"body":{"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{}}}],["handleconnect(client",{"_index":581,"title":{},"body":{"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{}}}],["handleconnection(client",{"_index":433,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["handledisconnect",{"_index":578,"title":{},"body":{"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{}}}],["handledisconnect(client",{"_index":443,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"interfaces/IAuthGateway.html":{}}}],["handlenotecollectanduncollectevent",{"_index":1869,"title":{},"body":{"injectables/InteractListener.html":{}}}],["handlenotecollectanduncollectevent(event",{"_index":1881,"title":{},"body":{"injectables/InteractListener.html":{}}}],["handlenotecollectevent(event",{"_index":2580,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["handlenotelikeanddislikeevent",{"_index":1870,"title":{},"body":{"injectables/InteractListener.html":{}}}],["handlenotelikeanddislikeevent(event",{"_index":1884,"title":{},"body":{"injectables/InteractListener.html":{}}}],["handlenotelikedevent(event",{"_index":2352,"title":{},"body":{"injectables/NoteListener.html":{}}}],["handlenotelikeevent",{"_index":2561,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["handlenotelikeevent(event",{"_index":2567,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["handler",{"_index":1815,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TransformInterceptor.html":{}}}],["handlerequest",{"_index":2005,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":2009,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handletokenexpired(token",{"_index":448,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["handleupdatecommentcount",{"_index":1935,"title":{},"body":{"classes/InteractProcessor.html":{}}}],["handleupdatecommentcount(job",{"_index":1939,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["handleupdateitemcount",{"_index":1936,"title":{},"body":{"classes/InteractProcessor.html":{}}}],["handleupdateitemcount(job",{"_index":1943,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["handleuserfollowevent",{"_index":2562,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["handleuserfollowevent(event",{"_index":2569,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["hashstring",{"_index":1804,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["hashstring(json.stringify(obj",{"_index":1851,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["hashsync",{"_index":3194,"title":{},"body":{"injectables/UserService.html":{}}}],["hashsync(data.password",{"_index":3220,"title":{},"body":{"injectables/UserService.html":{}}}],["hashsync(newpassword",{"_index":3207,"title":{},"body":{"injectables/UserService.html":{}}}],["hashsync(password",{"_index":3208,"title":{},"body":{"injectables/UserService.html":{}}}],["hasnextpage",{"_index":1149,"title":{},"body":{"injectables/CommentService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{}}}],["haspreviouspage",{"_index":1150,"title":{},"body":{"injectables/CommentService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{}}}],["hasstack",{"_index":2278,"title":{},"body":{"injectables/MyLogger.html":{}}}],["header",{"_index":1816,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["headers",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["headers('user",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers['user",{"_index":1848,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["headers['x",{"_index":1846,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["health",{"_index":1620,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1680,"title":{},"body":{"modules/HealthModule.html":{}}}],["healthcheck",{"_index":1638,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1618,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["healthmodule",{"_index":260,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["heap",{"_index":1656,"title":{},"body":{"controllers/HealthController.html":{}}}],["heap')@healthcheck",{"_index":1631,"title":{},"body":{"controllers/HealthController.html":{}}}],["height",{"_index":747,"title":{},"body":{"controllers/CaptchaController.html":{},"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["helmet",{"_index":3299,"title":{},"body":{"dependencies.html":{}}}],["helpermodule",{"_index":261,"title":{"modules/HelperModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HelperModule.html":{},"index.html":{},"modules.html":{}}}],["history",{"_index":558,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/HistoryService.html":{}}}],["history.controller",{"_index":1732,"title":{},"body":{"modules/HistoryModule.html":{}}}],["history.dto",{"_index":1718,"title":{},"body":{"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{}}}],["history.id",{"_index":1753,"title":{},"body":{"injectables/HistoryService.html":{}}}],["history.service",{"_index":1720,"title":{},"body":{"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryTrpcRouter.html":{}}}],["history.trpc",{"_index":1733,"title":{},"body":{"modules/HistoryModule.html":{}}}],["history/history.module",{"_index":2363,"title":{},"body":{"modules/NoteModule.html":{}}}],["history/history.service",{"_index":2505,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["historycontroller",{"_index":1708,"title":{"controllers/HistoryController.html":{}},"body":{"controllers/HistoryController.html":{},"modules/HistoryModule.html":{}}}],["historymodule",{"_index":262,"title":{"modules/HistoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HistoryModule.html":{},"modules/NoteModule.html":{},"index.html":{},"modules.html":{}}}],["historypagerdto",{"_index":1715,"title":{"classes/HistoryPagerDto.html":{}},"body":{"controllers/HistoryController.html":{},"classes/HistoryPagerDto.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{}}}],["historys",{"_index":1710,"title":{},"body":{"controllers/HistoryController.html":{}}}],["historyservice",{"_index":1719,"title":{"injectables/HistoryService.html":{}},"body":{"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"index.html":{}}}],["historytrpcrouter",{"_index":1728,"title":{"injectables/HistoryTrpcRouter.html":{}},"body":{"modules/HistoryModule.html":{},"injectables/HistoryTrpcRouter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["homefeed",{"_index":2378,"title":{},"body":{"injectables/NotePublicService.html":{},"injectables/NoteTrpcRouter.html":{}}}],["homefeed(dto",{"_index":2400,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["host",{"_index":173,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/BullModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisSubPub.html":{},"interfaces/myError.html":{}}}],["host.gettype",{"_index":1329,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":202,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["html",{"_index":2163,"title":{},"body":{"injectables/MailerService.html":{}}}],["http",{"_index":1330,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"controllers/HealthController.html":{},"modules/HelperModule.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["http_idempotence_key",{"_index":1808,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["http_idempotence_options",{"_index":1809,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["httpadapter",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpadapterhost",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpexception",{"_index":178,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BizException.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/myError.html":{}}}],["httpexception.createbody",{"_index":606,"title":{},"body":{"classes/BizException.html":{}}}],["httphealthindicator",{"_index":1639,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":1677,"title":{},"body":{"modules/HealthModule.html":{},"modules/HelperModule.html":{}}}],["https://kuizuo.cn",{"_index":1652,"title":{},"body":{"controllers/HealthController.html":{}}}],["https://www.prisma.io/docs/reference/api",{"_index":1303,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpserver",{"_index":1289,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus",{"_index":179,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BizException.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/myError.html":{}}}],["httpstatus.bad_request",{"_index":1307,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.conflict",{"_index":1309,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":216,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["httpstatus.not_found",{"_index":1311,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus.ok",{"_index":608,"title":{},"body":{"classes/BizException.html":{}}}],["iappconfig",{"_index":1467,"title":{},"body":{"injectables/FileService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["iauthgateway",{"_index":418,"title":{"interfaces/IAuthGateway.html":{}},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["iauthuser",{"_index":79,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AuthGatewayOptions.html":{},"classes/BaseAbility.html":{},"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"controllers/HistoryController.html":{},"interfaces/IAuthGateway.html":{},"injectables/JwtStrategy.html":{},"injectables/NoteAbility.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TokenService.html":{},"injectables/UserAbility.html":{}}}],["ibaseresponse",{"_index":1775,"title":{"interfaces/IBaseResponse.html":{}},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["icon",{"_index":3423,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["id",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/FollowService.html":{},"injectables/HistoryService.html":{},"classes/IdDto.html":{},"classes/ImageCaptcha.html":{},"classes/InteractPagerDto.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/LikeService.html":{},"classes/LoginResult.html":{},"controllers/NoteController.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"controllers/UserController.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"miscellaneous/typealiases.html":{}}}],["id.dto",{"_index":2632,"title":{},"body":{"classes/PagerDto.html":{}}}],["id.helper",{"_index":2677,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["idatabaseconfig",{"_index":3487,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["iddto",{"_index":955,"title":{"classes/IdDto.html":{}},"body":{"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{},"classes/IdDto.html":{},"injectables/InteractTrpcRouter.html":{},"controllers/NoteController.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{},"controllers/UserController.html":{},"injectables/UserTrpcRouter.html":{}}}],["idempotence",{"_index":1020,"title":{},"body":{"controllers/CommentController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["idempotence({expired",{"_index":999,"title":{},"body":{"controllers/CommentController.html":{}}}],["idempotenceheaderkey",{"_index":1811,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["idempotenceinterceptor",{"_index":292,"title":{"injectables/IdempotenceInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["idempotencekey",{"_index":1830,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["idempotencekey)(handler",{"_index":1833,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["idempotenceoption",{"_index":1813,"title":{"interfaces/IdempotenceOption.html":{}},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["identity",{"_index":799,"title":{},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["ids",{"_index":595,"title":{},"body":{"classes/BatchDeleteDto.html":{},"injectables/FollowService.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/LikeService.html":{},"controllers/NoteController.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserPublicService.html":{}}}],["ids.length",{"_index":1547,"title":{},"body":{"injectables/FollowService.html":{}}}],["ids.map(id",{"_index":2074,"title":{},"body":{"injectables/LikeService.html":{}}}],["ids.push(...keys",{"_index":1546,"title":{},"body":{"injectables/FollowService.html":{},"injectables/LikeService.html":{}}}],["ids[0",{"_index":1548,"title":{},"body":{"injectables/FollowService.html":{}}}],["ids[ids.length",{"_index":1549,"title":{},"body":{"injectables/FollowService.html":{}}}],["ignoreerrors",{"_index":1706,"title":{},"body":{"modules/HelperModule.html":{}}}],["ignoreexpiration",{"_index":498,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["igoogleconfig",{"_index":1594,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["image",{"_index":759,"title":{},"body":{"controllers/CaptchaController.html":{},"classes/ImageCaptcha.html":{},"classes/ImagesDto.html":{},"classes/LoginResult.html":{},"injectables/NotificationListener.html":{},"miscellaneous/typealiases.html":{}}}],["imagecaptcha",{"_index":733,"title":{"classes/ImageCaptcha.html":{}},"body":{"controllers/CaptchaController.html":{},"classes/ImageCaptcha.html":{},"classes/LoginResult.html":{}}}],["imagecaptchadto",{"_index":721,"title":{"classes/ImageCaptchaDto.html":{}},"body":{"controllers/CaptchaController.html":{},"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["images",{"_index":2334,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["images![0",{"_index":2450,"title":{},"body":{"injectables/NoteService.html":{}}}],["imageschema",{"_index":1859,"title":{},"body":{"classes/ImagesDto.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["imageschema.array().min(1",{"_index":2335,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["imagesdto",{"_index":1856,"title":{"classes/ImagesDto.html":{}},"body":{"classes/ImagesDto.html":{}}}],["imagesschema",{"_index":1862,"title":{},"body":{"classes/ImagesDto.html":{}}}],["imailerconfig",{"_index":2132,"title":{},"body":{"modules/MailerModule.html":{},"miscellaneous/typealiases.html":{}}}],["implements",{"_index":49,"title":{},"body":{"injectables/AbilityService.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NoteAbility.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"injectables/UserTrpcRouter.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["import",{"_index":38,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CaslModule.html":{},"classes/CheckCodeDto.html":{},"injectables/CollectionAbility.html":{},"controllers/CollectionController.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"modules/CollectionModule.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"modules/CommentModule.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"classes/HistoryPagerDto.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"classes/IdDto.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"modules/SocketModule.html":{},"classes/SubCommentPagerDto.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"classes/TodoDto.html":{},"modules/TodoModule.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/UserUpdateDto.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["imports",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{}}}],["include",{"_index":1163,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{}}}],["includecollected",{"_index":2382,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["includepagecount",{"_index":2483,"title":{},"body":{"injectables/NoteTagService.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["incr(getrediskey(`${type}:${id}:likes",{"_index":2058,"title":{},"body":{"injectables/LikeService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IBaseResponse.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteLikeEvent.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"classes/Snowflake.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserFollowEvent.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"miscellaneous/enumerations.html":{},"interfaces/myError.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":1286,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{}}}],["inestapplication",{"_index":2701,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["inf",{"_index":1542,"title":{},"body":{"injectables/FollowService.html":{}}}],["inferrouterinputs",{"_index":3522,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["inferrouteroutputs",{"_index":3523,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CaslModule.html":{},"classes/CheckCodeDto.html":{},"injectables/CollectionAbility.html":{},"controllers/CollectionController.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"modules/CollectionModule.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"modules/CommentModule.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"classes/HistoryPagerDto.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"classes/IdDto.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"modules/SocketModule.html":{},"classes/SubCommentPagerDto.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"classes/TodoDto.html":{},"modules/TodoModule.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFollowEvent.html":{},"modules/UserModule.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/UserUpdateDto.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"miscellaneous/enumerations.html":{},"interfaces/myError.html":{}}}],["info.avatar",{"_index":3203,"title":{},"body":{"injectables/UserService.html":{}}}],["info.nickname",{"_index":3202,"title":{},"body":{"injectables/UserService.html":{}}}],["info.phone",{"_index":3204,"title":{},"body":{"injectables/UserService.html":{}}}],["inherited",{"_index":615,"title":{},"body":{"classes/BroadcastBaseGateway.html":{}}}],["init",{"_index":2755,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["initwinston",{"_index":2207,"title":{},"body":{"injectables/MyLogger.html":{}}}],["inject",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/PrismaClientExceptionFilter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"injectables/UserService.html":{}}}],["inject(appconfig.key",{"_index":1573,"title":{},"body":{"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/MailerService.html":{},"injectables/UserService.html":{}}}],["inject(googleconfig.key",{"_index":1600,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["inject(securityconfig.key",{"_index":2036,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AbilityService.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/IdempotenceInterceptor.html":{},"injectables/InteractListener.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"injectables/RedisPubSubService.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{}},"body":{"injectables/AbilityService.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractListener.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"injectables/RedisPubSubService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AbilityService.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"injectables/GoogleStrategy.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/IdempotenceInterceptor.html":{},"injectables/InteractListener.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"injectables/RedisPubSubService.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"index.html":{}}}],["injectprismaclient",{"_index":906,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"controllers/HealthController.html":{},"injectables/HistoryService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NotificationService.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["injectqueue",{"_index":1888,"title":{},"body":{"injectables/InteractListener.html":{}}}],["injectqueue(interact_queue",{"_index":1896,"title":{},"body":{"injectables/InteractListener.html":{}}}],["injectredis",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{},"injectables/MailerService.html":{},"injectables/TokenService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/ViewService.html":{}}}],["input",{"_index":971,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["input(batchdeletedto.schema",{"_index":1773,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{}}}],["input(collectioninputschema",{"_index":973,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["input(collectioninputschema.extend",{"_index":977,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["input(collectionitemdto.schema",{"_index":984,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["input(collectionpagerdto.schema",{"_index":968,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["input(commentpagerdto.schema",{"_index":1199,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["input(createcommentdto.schema",{"_index":1204,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["input(historypagerdto.schema",{"_index":1765,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["input(iddto.schema",{"_index":980,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["input(interactpagerdto.schema",{"_index":1975,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["input(notedto.schema",{"_index":2527,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["input(noteinputschema.extend",{"_index":2529,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["input(notepagerdto.schema",{"_index":2507,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["input(notesearchdto.schema",{"_index":2514,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["input(notetaginputschema",{"_index":2498,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["input(notetagpagerdto.schema",{"_index":2494,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["input(notificationpagerschema",{"_index":2542,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{}}}],["input(subcommentpagerdto.schema",{"_index":1202,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["input(todoinputschema",{"_index":3030,"title":{},"body":{"injectables/TodoTrpcRouter.html":{}}}],["input(todoinputschema.extend",{"_index":3032,"title":{},"body":{"injectables/TodoTrpcRouter.html":{}}}],["input(todopagerdto.schema",{"_index":3028,"title":{},"body":{"injectables/TodoTrpcRouter.html":{}}}],["input(usernotepagerdto.schema",{"_index":2517,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["instance",{"_index":2916,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["instance.router",{"_index":2917,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["instanceof",{"_index":212,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/myError.html":{}}}],["int.pipe.ts",{"_index":2642,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["int.pipe.ts:10",{"_index":2647,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["interact",{"_index":1237,"title":{},"body":{"injectables/CountingService.html":{},"injectables/InteractTrpcRouter.html":{}}}],["interact.constant",{"_index":1227,"title":{},"body":{"injectables/CountingService.html":{},"injectables/FollowService.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/LikeService.html":{},"injectables/ViewService.html":{}}}],["interact.dto",{"_index":1968,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["interact.listener",{"_index":1923,"title":{},"body":{"modules/InteractModule.html":{}}}],["interact.processor",{"_index":1925,"title":{},"body":{"modules/InteractModule.html":{}}}],["interact.trpc",{"_index":1926,"title":{},"body":{"modules/InteractModule.html":{}}}],["interact/events/user",{"_index":2573,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["interact/interact.constant",{"_index":1134,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{},"injectables/NotificationListener.html":{}}}],["interact/interact.module",{"_index":1070,"title":{},"body":{"modules/CommentModule.html":{},"modules/NoteModule.html":{}}}],["interact/services/counting.service",{"_index":2351,"title":{},"body":{"injectables/NoteListener.html":{}}}],["interact/services/follow.service",{"_index":2408,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["interact/services/like.service",{"_index":1135,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{}}}],["interact_queue",{"_index":1892,"title":{},"body":{"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["interactevents",{"_index":1532,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationListener.html":{},"miscellaneous/enumerations.html":{}}}],["interactlistener",{"_index":1865,"title":{"injectables/InteractListener.html":{}},"body":{"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"index.html":{}}}],["interactmodule",{"_index":263,"title":{"modules/InteractModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"modules/InteractModule.html":{},"modules/NoteModule.html":{},"index.html":{},"modules.html":{}}}],["interactpagerdto",{"_index":1932,"title":{"classes/InteractPagerDto.html":{}},"body":{"classes/InteractPagerDto.html":{},"injectables/InteractTrpcRouter.html":{}}}],["interactprocessor",{"_index":1924,"title":{"classes/InteractProcessor.html":{}},"body":{"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["interactqueue",{"_index":1874,"title":{},"body":{"injectables/InteractListener.html":{}}}],["interactstate",{"_index":1967,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["interacttrpcrouter",{"_index":1920,"title":{"injectables/InteractTrpcRouter.html":{}},"body":{"modules/InteractModule.html":{},"injectables/InteractTrpcRouter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["interacttype",{"_index":1133,"title":{},"body":{"injectables/CommentService.html":{},"injectables/CountingService.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/LikeService.html":{},"injectables/NotePublicService.html":{},"injectables/ViewService.html":{},"miscellaneous/enumerations.html":{}}}],["interacttype.comment",{"_index":1910,"title":{},"body":{"injectables/InteractListener.html":{}}}],["interacttype.note",{"_index":1233,"title":{},"body":{"injectables/CountingService.html":{},"injectables/InteractListener.html":{},"injectables/NotePublicService.html":{}}}],["intercept",{"_index":1790,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1795,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":193,"title":{"interfaces/AuthGatewayOptions.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"interfaces/GoogleProfile.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"interfaces/IdempotenceOption.html":{},"interfaces/JobData.html":{},"interfaces/TA.html":{},"interfaces/myError.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/AuthGatewayOptions.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/ResOp.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"interfaces/myError.html":{}}}],["interfaces",{"_index":393,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"interfaces/GoogleProfile.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"interfaces/IdempotenceOption.html":{},"interfaces/JobData.html":{},"interfaces/TA.html":{},"index.html":{},"interfaces/myError.html":{}}}],["ioadapter",{"_index":2698,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["ioredis",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{},"injectables/MailerService.html":{},"modules/RedisModule.html":{},"classes/RedisSubPub.html":{},"injectables/TokenService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/ViewService.html":{},"dependencies.html":{}}}],["ioredis(redisoptions",{"_index":2772,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["ip",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/EmailController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/MailerService.html":{}}}],["ipnumber",{"_index":2853,"title":{},"body":{"classes/Snowflake.html":{}}}],["ipparts[0",{"_index":2854,"title":{},"body":{"classes/Snowflake.html":{}}}],["iredisconfig",{"_index":621,"title":{},"body":{"modules/BullModule.html":{},"modules/CacheModule.html":{},"modules/RedisModule.html":{},"miscellaneous/typealiases.html":{}}}],["iscacheablevalue",{"_index":642,"title":{},"body":{"modules/CacheModule.html":{}}}],["isdefault",{"_index":923,"title":{},"body":{"injectables/CollectionService.html":{}}}],["isdev",{"_index":186,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AuthModule.html":{},"modules/HelperModule.html":{},"injectables/MyLogger.html":{},"interfaces/myError.html":{}}}],["isecurityconfig",{"_index":480,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["isempty",{"_index":729,"title":{},"body":{"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/UserService.html":{}}}],["isempty(exist",{"_index":3211,"title":{},"body":{"injectables/UserService.html":{}}}],["isempty(height",{"_index":755,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["isempty(result",{"_index":784,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["isempty(width",{"_index":753,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["isfollowing",{"_index":1972,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["isfollowingpromise",{"_index":1990,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["isglobal",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheModule.html":{}}}],["isitemincollection",{"_index":875,"title":{},"body":{"injectables/CollectionService.html":{}}}],["isitemincollection(itemid",{"_index":899,"title":{},"body":{"injectables/CollectionService.html":{}}}],["isjwt(jwt",{"_index":3058,"title":{},"body":{"injectables/TokenService.html":{}}}],["isjwt(token",{"_index":3061,"title":{},"body":{"injectables/TokenService.html":{}}}],["ismsconfig",{"_index":3494,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["isobjectlike",{"_index":3076,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["isobjectlike(obj",{"_index":3091,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["ispublic",{"_index":2013,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["ispublished",{"_index":824,"title":{},"body":{"injectables/CollectionAbility.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"injectables/NoteAbility.html":{},"injectables/NotePublicService.html":{}}}],["issamepassword",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["istokeninredis",{"_index":3035,"title":{},"body":{"injectables/TokenService.html":{}}}],["istokeninredis(userid",{"_index":3042,"title":{},"body":{"injectables/TokenService.html":{}}}],["isuserfollowing",{"_index":1505,"title":{},"body":{"injectables/FollowService.html":{}}}],["isuserfollowing(targetid",{"_index":1525,"title":{},"body":{"injectables/FollowService.html":{}}}],["item",{"_index":930,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/NotificationService.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["item._count",{"_index":2629,"title":{},"body":{"injectables/NotificationService.html":{}}}],["item.action.tolocalelowercase",{"_index":2627,"title":{},"body":{"injectables/NotificationService.html":{}}}],["item.id",{"_index":939,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/NotePublicService.html":{},"injectables/NotificationService.html":{}}}],["item.interact.collected",{"_index":2428,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["item.interact.liked",{"_index":1192,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{}}}],["item.noteid",{"_index":1769,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["item.status",{"_index":2613,"title":{},"body":{"injectables/NotificationService.html":{}}}],["itemid",{"_index":854,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"injectables/HistoryService.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/NotePublicService.html":{},"classes/SubCommentPagerDto.html":{},"injectables/ViewService.html":{}}}],["itemid}:ip",{"_index":1746,"title":{},"body":{"injectables/HistoryService.html":{}}}],["items",{"_index":927,"title":{},"body":{"injectables/CollectionService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotificationService.html":{},"injectables/TodoService.html":{}}}],["items.filter(item",{"_index":2612,"title":{},"body":{"injectables/NotificationService.html":{}}}],["items.foreach((item",{"_index":1191,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{}}}],["items.map(item",{"_index":1768,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{},"injectables/NotePublicService.html":{}}}],["itemtype",{"_index":1086,"title":{},"body":{"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"classes/SubCommentPagerDto.html":{}}}],["job",{"_index":1940,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/NoteListener.html":{}}}],["job.data",{"_index":1948,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["jobdata",{"_index":1946,"title":{"interfaces/JobData.html":{}},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["jobid",{"_index":1900,"title":{},"body":{"injectables/InteractListener.html":{}}}],["join",{"_index":2127,"title":{},"body":{"modules/MailerModule.html":{}}}],["join(__dirname",{"_index":2142,"title":{},"body":{"modules/MailerModule.html":{}}}],["js",{"_index":3288,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":3372,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["json.parse(cachevalue",{"_index":699,"title":{},"body":{"injectables/CacheService.html":{}}}],["json.stringify",{"_index":3053,"title":{},"body":{"injectables/TokenService.html":{}}}],["json.stringify(data",{"_index":2778,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["json.stringify(value",{"_index":702,"title":{},"body":{"injectables/CacheService.html":{}}}],["jsonb_set",{"_index":1238,"title":{},"body":{"injectables/CountingService.html":{}}}],["jwt",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"dependencies.html":{}}}],["jwt_store",{"_index":3445,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jwtauthguard",{"_index":114,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{}}}],["jwtexprire",{"_index":494,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":2037,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtinvalid",{"_index":3386,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jwtmodule",{"_index":477,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":492,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtsecret",{"_index":493,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":143,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"injectables/TokenService.html":{},"classes/WebEventsGateway.html":{}}}],["jwtstore",{"_index":3444,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["jwtstrategy",{"_index":469,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["k",{"_index":2887,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["keepttl",{"_index":1841,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["key",{"_index":657,"title":{},"body":{"injectables/CacheService.html":{},"injectables/CaptchaService.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NotificationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/TokenService.html":{}}}],["key.join('_",{"_index":695,"title":{},"body":{"injectables/CacheService.html":{}}}],["keyof",{"_index":2888,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["keys",{"_index":1543,"title":{},"body":{"injectables/FollowService.html":{},"injectables/LikeService.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["keys.decorator",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TransformInterceptor.html":{}}}],["keyword",{"_index":2344,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateDto.html":{}}}],["lasttimestamp",{"_index":2808,"title":{},"body":{"classes/Snowflake.html":{}}}],["lastviewedat",{"_index":1747,"title":{},"body":{"injectables/HistoryService.html":{}}}],["legend",{"_index":246,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["level",{"_index":2210,"title":{},"body":{"injectables/MyLogger.html":{}}}],["levels",{"_index":2243,"title":{},"body":{"injectables/MyLogger.html":{}}}],["liaoliaots/nestjs",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{},"injectables/MailerService.html":{},"modules/RedisModule.html":{},"injectables/TokenService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/ViewService.html":{},"dependencies.html":{}}}],["license",{"_index":3466,"title":{},"body":{"properties.html":{}}}],["like(@param",{"_index":1043,"title":{},"body":{"controllers/CommentController.html":{}}}],["like(type",{"_index":2054,"title":{},"body":{"injectables/LikeService.html":{}}}],["like(undefined",{"_index":1007,"title":{},"body":{"controllers/CommentController.html":{}}}],["like.event",{"_index":1140,"title":{},"body":{"injectables/CommentService.html":{},"injectables/InteractListener.html":{},"injectables/NotePublicService.html":{},"injectables/NotificationListener.html":{}}}],["like.event.ts",{"_index":1060,"title":{},"body":{"classes/CommentLikeEvent.html":{},"classes/NoteLikeEvent.html":{}}}],["like.event.ts:4",{"_index":1062,"title":{},"body":{"classes/CommentLikeEvent.html":{},"classes/NoteLikeEvent.html":{}}}],["like.event.ts:5",{"_index":1063,"title":{},"body":{"classes/CommentLikeEvent.html":{},"classes/NoteLikeEvent.html":{}}}],["like.event.ts:6",{"_index":1061,"title":{},"body":{"classes/CommentLikeEvent.html":{}}}],["like.service",{"_index":1228,"title":{},"body":{"injectables/CountingService.html":{}}}],["likecomment",{"_index":1102,"title":{},"body":{"injectables/CommentService.html":{}}}],["likecomment(itemid",{"_index":1123,"title":{},"body":{"injectables/CommentService.html":{}}}],["likecount",{"_index":1955,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["likecountpromise",{"_index":1949,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["liked",{"_index":1223,"title":{},"body":{"injectables/CountingService.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/LikeService.html":{}}}],["likedcount')::int",{"_index":1232,"title":{},"body":{"injectables/CountingService.html":{}}}],["likedlist",{"_index":1188,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{}}}],["likedlist[index",{"_index":1193,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{}}}],["likenote",{"_index":2379,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["likenote(itemid",{"_index":2402,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["likescount",{"_index":1999,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["likescountpromise",{"_index":1995,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["likescounts",{"_index":2073,"title":{},"body":{"injectables/LikeService.html":{}}}],["likescounts.reduce((total",{"_index":2076,"title":{},"body":{"injectables/LikeService.html":{}}}],["likeservice",{"_index":1105,"title":{"injectables/LikeService.html":{}},"body":{"injectables/CommentService.html":{},"injectables/CountingService.html":{},"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/LikeService.html":{},"injectables/NotePublicService.html":{},"index.html":{}}}],["limit",{"_index":741,"title":{},"body":{"controllers/CaptchaController.html":{},"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"injectables/FollowService.html":{},"modules/HelperModule.html":{},"injectables/HistoryService.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/LikeService.html":{},"injectables/MailerService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["limit_time",{"_index":2185,"title":{},"body":{"injectables/MailerService.html":{}}}],["limitcountofday",{"_index":2175,"title":{},"body":{"injectables/MailerService.html":{}}}],["line",{"_index":412,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseAbility.html":{},"injectables/CacheService.html":{},"interfaces/IAuthGateway.html":{}}}],["link",{"_index":1294,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["list",{"_index":967,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"injectables/HistoryTrpcRouter.html":{},"controllers/NoteController.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/NotificationController.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{},"controllers/UserController.html":{}}}],["list(@authuser",{"_index":2555,"title":{},"body":{"controllers/NotificationController.html":{}}}],["list(@query",{"_index":1037,"title":{},"body":{"controllers/CommentController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["list(dto",{"_index":1010,"title":{},"body":{"controllers/CommentController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["list(user",{"_index":2551,"title":{},"body":{"controllers/NotificationController.html":{}}}],["literal",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/GoogleStrategy.html":{},"injectables/NotificationService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":2089,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["locale",{"_index":1588,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["localguard",{"_index":369,"title":{"injectables/LocalGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalGuard.html":{}}}],["localstrategy",{"_index":470,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"index.html":{}}}],["location",{"_index":1178,"title":{},"body":{"injectables/CommentService.html":{}}}],["lodash",{"_index":711,"title":{},"body":{"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["log",{"_index":774,"title":{},"body":{"injectables/CaptchaService.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"classes/RedisSubPub.html":{}}}],["log(account",{"_index":778,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["log(message",{"_index":2221,"title":{},"body":{"injectables/MyLogger.html":{}}}],["log(to",{"_index":2158,"title":{},"body":{"injectables/MailerService.html":{}}}],["logger",{"_index":11,"title":{},"body":{"injectables/AbilityService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/CacheService.html":{},"injectables/CronService.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"classes/RedisSubPub.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"interfaces/myError.html":{}}}],["logger('abilityservice",{"_index":36,"title":{},"body":{"injectables/AbilityService.html":{}}}],["logger('trpcservice",{"_index":2890,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["logger(allexceptionsfilter.name",{"_index":171,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["logger(cacheservice.name",{"_index":665,"title":{},"body":{"injectables/CacheService.html":{}}}],["logger(cronservice.name",{"_index":1260,"title":{},"body":{"injectables/CronService.html":{}}}],["logger(interactprocessor.name",{"_index":1938,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["logger(logginginterceptor.name",{"_index":2102,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logger(mailerservice.name",{"_index":2168,"title":{},"body":{"injectables/MailerService.html":{}}}],["logger.debug(`发布事件：${channel",{"_index":2779,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["logger.debug(`接收事件：${channel",{"_index":2783,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["logger.error(exception",{"_index":219,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["logger.service",{"_index":2097,"title":{},"body":{"modules/LoggerModule.html":{}}}],["loggermodule",{"_index":264,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"index.html":{},"modules.html":{}}}],["logginginterceptor",{"_index":2098,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{}}}],["login",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(dto",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":349,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["loginresult",{"_index":1855,"title":{"classes/LoginResult.html":{},"classes/LoginResult-1.html":{}},"body":{"classes/ImageCaptcha.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{}}}],["logintype",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["logintypeenum",{"_index":2113,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["loglevel",{"_index":2237,"title":{},"body":{"injectables/MyLogger.html":{},"miscellaneous/enumerations.html":{}}}],["loglevel.error",{"_index":2260,"title":{},"body":{"injectables/MyLogger.html":{}}}],["logout",{"_index":74,"title":{},"body":{"controllers/AccountController.html":{}}}],["logout(@authuser",{"_index":124,"title":{},"body":{"controllers/AccountController.html":{}}}],["logout(user",{"_index":78,"title":{},"body":{"controllers/AccountController.html":{}}}],["logs/.audit/app",{"_index":2263,"title":{},"body":{"injectables/MyLogger.html":{}}}],["logs/.audit/app.json",{"_index":2259,"title":{},"body":{"injectables/MyLogger.html":{}}}],["logs/app",{"_index":2261,"title":{},"body":{"injectables/MyLogger.html":{}}}],["logs/app.%date%.log",{"_index":2251,"title":{},"body":{"injectables/MyLogger.html":{}}}],["lookup",{"_index":1369,"title":{},"body":{"controllers/FileController.html":{}}}],["lookup(ext",{"_index":1391,"title":{},"body":{"controllers/FileController.html":{}}}],["m",{"_index":2710,"title":{},"body":{"classes/RedisIoAdapter.html":{},"classes/RedisSubPub.html":{}}}],["mailer",{"_index":1707,"title":{},"body":{"modules/HelperModule.html":{}}}],["mailer.service",{"_index":2133,"title":{},"body":{"modules/MailerModule.html":{}}}],["mailer/mailer.module",{"_index":1692,"title":{},"body":{"modules/HelperModule.html":{}}}],["mailermodule",{"_index":1685,"title":{"modules/MailerModule.html":{}},"body":{"modules/HelperModule.html":{},"modules/MailerModule.html":{},"index.html":{},"modules.html":{}}}],["mailerservice",{"_index":1275,"title":{"injectables/MailerService.html":{}},"body":{"controllers/EmailController.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"index.html":{}}}],["manage",{"_index":566,"title":{},"body":{"classes/BaseAbility.html":{},"miscellaneous/enumerations.html":{}}}],["manager",{"_index":636,"title":{},"body":{"modules/CacheModule.html":{},"injectables/CacheService.html":{},"dependencies.html":{}}}],["map",{"_index":446,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TransformInterceptor.html":{}}}],["map((data",{"_index":3086,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["mapping",{"_index":1300,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["maptoroutertype",{"_index":2886,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{},"miscellaneous/typealiases.html":{}}}],["matching",{"_index":66,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CaslModule.html":{},"classes/CheckCodeDto.html":{},"injectables/CollectionAbility.html":{},"controllers/CollectionController.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"modules/CollectionModule.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"modules/CommentModule.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"classes/HistoryPagerDto.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"classes/IdDto.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"modules/SocketModule.html":{},"classes/SubCommentPagerDto.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"classes/TodoDto.html":{},"modules/TodoModule.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFollowEvent.html":{},"modules/UserModule.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/UserUpdateDto.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"interfaces/myError.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":1397,"title":{},"body":{"controllers/FileController.html":{}}}],["maxdatacenterid",{"_index":2809,"title":{},"body":{"classes/Snowflake.html":{}}}],["maxfiles",{"_index":2211,"title":{},"body":{"injectables/MyLogger.html":{}}}],["maximumfiveverificationcodesperday",{"_index":3405,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["maxlisteners",{"_index":1704,"title":{},"body":{"modules/HelperModule.html":{}}}],["maxsequence",{"_index":2810,"title":{},"body":{"classes/Snowflake.html":{}}}],["maxworkerid",{"_index":2811,"title":{},"body":{"classes/Snowflake.html":{}}}],["memory",{"_index":1648,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1640,"title":{},"body":{"controllers/HealthController.html":{}}}],["menu(@authuser",{"_index":128,"title":{},"body":{"controllers/AccountController.html":{}}}],["message",{"_index":198,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BaseGateway.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"classes/CheckCodeDto.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"interfaces/IBaseResponse.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptchaDto.html":{},"injectables/MyLogger.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"classes/PasswordUpdateDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"interfaces/myError.html":{}}}],["message.substring(message.indexof",{"_index":1336,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["meta",{"_index":928,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/FollowService.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/LikeService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotificationService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"miscellaneous/typealiases.html":{}}}],["metadata",{"_index":2645,"title":{},"body":{"injectables/ParseIntPipe.html":{},"dependencies.html":{}}}],["methods",{"_index":12,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/IdempotenceInterceptor.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"controllers/NoteController.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/Snowflake.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{}}}],["middleware",{"_index":2893,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["milliseconds",{"_index":661,"title":{},"body":{"injectables/CacheService.html":{}}}],["mime",{"_index":1370,"title":{},"body":{"controllers/FileController.html":{}}}],["mimetype",{"_index":1390,"title":{},"body":{"controllers/FileController.html":{}}}],["miscellaneous",{"_index":3338,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":3467,"title":{},"body":{"properties.html":{}}}],["mm",{"_index":2254,"title":{},"body":{"injectables/MyLogger.html":{}}}],["mobile",{"_index":2115,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["model",{"_index":57,"title":{},"body":{"injectables/AbilityService.html":{},"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{},"controllers/NoteController.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{},"controllers/UserController.html":{}}}],["model/response.model",{"_index":192,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["modelcreateinput",{"_index":3498,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modelfindinput",{"_index":3499,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modelinputdata",{"_index":3500,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modelinputwhere",{"_index":3501,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modelname",{"_index":41,"title":{},"body":{"injectables/AbilityService.html":{},"miscellaneous/typealiases.html":{}}}],["module",{"_index":242,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["modules",{"_index":244,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{}}}],["modules/auth/auth.module",{"_index":301,"title":{},"body":{"modules/AppModule.html":{},"modules/SocketModule.html":{}}}],["modules/auth/guards/jwt",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/casl/casl.module",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/collection/collection.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/comment/comment.module",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/file/file.module",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/health/health.module",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/history/history.module",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/interact/interact.module",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/mailer",{"_index":2129,"title":{},"body":{"modules/MailerModule.html":{},"injectables/MailerService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":2131,"title":{},"body":{"modules/MailerModule.html":{}}}],["modules/note",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/note/note.module",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/notification/notification.module",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1658,"title":{},"body":{"controllers/HealthController.html":{}}}],["multer",{"_index":3296,"title":{},"body":{"dependencies.html":{}}}],["multipart/form",{"_index":3381,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mutation(async",{"_index":975,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{}}}],["mychannel",{"_index":2780,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["myerror",{"_index":194,"title":{"interfaces/myError.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["myerror)?.message",{"_index":218,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["myerror)?.status",{"_index":214,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["myerror)?.statuscode",{"_index":215,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["mylogger",{"_index":2095,"title":{"injectables/MyLogger.html":{}},"body":{"modules/LoggerModule.html":{},"injectables/MyLogger.html":{},"index.html":{}}}],["mysql",{"_index":3303,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":23,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/IdempotenceInterceptor.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"classes/Snowflake.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserFollowEvent.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{}}}],["namespace",{"_index":160,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"classes/WebEventsGateway.html":{}}}],["nanoid",{"_index":1373,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestbullmodule",{"_index":620,"title":{},"body":{"modules/BullModule.html":{}}}],["nestbullmodule.forrootasync",{"_index":623,"title":{},"body":{"modules/BullModule.html":{}}}],["nestcachemodule",{"_index":634,"title":{},"body":{"modules/CacheModule.html":{}}}],["nestcachemodule.registerasync",{"_index":640,"title":{},"body":{"modules/CacheModule.html":{}}}],["nestfastifyapplication",{"_index":2870,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["nestinterceptor",{"_index":1800,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":590,"title":{},"body":{"classes/BatchDeleteDto.html":{},"classes/CheckCodeDto.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"modules/DatabaseModule.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{},"classes/HistoryPagerDto.html":{},"classes/IdDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"classes/InteractPagerDto.html":{},"classes/LoginDto.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/PagerDto.html":{},"classes/PasswordUpdateDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{},"dependencies.html":{}}}],["nestjs/axios",{"_index":1678,"title":{},"body":{"modules/HealthModule.html":{},"modules/HelperModule.html":{},"dependencies.html":{}}}],["nestjs/bull",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"modules/BullModule.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"dependencies.html":{}}}],["nestjs/cache",{"_index":635,"title":{},"body":{"modules/CacheModule.html":{},"injectables/CacheService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":39,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BizException.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CaslModule.html":{},"injectables/CollectionAbility.html":{},"controllers/CollectionController.html":{},"modules/CollectionModule.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"controllers/NoteController.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"modules/NoteTagModule.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"modules/SocketModule.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"dependencies.html":{},"interfaces/myError.html":{}}}],["nestjs/config",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CronService.html":{},"injectables/FileService.html":{},"modules/MailerModule.html":{},"injectables/MyLogger.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":40,"title":{},"body":{"injectables/AbilityService.html":{},"modules/AppModule.html":{},"modules/CaslModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":396,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/FollowService.html":{},"modules/HelperModule.html":{},"interfaces/IAuthGateway.html":{},"injectables/InteractListener.html":{},"injectables/NotePublicService.html":{},"injectables/NotificationListener.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":150,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"interfaces/IAuthGateway.html":{},"injectables/TokenService.html":{},"classes/WebEventsGateway.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":479,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2706,"title":{},"body":{"classes/RedisIoAdapter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":1689,"title":{},"body":{"modules/HelperModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":102,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/CaptchaController.html":{},"controllers/CollectionController.html":{},"controllers/CommentController.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"controllers/GoogleController.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"interfaces/IBaseResponse.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"classes/ResOp.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1642,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":727,"title":{},"body":{"controllers/CaptchaController.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"modules/HelperModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":153,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter-1.html":{},"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"classes/WebEventsGateway.html":{},"dependencies.html":{}}}],["nestmailermodule",{"_index":2128,"title":{},"body":{"modules/MailerModule.html":{}}}],["nestmailermodule.forrootasync",{"_index":2134,"title":{},"body":{"modules/MailerModule.html":{}}}],["nestmailerservice",{"_index":2152,"title":{},"body":{"injectables/MailerService.html":{}}}],["nestredismodule",{"_index":2727,"title":{},"body":{"modules/RedisModule.html":{}}}],["nestredismodule.forrootasync",{"_index":2733,"title":{},"body":{"modules/RedisModule.html":{}}}],["new",{"_index":35,"title":{},"body":{"injectables/AbilityService.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CommentAbility.html":{},"injectables/CommentService.html":{},"injectables/CronService.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"injectables/HistoryService.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"modules/RedisModule.html":{},"classes/RedisSubPub.html":{},"classes/Snowflake.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoAbility.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"interfaces/myError.html":{}}}],["newlistener",{"_index":1702,"title":{},"body":{"modules/HelperModule.html":{}}}],["newpassword",{"_index":2657,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserService.html":{}}}],["news",{"_index":3442,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["next",{"_index":411,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseAbility.html":{},"injectables/CacheService.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle",{"_index":1821,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":1839,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nextid",{"_index":2818,"title":{},"body":{"classes/Snowflake.html":{}}}],["nexttick",{"_index":2868,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["nexttick(async",{"_index":2930,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["nickname",{"_index":1160,"title":{},"body":{"injectables/CommentService.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserService.html":{}}}],["node:fs",{"_index":1462,"title":{},"body":{"injectables/FileService.html":{}}}],["node:os",{"_index":2849,"title":{},"body":{"classes/Snowflake.html":{}}}],["node:path",{"_index":1363,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"modules/MailerModule.html":{}}}],["node:process",{"_index":2869,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["node:stream",{"_index":1464,"title":{},"body":{"injectables/FileService.html":{}}}],["node:util",{"_index":1466,"title":{},"body":{"injectables/FileService.html":{}}}],["nodemailer",{"_index":3308,"title":{},"body":{"dependencies.html":{}}}],["noise",{"_index":752,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["nonnullable",{"_index":3519,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nopermission",{"_index":3389,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["note",{"_index":559,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionService.html":{},"classes/CommentCreateEvent.html":{},"injectables/CountingService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractListener.html":{},"injectables/LikeService.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotificationListener.html":{},"miscellaneous/enumerations.html":{}}}],["note.ability",{"_index":2364,"title":{},"body":{"modules/NoteModule.html":{}}}],["note.collect",{"_index":3437,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["note.constant",{"_index":2411,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["note.controller",{"_index":2365,"title":{},"body":{"modules/NoteModule.html":{}}}],["note.cover",{"_index":2578,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["note.dislike",{"_index":3435,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["note.dto",{"_index":2308,"title":{},"body":{"controllers/NoteController.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTrpcRouter.html":{}}}],["note.id",{"_index":1899,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NotificationListener.html":{}}}],["note.like",{"_index":3433,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["note.listener",{"_index":2366,"title":{},"body":{"modules/NoteModule.html":{}}}],["note.public.service",{"_index":2367,"title":{},"body":{"modules/NoteModule.html":{},"injectables/NoteTrpcRouter.html":{}}}],["note.service",{"_index":2309,"title":{},"body":{"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteTrpcRouter.html":{}}}],["note.title",{"_index":2577,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["note.trpc",{"_index":2368,"title":{},"body":{"modules/NoteModule.html":{}}}],["note.uncollect",{"_index":3439,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["note.userid",{"_index":2579,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["note/events/note",{"_index":910,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["note/note.constant",{"_index":913,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["note/note.module",{"_index":1731,"title":{},"body":{"modules/HistoryModule.html":{}}}],["note/note.public.service",{"_index":1763,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["noteability",{"_index":2280,"title":{"injectables/NoteAbility.html":{}},"body":{"injectables/NoteAbility.html":{},"modules/NoteModule.html":{},"index.html":{}}}],["notecollect",{"_index":3436,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notecollectevent",{"_index":909,"title":{"classes/NoteCollectEvent.html":{}},"body":{"injectables/CollectionService.html":{},"injectables/InteractListener.html":{},"classes/NoteCollectEvent.html":{},"injectables/NotificationListener.html":{}}}],["notecontroller",{"_index":2288,"title":{"controllers/NoteController.html":{}},"body":{"controllers/NoteController.html":{},"modules/NoteModule.html":{}}}],["notedislike",{"_index":3434,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notedto",{"_index":2291,"title":{"classes/NoteDto.html":{}},"body":{"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["noteevents",{"_index":912,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/InteractListener.html":{},"injectables/NotePublicService.html":{},"injectables/NotificationListener.html":{},"miscellaneous/enumerations.html":{}}}],["noteid",{"_index":1751,"title":{},"body":{"injectables/HistoryService.html":{}}}],["noteids",{"_index":1767,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["noteinputschema",{"_index":2331,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["notelike",{"_index":3432,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notelikeevent",{"_index":1885,"title":{"classes/NoteLikeEvent.html":{}},"body":{"injectables/InteractListener.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NotificationListener.html":{}}}],["notelistener",{"_index":2347,"title":{"injectables/NoteListener.html":{}},"body":{"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"index.html":{}}}],["notemodule",{"_index":265,"title":{"modules/NoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HistoryModule.html":{},"modules/NoteModule.html":{},"index.html":{},"modules.html":{}}}],["notenotfound",{"_index":3407,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["noteoptionaldefaultsschema",{"_index":2330,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["notepagerdto",{"_index":2299,"title":{"classes/NotePagerDto.html":{}},"body":{"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["notepublicservice",{"_index":1759,"title":{"injectables/NotePublicService.html":{}},"body":{"injectables/HistoryTrpcRouter.html":{},"modules/NoteModule.html":{},"injectables/NotePublicService.html":{},"injectables/NoteTrpcRouter.html":{},"index.html":{}}}],["notes",{"_index":1770,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{},"controllers/NoteController.html":{}}}],["notesearchdto",{"_index":2343,"title":{"classes/NoteSearchDto.html":{}},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["noteselect",{"_index":2410,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["noteservice",{"_index":1758,"title":{"injectables/NoteService.html":{}},"body":{"injectables/HistoryTrpcRouter.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"injectables/NoteTrpcRouter.html":{},"index.html":{}}}],["notetag",{"_index":560,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/NoteTagTrpcRouter.html":{}}}],["notetagdto",{"_index":2456,"title":{"classes/NoteTagDto.html":{}},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"classes/NoteTagUpdateDto.html":{}}}],["notetaginputschema",{"_index":2461,"title":{},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{}}}],["notetagmodule",{"_index":266,"title":{"modules/NoteTagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NoteTagModule.html":{},"index.html":{},"modules.html":{}}}],["notetagoptionaldefaultsschema",{"_index":2460,"title":{},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{}}}],["notetagoptionaldefaultsschema.pick",{"_index":2462,"title":{},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{}}}],["notetagpagerdto",{"_index":2465,"title":{"classes/NoteTagPagerDto.html":{}},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{}}}],["notetagservice",{"_index":2472,"title":{"injectables/NoteTagService.html":{}},"body":{"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{}}}],["notetagtrpcrouter",{"_index":2487,"title":{"injectables/NoteTagTrpcRouter.html":{}},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["notetagupdatedto",{"_index":2463,"title":{"classes/NoteTagUpdateDto.html":{}},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{}}}],["notetrpcrouter",{"_index":2359,"title":{"injectables/NoteTrpcRouter.html":{}},"body":{"modules/NoteModule.html":{},"injectables/NoteTrpcRouter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["notetype",{"_index":3354,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["noteuncollect",{"_index":3438,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["noteupdatedto",{"_index":2303,"title":{"classes/NoteUpdateDto.html":{}},"body":{"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["notfoundexception",{"_index":708,"title":{},"body":{"classes/CannotFindException.html":{},"injectables/FileService.html":{}}}],["notfoundmessage",{"_index":712,"title":{},"body":{"classes/CannotFindException.html":{}}}],["notifactiontrpcrouter",{"_index":2533,"title":{"injectables/NotifactionTrpcRouter.html":{}},"body":{"injectables/NotifactionTrpcRouter.html":{},"modules/NotificationModule.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["notification",{"_index":561,"title":{},"body":{"classes/BaseAbility.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["notification.controller",{"_index":2596,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.dto",{"_index":2539,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["notification.id",{"_index":2620,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notification.listener",{"_index":2597,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.service",{"_index":2540,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{}}}],["notification.trpc",{"_index":2598,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notificationaction",{"_index":1244,"title":{},"body":{"classes/CreateNotificationDto.html":{},"injectables/NotificationListener.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{}}}],["notificationaction.collect",{"_index":2581,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["notificationaction.comment",{"_index":2582,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["notificationaction.follow",{"_index":2589,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["notificationaction.like",{"_index":2575,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["notificationcontroller",{"_index":2546,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{}}}],["notificationinputschema",{"_index":1246,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/NotificationPagerDto.html":{}}}],["notificationlistener",{"_index":2559,"title":{"injectables/NotificationListener.html":{}},"body":{"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"index.html":{}}}],["notificationmodule",{"_index":267,"title":{"modules/NotificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationModule.html":{},"index.html":{},"modules.html":{}}}],["notificationpagerdto",{"_index":1253,"title":{"classes/NotificationPagerDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{}}}],["notificationpagerschema",{"_index":1251,"title":{},"body":{"classes/CreateNotificationDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"classes/NotificationPagerDto.html":{}}}],["notificationschema",{"_index":1245,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/NotificationPagerDto.html":{}}}],["notificationschema.pick",{"_index":1247,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/NotificationPagerDto.html":{}}}],["notificationservice",{"_index":2535,"title":{"injectables/NotificationService.html":{}},"body":{"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"index.html":{}}}],["notificationsourcetype",{"_index":2572,"title":{},"body":{"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{}}}],["notificationsourcetype.comment",{"_index":2584,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["notificationsourcetype.note",{"_index":2576,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["notificationsourcetype.user",{"_index":2590,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["notifycallback",{"_index":3502,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["notifyfunction",{"_index":3503,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nouserfollowing",{"_index":3411,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["now",{"_index":1533,"title":{},"body":{"injectables/FollowService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{}}}],["now.endof('day').diff(now",{"_index":2172,"title":{},"body":{"injectables/MailerService.html":{}}}],["now}ms",{"_index":2109,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["null",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"injectables/FileService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/LikeService.html":{},"classes/PagerDto.html":{},"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":196,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CacheService.html":{},"injectables/CaptchaService.html":{},"injectables/CountingService.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"interfaces/IBaseResponse.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"classes/ResOp.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/ViewService.html":{},"interfaces/myError.html":{},"miscellaneous/typealiases.html":{}}}],["number(await",{"_index":2189,"title":{},"body":{"injectables/MailerService.html":{}}}],["number(sum",{"_index":1234,"title":{},"body":{"injectables/CountingService.html":{}}}],["number.isnan(val",{"_index":2650,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["number.parseint(count",{"_index":2068,"title":{},"body":{"injectables/LikeService.html":{}}}],["number.parseint(part",{"_index":2852,"title":{},"body":{"classes/Snowflake.html":{}}}],["number.parseint(value",{"_index":2649,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["oauth20",{"_index":1598,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["obj",{"_index":1844,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/NotificationService.html":{},"injectables/TransformInterceptor.html":{}}}],["obj.uuid",{"_index":1847,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["obj[key",{"_index":2628,"title":{},"body":{"injectables/NotificationService.html":{}}}],["object",{"_index":1781,"title":{},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["object.assign",{"_index":1322,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["object.assign(obj",{"_index":1850,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["object.assign(this",{"_index":1058,"title":{},"body":{"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{},"classes/UserFollowEvent.html":{}}}],["object.keys(this.errorcodesstatusmapping).includes(exception.code",{"_index":1331,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["object.values(config",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["objects/${type}/${name",{"_index":1494,"title":{},"body":{"injectables/FileService.html":{}}}],["objwithkey",{"_index":3504,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observable",{"_index":2101,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["of(`/${namespace",{"_index":459,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["ok",{"_index":228,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/CommentService.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotePublicService.html":{},"classes/ResOp.html":{},"interfaces/myError.html":{}}}],["oldpassword",{"_index":2655,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserService.html":{}}}],["omit",{"_index":3077,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["omit(data",{"_index":3089,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["omit(defaultschemaomit",{"_index":2340,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["omit_response_protect_key",{"_index":3082,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["omitkeys",{"_index":3084,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["onerror",{"_index":2926,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["onevent",{"_index":395,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["onevent(commentevents.commentcreate",{"_index":1876,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["onevent(commentevents.commentdislike",{"_index":1909,"title":{},"body":{"injectables/InteractListener.html":{}}}],["onevent(commentevents.commentlike",{"_index":1908,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["onevent(commentevents.commentlike)@onevent(commentevents.commentdislike",{"_index":1879,"title":{},"body":{"injectables/InteractListener.html":{}}}],["onevent(eventbusevents.tokenexpired",{"_index":447,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["onevent(interactevents.userfollow",{"_index":2570,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["onevent(noteevents.notecollect",{"_index":1906,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NotificationListener.html":{}}}],["onevent(noteevents.notecollect)@onevent(noteevents.noteuncollect",{"_index":1882,"title":{},"body":{"injectables/InteractListener.html":{}}}],["onevent(noteevents.notedislike",{"_index":1897,"title":{},"body":{"injectables/InteractListener.html":{}}}],["onevent(noteevents.notedislike)@onevent(noteevents.notelike",{"_index":1886,"title":{},"body":{"injectables/InteractListener.html":{}}}],["onevent(noteevents.notelike",{"_index":1898,"title":{},"body":{"injectables/InteractListener.html":{},"injectables/NoteListener.html":{},"injectables/NotificationListener.html":{}}}],["onevent(noteevents.noteuncollect",{"_index":1907,"title":{},"body":{"injectables/InteractListener.html":{}}}],["ongatewayconnection",{"_index":136,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"classes/WebEventsGateway.html":{}}}],["ongatewaydisconnect",{"_index":137,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"classes/WebEventsGateway.html":{}}}],["onmoduleinit",{"_index":14,"title":{},"body":{"injectables/AbilityService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["opt",{"_index":970,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["optional",{"_index":25,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleStrategy.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IBaseResponse.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"classes/Snowflake.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserFollowEvent.html":{},"classes/UserNotePagerDto.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["options",{"_index":208,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/CacheService.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"modules/MailerModule.html":{},"injectables/MyLogger.html":{},"classes/RedisIoAdapter.html":{},"interfaces/myError.html":{}}}],["options.generatekey",{"_index":1827,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["options.generatekey(request",{"_index":1828,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["opts",{"_index":2895,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["opts.ctx.req.headers?.authorization",{"_index":2896,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["opts.ctx.user",{"_index":2900,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["opts.next",{"_index":2901,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["or(z.boolean",{"_index":2637,"title":{},"body":{"classes/PagerDto.html":{}}}],["or(z.enum(['asc",{"_index":2346,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/PagerDto.html":{},"classes/UserNotePagerDto.html":{}}}],["or(z.null",{"_index":2636,"title":{},"body":{"classes/PagerDto.html":{}}}],["order",{"_index":3452,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["orderby",{"_index":1161,"title":{},"body":{"injectables/CommentService.html":{},"injectables/HistoryService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NotificationService.html":{}}}],["os",{"_index":2848,"title":{},"body":{"classes/Snowflake.html":{}}}],["otherinfo",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["out",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["override",{"_index":456,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["overview",{"_index":3453,"title":{"index.html":{}},"body":{"index.html":{}}}],["overwrite",{"_index":1316,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["p2000",{"_index":1306,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["p2002",{"_index":1308,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["p2022",{"_index":1320,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["p2025",{"_index":1310,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["package",{"_index":3245,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":996,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{},"controllers/FileController.html":{},"controllers/HistoryController.html":{},"injectables/NoteTagService.html":{},"classes/PagerDto.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["page(@query",{"_index":1033,"title":{},"body":{"controllers/CommentController.html":{},"controllers/HistoryController.html":{}}}],["page(dto",{"_index":1014,"title":{},"body":{"controllers/CommentController.html":{},"controllers/HistoryController.html":{}}}],["pagerdto",{"_index":1355,"title":{"classes/PagerDto.html":{}},"body":{"controllers/FileController.html":{},"injectables/FollowService.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/LikeService.html":{},"injectables/NotePublicService.html":{},"classes/PagerDto.html":{}}}],["paginate",{"_index":876,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/HistoryService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NotificationService.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["paginate(dto",{"_index":901,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/HistoryService.html":{},"injectables/NoteService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["paginate(undefined",{"_index":2477,"title":{},"body":{"injectables/NoteTagService.html":{},"injectables/TodoService.html":{}}}],["paginatesubcomment",{"_index":1103,"title":{},"body":{"injectables/CommentService.html":{}}}],["paginatesubcomment(dto",{"_index":1126,"title":{},"body":{"injectables/CommentService.html":{}}}],["pagination",{"_index":1132,"title":{},"body":{"injectables/CommentService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{},"dependencies.html":{}}}],["param",{"_index":1018,"title":{},"body":{"controllers/CommentController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"injectables/LikeService.html":{},"controllers/NoteController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleStrategy.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/IdempotenceInterceptor.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"classes/Snowflake.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserFollowEvent.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{}}}],["params",{"_index":1349,"title":{},"body":{"controllers/FileController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["parent",{"_index":1158,"title":{},"body":{"injectables/CommentService.html":{}}}],["parentcomment",{"_index":1167,"title":{},"body":{"injectables/CommentService.html":{}}}],["parentcomment.userid",{"_index":1168,"title":{},"body":{"injectables/CommentService.html":{}}}],["parentid",{"_index":1084,"title":{},"body":{"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"injectables/InteractListener.html":{},"classes/SubCommentPagerDto.html":{}}}],["parseintpipe",{"_index":2640,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{}}}],["parser",{"_index":3285,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":1053,"title":{},"body":{"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserFollowEvent.html":{},"injectables/UserService.html":{}}}],["parts",{"_index":3062,"title":{},"body":{"injectables/TokenService.html":{}}}],["parts.length",{"_index":3064,"title":{},"body":{"injectables/TokenService.html":{}}}],["passport",{"_index":1596,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":478,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1592,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2027,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":75,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/BullModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordUpdateDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"classes/UserPasswordDto.html":{},"injectables/UserService.html":{}}}],["password(@body",{"_index":3128,"title":{},"body":{"controllers/UserController.html":{}}}],["password(dto",{"_index":3110,"title":{},"body":{"controllers/UserController.html":{}}}],["password(user",{"_index":85,"title":{},"body":{"controllers/AccountController.html":{}}}],["passwordfield",{"_index":2091,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passwordmismatch",{"_index":3399,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["passwordupdatedto",{"_index":87,"title":{"classes/PasswordUpdateDto.html":{}},"body":{"controllers/AccountController.html":{},"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserService.html":{}}}],["path",{"_index":223,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/HealthController.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"interfaces/myError.html":{}}}],["path.extname(file.filename",{"_index":1407,"title":{},"body":{"controllers/FileController.html":{}}}],["path.extname(name",{"_index":1389,"title":{},"body":{"controllers/FileController.html":{}}}],["path.resolve(static_file_dir",{"_index":1475,"title":{},"body":{"injectables/FileService.html":{}}}],["path_1",{"_index":1489,"title":{},"body":{"injectables/FileService.html":{}}}],["payload",{"_index":2034,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TokenService.html":{},"miscellaneous/typealiases.html":{}}}],["payload.id",{"_index":3052,"title":{},"body":{"injectables/TokenService.html":{}}}],["pendingmessage",{"_index":1814,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["permissions(@authuser",{"_index":131,"title":{},"body":{"controllers/AccountController.html":{}}}],["phone",{"_index":806,"title":{},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateDto.html":{}}}],["photo",{"_index":3424,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["picture",{"_index":1589,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["pipeline",{"_index":1463,"title":{},"body":{"injectables/FileService.html":{}}}],["pipetransform",{"_index":2648,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["playground",{"_index":2935,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{},"dependencies.html":{}}}],["playground/handlers/fastify",{"_index":2876,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["playgroundendpoint",{"_index":2934,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["pluralize",{"_index":3314,"title":{},"body":{"dependencies.html":{}}}],["police",{"_index":2902,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["policy",{"_index":1025,"title":{},"body":{"controllers/CommentController.html":{},"controllers/NoteController.html":{},"guards/PolicyGuard.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["policy({action",{"_index":3108,"title":{},"body":{"controllers/UserController.html":{}}}],["policy({model",{"_index":1005,"title":{},"body":{"controllers/CommentController.html":{}}}],["policy.decortor",{"_index":2680,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["policyguard",{"_index":2306,"title":{"guards/PolicyGuard.html":{}},"body":{"controllers/NoteController.html":{},"guards/PolicyGuard.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["policyobject",{"_index":2679,"title":{},"body":{"guards/PolicyGuard.html":{},"miscellaneous/typealiases.html":{}}}],["port",{"_index":627,"title":{},"body":{"modules/BullModule.html":{},"classes/RedisIoAdapter.html":{},"classes/RedisSubPub.html":{}}}],["post",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["post('/upload",{"_index":1361,"title":{},"body":{"controllers/FileController.html":{}}}],["post(':id/like",{"_index":1042,"title":{},"body":{"controllers/CommentController.html":{}}}],["post(':id/like')@apioperation({summary",{"_index":1008,"title":{},"body":{"controllers/CommentController.html":{}}}],["post(':id/password",{"_index":3127,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':id/password')@apioperation({summary",{"_index":3111,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@protectkeys(['password",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('send",{"_index":1279,"title":{},"body":{"controllers/EmailController.html":{}}}],["post('send')@public()@throttle({default",{"_index":1273,"title":{},"body":{"controllers/EmailController.html":{}}}],["post()@apioperation({summary",{"_index":998,"title":{},"body":{"controllers/CommentController.html":{},"controllers/UserController.html":{}}}],["post()@policy({model",{"_index":2292,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["prefix",{"_index":71,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"modules/BullModule.html":{},"controllers/CaptchaController.html":{},"controllers/CollectionController.html":{},"controllers/CommentController.html":{},"controllers/EmailController.html":{},"controllers/GoogleController.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{},"miscellaneous/typealiases.html":{}}}],["prisma",{"_index":867,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"injectables/FollowService.html":{},"controllers/HealthController.html":{},"injectables/HistoryService.html":{},"injectables/LikeService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NotificationService.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma.extension",{"_index":1266,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["prisma.modelname",{"_index":3520,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":1296,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["prisma.usercreateinput",{"_index":1580,"title":{},"body":{"controllers/GoogleController.html":{}}}],["prisma_client",{"_index":1265,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["prismaclient",{"_index":1643,"title":{},"body":{"controllers/HealthController.html":{}}}],["prismaclientexceptionfilter",{"_index":289,"title":{"classes/PrismaClientExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["prismaclientexceptionfilter(httpadapter",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["prismahealthindicator",{"_index":1641,"title":{},"body":{"controllers/HealthController.html":{}}}],["prismaservice",{"_index":1268,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["prismasubjects",{"_index":573,"title":{},"body":{"classes/BaseAbility.html":{},"miscellaneous/typealiases.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/Snowflake.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["procedure",{"_index":2907,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["procedureauth",{"_index":964,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["procedureauth.query(async",{"_index":2544,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["process",{"_index":1657,"title":{},"body":{"controllers/HealthController.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["process({name",{"_index":1941,"title":{},"body":{"classes/InteractProcessor.html":{}}}],["process.on('uncaughtexception",{"_index":234,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["process.on('unhandledrejection",{"_index":231,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["processor",{"_index":1945,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["processor(interact_queue",{"_index":1947,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["profile",{"_index":76,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/UserTrpcRouter.html":{}}}],["profile(@authuser",{"_index":120,"title":{},"body":{"controllers/AccountController.html":{}}}],["profile(user",{"_index":90,"title":{},"body":{"controllers/AccountController.html":{}}}],["profile._json",{"_index":1613,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["projection",{"_index":3510,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["promise",{"_index":84,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"controllers/EmailController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IAuthGateway.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LikeService.html":{},"injectables/MailerService.html":{},"guards/PolicyGuard.html":{},"injectables/UserService.html":{},"injectables/ViewService.html":{},"miscellaneous/typealiases.html":{}}}],["promise.all",{"_index":1383,"title":{},"body":{"controllers/FileController.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/LikeService.html":{},"injectables/NotificationService.html":{}}}],["promise.all(items.map(item",{"_index":1189,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{}}}],["promisify",{"_index":1465,"title":{},"body":{"injectables/FileService.html":{}}}],["promisify(pipeline",{"_index":1474,"title":{},"body":{"injectables/FileService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"injectables/AbilityService.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"interfaces/AuthGatewayOptions.html":{},"classes/BizException.html":{},"injectables/CacheService.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CronService.html":{},"interfaces/GoogleProfile.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IBaseResponse.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/NotificationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"classes/Snowflake.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/UserFollowEvent.html":{},"injectables/UserTrpcRouter.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{},"properties.html":{}}}],["protected",{"_index":138,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"injectables/MyLogger.html":{},"classes/WebEventsGateway.html":{}}}],["protectkeys",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["protectkeys(['password",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["provide",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"modules/RedisModule.html":{}}}],["provideprismaclientexceptionfilter",{"_index":1340,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["provider",{"_index":475,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{}}}],["provider.instance",{"_index":61,"title":{},"body":{"injectables/AbilityService.html":{}}}],["provider.metatype",{"_index":59,"title":{},"body":{"injectables/AbilityService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["providers",{"_index":53,"title":{},"body":{"injectables/AbilityService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["proxy",{"_index":1608,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["pubclient",{"_index":2714,"title":{},"body":{"classes/RedisIoAdapter.html":{},"classes/RedisSubPub.html":{}}}],["pubclient.duplicate",{"_index":2773,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["public",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseGateway.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"controllers/GoogleController.html":{},"controllers/HealthController.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/Snowflake.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"classes/UserFollowEvent.html":{}}}],["public_key",{"_index":2012,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["publish",{"_index":2736,"title":{},"body":{"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{}}}],["publish(event",{"_index":2741,"title":{},"body":{"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{}}}],["publishtime",{"_index":2336,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["pump",{"_index":1473,"title":{},"body":{"injectables/FileService.html":{}}}],["pump(data",{"_index":1486,"title":{},"body":{"injectables/FileService.html":{}}}],["pureability",{"_index":553,"title":{},"body":{"classes/BaseAbility.html":{},"miscellaneous/typealiases.html":{}}}],["put",{"_index":99,"title":{},"body":{"controllers/AccountController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":2320,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["put(':id')@apioperation({summary",{"_index":3114,"title":{},"body":{"controllers/UserController.html":{}}}],["put(':id')@policy({model",{"_index":2304,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["put('password",{"_index":88,"title":{},"body":{"controllers/AccountController.html":{}}}],["put('profile",{"_index":96,"title":{},"body":{"controllers/AccountController.html":{}}}],["query",{"_index":724,"title":{},"body":{"controllers/CaptchaController.html":{},"controllers/CommentController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"controllers/HistoryController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["query(async",{"_index":969,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["queue",{"_index":1872,"title":{},"body":{"injectables/InteractListener.html":{}}}],["queueprocess",{"_index":1893,"title":{},"body":{"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"miscellaneous/enumerations.html":{}}}],["queueprocess.updatecommentcount",{"_index":1912,"title":{},"body":{"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["queueprocess.updateitemcount",{"_index":1903,"title":{},"body":{"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["randomvalue",{"_index":2169,"title":{},"body":{"injectables/MailerService.html":{}}}],["randomvalue(4",{"_index":2167,"title":{},"body":{"injectables/MailerService.html":{}}}],["rate",{"_index":1695,"title":{},"body":{"modules/HelperModule.html":{}}}],["rawinput",{"_index":2904,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["read",{"_index":568,"title":{},"body":{"classes/BaseAbility.html":{},"miscellaneous/enumerations.html":{}}}],["readable",{"_index":1457,"title":{},"body":{"injectables/FileService.html":{}}}],["readonly",{"_index":50,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"injectables/CaptchaService.html":{},"controllers/CollectionController.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CronService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/LikeService.html":{},"injectables/MailerService.html":{},"controllers/NoteController.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"guards/PolicyGuard.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisPubSubService.html":{},"classes/Snowflake.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["ready",{"_index":682,"title":{},"body":{"injectables/CacheService.html":{}}}],["readylog",{"_index":2734,"title":{},"body":{"modules/RedisModule.html":{}}}],["reason",{"_index":232,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["recipientid",{"_index":1051,"title":{},"body":{"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"classes/CreateNotificationDto.html":{},"injectables/NotificationListener.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{}}}],["recommend",{"_index":3440,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["record",{"_index":31,"title":{},"body":{"injectables/AbilityService.html":{},"injectables/CacheService.html":{},"controllers/FileController.html":{}}}],["recursive",{"_index":1483,"title":{},"body":{"injectables/FileService.html":{}}}],["redis",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{},"modules/BullModule.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/FollowService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/LikeService.html":{},"injectables/MailerService.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"injectables/TokenService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/ViewService.html":{},"dependencies.html":{}}}],["redis.constant",{"_index":2730,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{}}}],["redis.del(idempotencekey",{"_index":1843,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["redis.get",{"_index":1835,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["redis.get(cachekey",{"_index":697,"title":{},"body":{"injectables/CacheService.html":{}}}],["redis.set(cachekey",{"_index":701,"title":{},"body":{"injectables/CacheService.html":{}}}],["redis.set(idempotencekey",{"_index":1838,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["redis_pubsub",{"_index":2707,"title":{},"body":{"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{}}}],["redisadapter",{"_index":2717,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["redisclient",{"_index":648,"title":{},"body":{"injectables/CacheService.html":{}}}],["redisconfig",{"_index":2759,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["redisioadapter",{"_index":2696,"title":{"classes/RedisIoAdapter.html":{}},"body":{"classes/RedisIoAdapter.html":{}}}],["redisioadapterkey",{"_index":671,"title":{},"body":{"injectables/CacheService.html":{},"classes/RedisIoAdapter.html":{}}}],["rediskeys",{"_index":673,"title":{},"body":{"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/HistoryService.html":{},"injectables/TokenService.html":{},"miscellaneous/enumerations.html":{}}}],["rediskeys.cacheget",{"_index":693,"title":{},"body":{"injectables/CacheService.html":{}}}],["redismodule",{"_index":268,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"index.html":{},"modules.html":{}}}],["redisoptions",{"_index":624,"title":{},"body":{"modules/BullModule.html":{},"modules/CacheModule.html":{},"modules/RedisModule.html":{},"classes/RedisSubPub.html":{}}}],["redisoptions.host",{"_index":626,"title":{},"body":{"modules/BullModule.html":{}}}],["redisoptions.password",{"_index":629,"title":{},"body":{"modules/BullModule.html":{},"classes/RedisSubPub.html":{}}}],["redisoptions.port",{"_index":628,"title":{},"body":{"modules/BullModule.html":{}}}],["redispubsubservice",{"_index":2725,"title":{"injectables/RedisPubSubService.html":{}},"body":{"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"index.html":{}}}],["redisstore",{"_index":637,"title":{},"body":{"modules/CacheModule.html":{}}}],["redissubpub",{"_index":2728,"title":{"classes/RedisSubPub.html":{}},"body":{"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{}}}],["redissubpub(redisoptions",{"_index":2732,"title":{},"body":{"modules/RedisModule.html":{}}}],["redissubpub.name",{"_index":2784,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["ref",{"_index":1145,"title":{},"body":{"injectables/CommentService.html":{}}}],["ref.id",{"_index":1153,"title":{},"body":{"injectables/CommentService.html":{}}}],["ref.userid",{"_index":1166,"title":{},"body":{"injectables/CommentService.html":{}}}],["reference#prisma",{"_index":1305,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["reference/error",{"_index":1304,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["refid",{"_index":1152,"title":{},"body":{"injectables/CommentService.html":{},"injectables/CountingService.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["refine(data",{"_index":2658,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["reflect",{"_index":3315,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":18,"title":{},"body":{"injectables/AbilityService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TransformInterceptor.html":{}}}],["refreshtoken",{"_index":1611,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["reftype",{"_index":1154,"title":{},"body":{"injectables/CommentService.html":{},"injectables/CountingService.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["register",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["register(@body",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(dto",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(undefined",{"_index":3186,"title":{},"body":{"injectables/UserService.html":{}}}],["registercatchallexceptionshook",{"_index":169,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["registerdto",{"_index":356,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/UserService.html":{}}}],["remark",{"_index":3136,"title":{},"body":{"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["removelistener",{"_index":1703,"title":{},"body":{"modules/HelperModule.html":{}}}],["removeoncomplete",{"_index":1904,"title":{},"body":{"injectables/InteractListener.html":{}}}],["removeonfail",{"_index":1905,"title":{},"body":{"injectables/InteractListener.html":{}}}],["removetoken",{"_index":3036,"title":{},"body":{"injectables/TokenService.html":{}}}],["removetoken(userid",{"_index":3044,"title":{},"body":{"injectables/TokenService.html":{}}}],["replace(/\\n/g",{"_index":1338,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["req",{"_index":1360,"title":{},"body":{"controllers/FileController.html":{},"controllers/GoogleController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["req.file",{"_index":1405,"title":{},"body":{"controllers/FileController.html":{}}}],["req.params",{"_index":2924,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["request",{"_index":203,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"guards/PolicyGuard.html":{},"interfaces/myError.html":{}}}],["request.headers.authorization",{"_index":2018,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["request.headers[idempotenceheaderkey",{"_index":1826,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["request.method",{"_index":207,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/myError.html":{}}}],["request.method.touppercase",{"_index":1820,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["request.raw.url",{"_index":211,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["request.url",{"_index":2106,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.user",{"_index":2021,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["requests",{"_index":1333,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["requeststimeout",{"_index":2719,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["requesttimeoutexception",{"_index":2966,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["requesttoofast",{"_index":3393,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["res",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/GoogleController.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["res.header",{"_index":1399,"title":{},"body":{"controllers/FileController.html":{}}}],["res.header('cache",{"_index":1395,"title":{},"body":{"controllers/FileController.html":{}}}],["res.send",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.send(stream",{"_index":1403,"title":{},"body":{"controllers/FileController.html":{}}}],["res.setcookie('auth",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.setcookie('token",{"_index":1582,"title":{},"body":{"controllers/GoogleController.html":{}}}],["res.type(mimetype",{"_index":1394,"title":{},"body":{"controllers/FileController.html":{}}}],["res.user",{"_index":1579,"title":{},"body":{"controllers/GoogleController.html":{}}}],["resbody",{"_index":226,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["reset",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["resetpassworddto",{"_index":2798,"title":{"classes/ResetPasswordDto.html":{}},"body":{"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["resolvefilepath",{"_index":1436,"title":{},"body":{"injectables/FileService.html":{}}}],["resolvefilepath(type",{"_index":1452,"title":{},"body":{"injectables/FileService.html":{}}}],["resolvefileurl",{"_index":1437,"title":{},"body":{"injectables/FileService.html":{}}}],["resolvefileurl(type",{"_index":1454,"title":{},"body":{"injectables/FileService.html":{}}}],["resop",{"_index":191,"title":{"classes/ResOp.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/GoogleController.html":{},"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{},"injectables/TransformInterceptor.html":{},"interfaces/myError.html":{}}}],["resourcenotfound",{"_index":3391,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resourcenotfoundwrapper",{"_index":907,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["response",{"_index":205,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/myError.html":{}}}],["response.status(httpstatus.ok).send",{"_index":209,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["response.status(status).type('application/json').send(resbody",{"_index":230,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["response_success_code",{"_index":1778,"title":{},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["response_success_msg",{"_index":1779,"title":{},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["result",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaptchaService.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/NotificationService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TokenService.html":{}}}],["result._count",{"_index":2625,"title":{},"body":{"injectables/NotificationService.html":{}}}],["result?.tolowercase",{"_index":786,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["results",{"_index":65,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CaslModule.html":{},"classes/CheckCodeDto.html":{},"injectables/CollectionAbility.html":{},"controllers/CollectionController.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"modules/CollectionModule.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"modules/CommentModule.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"classes/HistoryPagerDto.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"classes/IdDto.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"modules/SocketModule.html":{},"classes/SubCommentPagerDto.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"classes/TodoDto.html":{},"modules/TodoModule.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFollowEvent.html":{},"modules/UserModule.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/UserUpdateDto.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"interfaces/myError.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["results.reduce((obj",{"_index":2626,"title":{},"body":{"injectables/NotificationService.html":{}}}],["resultvalue",{"_index":1834,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["ret",{"_index":2182,"title":{},"body":{"injectables/MailerService.html":{}}}],["return",{"_index":62,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseGateway.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"modules/DatabaseModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"controllers/NoteController.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/Snowflake.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["returns",{"_index":28,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/IdempotenceInterceptor.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"controllers/NoteController.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/Snowflake.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{}}}],["returntype",{"_index":954,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{},"miscellaneous/typealiases.html":{}}}],["revokeall",{"_index":3037,"title":{},"body":{"injectables/TokenService.html":{}}}],["rimraf",{"_index":3317,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{},"injectables/UserService.html":{}}}],["role.admin",{"_index":991,"title":{},"body":{"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{},"injectables/UserService.html":{}}}],["role.user",{"_index":821,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserService.html":{}}}],["rootid",{"_index":1092,"title":{},"body":{"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["rotate",{"_index":2236,"title":{},"body":{"injectables/MyLogger.html":{},"dependencies.html":{}}}],["router",{"_index":947,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["routerinputs",{"_index":3511,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["routeroutputs",{"_index":3512,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["routers",{"_index":2889,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{},"miscellaneous/typealiases.html":{}}}],["rss",{"_index":1663,"title":{},"body":{"controllers/HealthController.html":{}}}],["rss')@healthcheck",{"_index":1633,"title":{},"body":{"controllers/HealthController.html":{}}}],["rxjs",{"_index":1807,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":2970,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["sadd(getrediskey(`${type}:${id}:users",{"_index":2059,"title":{},"body":{"injectables/LikeService.html":{}}}],["sadd(getrediskey(`u:${userid}:${type}:likes",{"_index":2060,"title":{},"body":{"injectables/LikeService.html":{}}}],["sample",{"_index":710,"title":{},"body":{"classes/CannotFindException.html":{}}}],["save",{"_index":1414,"title":{},"body":{"controllers/FileController.html":{}}}],["scard",{"_index":2066,"title":{},"body":{"injectables/LikeService.html":{}}}],["schedule",{"_index":1693,"title":{},"body":{"modules/HelperModule.html":{}}}],["schedulemanager",{"_index":1022,"title":{},"body":{"controllers/CommentController.html":{},"injectables/NoteTrpcRouter.html":{}}}],["schedulemanager.schedule(async",{"_index":1040,"title":{},"body":{"controllers/CommentController.html":{},"injectables/NoteTrpcRouter.html":{}}}],["schedulemodule",{"_index":1688,"title":{},"body":{"modules/HelperModule.html":{}}}],["schedulemodule.forroot",{"_index":1694,"title":{},"body":{"modules/HelperModule.html":{}}}],["scope",{"_index":1607,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["search",{"_index":2380,"title":{},"body":{"injectables/NotePublicService.html":{},"injectables/NoteTrpcRouter.html":{}}}],["search(dto",{"_index":2404,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["second",{"_index":2173,"title":{},"body":{"injectables/MailerService.html":{}}}],["secret",{"_index":496,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":2039,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["securityconfig",{"_index":2031,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["securityconfig.jwtsecret",{"_index":2040,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":836,"title":{},"body":{"controllers/CollectionController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["select",{"_index":1155,"title":{},"body":{"injectables/CommentService.html":{},"injectables/CountingService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NotificationService.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["send",{"_index":2149,"title":{},"body":{"injectables/MailerService.html":{}}}],["send(to",{"_index":2160,"title":{},"body":{"injectables/MailerService.html":{}}}],["sendemailcode",{"_index":1271,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendemailcode(dto",{"_index":1272,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendemailcodedto",{"_index":803,"title":{"classes/SendEmailCodeDto.html":{}},"body":{"classes/CheckCodeDto.html":{},"controllers/EmailController.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["sender",{"_index":2610,"title":{},"body":{"injectables/NotificationService.html":{}}}],["senderid",{"_index":941,"title":{},"body":{"injectables/CollectionService.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"classes/CreateNotificationDto.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{},"injectables/NotePublicService.html":{},"injectables/NotificationListener.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{}}}],["sendsmscodedto",{"_index":805,"title":{"classes/SendSmsCodeDto.html":{}},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["senduserconfirmation(user",{"_index":2197,"title":{},"body":{"injectables/MailerService.html":{}}}],["sendverificationcode",{"_index":2150,"title":{},"body":{"injectables/MailerService.html":{}}}],["sendverificationcode(to",{"_index":2165,"title":{},"body":{"injectables/MailerService.html":{}}}],["sequence",{"_index":2812,"title":{},"body":{"classes/Snowflake.html":{}}}],["sequencebits",{"_index":2813,"title":{},"body":{"classes/Snowflake.html":{}}}],["serialize",{"_index":3071,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["serialize(obj",{"_index":3074,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["server",{"_index":141,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"classes/RedisIoAdapter.html":{},"classes/WebEventsGateway.html":{}}}],["server.adapter(redisadapter",{"_index":2721,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["server.of(`/${namespace}`).sockets.get(sid",{"_index":453,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["server/common/adapters/socket.adapter",{"_index":672,"title":{},"body":{"injectables/CacheService.html":{}}}],["server/common/decorators/bypass.decorator",{"_index":1366,"title":{},"body":{"controllers/FileController.html":{}}}],["server/common/decorators/http.decorator",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmailController.html":{}}}],["server/common/decorators/idempotence.decorator",{"_index":1021,"title":{},"body":{"controllers/CommentController.html":{}}}],["server/common/decorators/protect",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["server/common/decorators/swagger.decorator",{"_index":104,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["server/common/dto/delete.dto",{"_index":1717,"title":{},"body":{"controllers/HistoryController.html":{},"injectables/HistoryTrpcRouter.html":{},"controllers/NoteController.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["server/common/dto/id.dto",{"_index":956,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"controllers/CommentController.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentTrpcRouter.html":{},"classes/CreateCommentDto.html":{},"classes/InteractPagerDto.html":{},"injectables/InteractTrpcRouter.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"classes/SubCommentPagerDto.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{},"controllers/UserController.html":{},"classes/UserNotePagerDto.html":{},"injectables/UserTrpcRouter.html":{}}}],["server/common/dto/image.dto",{"_index":2327,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["server/common/dto/pager.dto",{"_index":842,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"controllers/FileController.html":{},"injectables/FollowService.html":{},"classes/HistoryPagerDto.html":{},"classes/InteractPagerDto.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/LikeService.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["server/common/exceptions/biz.exception",{"_index":181,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"controllers/FileController.html":{},"injectables/MailerService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"interfaces/myError.html":{}}}],["server/common/model/response.model",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TransformInterceptor.html":{}}}],["server/config",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"modules/RedisModule.html":{},"injectables/UserService.html":{}}}],["server/config/app.config",{"_index":1468,"title":{},"body":{"injectables/FileService.html":{}}}],["server/constants/cache.constant",{"_index":674,"title":{},"body":{"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/HistoryService.html":{},"injectables/TokenService.html":{}}}],["server/constants/error",{"_index":184,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"classes/BizException.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"controllers/FileController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailerService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TokenService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"interfaces/myError.html":{}}}],["server/constants/event",{"_index":399,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["server/constants/other.constant",{"_index":1368,"title":{},"body":{"controllers/FileController.html":{}}}],["server/constants/path.constant",{"_index":1470,"title":{},"body":{"injectables/FileService.html":{}}}],["server/constants/response.constant",{"_index":1780,"title":{},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["server/global/env",{"_index":187,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AuthModule.html":{},"modules/HelperModule.html":{},"interfaces/myError.html":{}}}],["server/helper/get",{"_index":2676,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["server/modules/auth/auth.constant",{"_index":814,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["server/modules/auth/auth.dto",{"_index":3193,"title":{},"body":{"injectables/UserService.html":{}}}],["server/modules/auth/auth.service",{"_index":154,"title":{},"body":{"classes/AdminEventsGateway.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["server/modules/auth/decorators/auth",{"_index":106,"title":{},"body":{"controllers/AccountController.html":{}}}],["server/modules/auth/services/token.service",{"_index":402,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"classes/WebEventsGateway.html":{}}}],["server/modules/casl/casl.service",{"_index":2871,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["server/modules/user/dto/password.dto",{"_index":108,"title":{},"body":{"controllers/AccountController.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["server/modules/user/user.module",{"_index":2863,"title":{},"body":{"modules/SocketModule.html":{}}}],["server/modules/user/user.service",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/shared/cache/cache.service",{"_index":155,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/HistoryService.html":{},"interfaces/IAuthGateway.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractTrpcRouter.html":{},"classes/WebEventsGateway.html":{}}}],["server/shared/database/prisma.extension",{"_index":42,"title":{},"body":{"injectables/AbilityService.html":{},"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"controllers/HealthController.html":{},"injectables/HistoryService.html":{},"injectables/NoteTagService.html":{},"injectables/NotificationService.html":{},"guards/PolicyGuard.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["server/shared/database/snowflake.util",{"_index":2442,"title":{},"body":{"injectables/NoteService.html":{}}}],["server/shared/helper/mailer/mailer.service",{"_index":1276,"title":{},"body":{"controllers/EmailController.html":{}}}],["server/shared/redis/redis.constant",{"_index":2708,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["server/shared/trpc/trpc.decorator",{"_index":958,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["server/shared/trpc/trpc.helper",{"_index":960,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["server/shared/trpc/trpc.service",{"_index":961,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["server/utils/ip.util",{"_index":1129,"title":{},"body":{"injectables/CommentService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["server/utils/prisma.util",{"_index":908,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["server/utils/redis.util",{"_index":676,"title":{},"body":{"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/FollowService.html":{},"injectables/HistoryService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/LikeService.html":{},"injectables/TokenService.html":{},"injectables/ViewService.html":{}}}],["server/utils/schedule.util",{"_index":1023,"title":{},"body":{"controllers/CommentController.html":{},"injectables/NoteTrpcRouter.html":{}}}],["server/utils/tool.util",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CaptchaController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/MailerService.html":{}}}],["server/utils/zod.util",{"_index":2329,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["servererror",{"_index":3384,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["service",{"_index":3479,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["services/counting.service",{"_index":1927,"title":{},"body":{"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{}}}],["services/follow.service",{"_index":1928,"title":{},"body":{"modules/InteractModule.html":{},"injectables/InteractTrpcRouter.html":{}}}],["services/like.service",{"_index":1929,"title":{},"body":{"modules/InteractModule.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["services/token.service",{"_index":487,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/GoogleController.html":{},"injectables/JwtAuthGuard.html":{}}}],["services/view.service",{"_index":1930,"title":{},"body":{"modules/InteractModule.html":{}}}],["set",{"_index":647,"title":{},"body":{"injectables/CacheService.html":{},"injectables/CountingService.html":{}}}],["set(key",{"_index":660,"title":{},"body":{"injectables/CacheService.html":{}}}],["setmetadata",{"_index":1802,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["setmetadata(http_idempotence_key",{"_index":1832,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["setting",{"_index":2520,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["setvalue",{"_index":698,"title":{},"body":{"injectables/CacheService.html":{}}}],["shared/auth.gateway",{"_index":158,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/WebEventsGateway.html":{}}}],["shared/cache/cache.module",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/database/database.module",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/database/prisma.extension",{"_index":2406,"title":{},"body":{"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/TodoService.html":{}}}],["shared/helper/helper.module",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/logger/logger.module",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/redis/redis.module",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/trpc/trpc.module",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["shop",{"_index":2711,"title":{},"body":{"classes/RedisIoAdapter.html":{},"classes/RedisSubPub.html":{}}}],["shortmessage",{"_index":1335,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["sid",{"_index":439,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["sign",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["sign(userid",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["size",{"_index":749,"title":{},"body":{"controllers/CaptchaController.html":{},"controllers/FileController.html":{},"controllers/HealthController.html":{}}}],["skip",{"_index":1819,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["skipduplicates",{"_index":2447,"title":{},"body":{"injectables/NoteService.html":{}}}],["sleep",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["sleep(1500",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["sms",{"_index":779,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["snakecase",{"_index":3079,"title":{},"body":{"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["snakecasekeys",{"_index":3078,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["snakecasekeys(obj",{"_index":3092,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["snowflake",{"_index":2441,"title":{"classes/Snowflake.html":{}},"body":{"injectables/NoteService.html":{},"classes/Snowflake.html":{}}}],["snowflake(bigint(workerid",{"_index":2857,"title":{},"body":{"classes/Snowflake.html":{}}}],["snowflake.datacenteridbits",{"_index":2839,"title":{},"body":{"classes/Snowflake.html":{}}}],["snowflake.maxdatacenterid",{"_index":2851,"title":{},"body":{"classes/Snowflake.html":{}}}],["snowflake.maxworkerid",{"_index":2850,"title":{},"body":{"classes/Snowflake.html":{}}}],["snowflake.nextid",{"_index":2452,"title":{},"body":{"injectables/NoteService.html":{}}}],["snowflake.sequencebits",{"_index":2826,"title":{},"body":{"classes/Snowflake.html":{}}}],["snowflake.workeridbits",{"_index":2827,"title":{},"body":{"classes/Snowflake.html":{}}}],["snowflakeidschema",{"_index":1076,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/IdDto.html":{},"classes/InteractPagerDto.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/PagerDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/UserNotePagerDto.html":{}}}],["snowflakeidschema.optional().nullable",{"_index":1085,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["socket",{"_index":403,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"interfaces/IAuthGateway.html":{},"classes/RedisIoAdapter.html":{}}}],["socket.disconnect",{"_index":454,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["socket.io",{"_index":156,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"interfaces/IAuthGateway.html":{},"classes/RedisIoAdapter.html":{},"classes/WebEventsGateway.html":{},"dependencies.html":{}}}],["socket.io/redis",{"_index":677,"title":{},"body":{"injectables/CacheService.html":{},"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["socket/socket.module",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["socketmodule",{"_index":269,"title":{"modules/SocketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SocketModule.html":{},"index.html":{},"modules.html":{}}}],["sortby",{"_index":1141,"title":{},"body":{"injectables/CommentService.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/NoteUpdateDto.html":{},"classes/PagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["sortorder",{"_index":1143,"title":{},"body":{"injectables/CommentService.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/PagerDto.html":{},"classes/UserNotePagerDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BatchDeleteDto.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CannotFindException.html":{},"controllers/CaptchaController.html":{},"modules/CaptchaModule.html":{},"injectables/CaptchaService.html":{},"modules/CaslModule.html":{},"classes/CheckCodeDto.html":{},"injectables/CollectionAbility.html":{},"controllers/CollectionController.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"modules/CollectionModule.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"modules/CommentModule.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/CronService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"modules/HistoryModule.html":{},"classes/HistoryPagerDto.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"classes/IdDto.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"modules/InteractModule.html":{},"classes/InteractPagerDto.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"modules/MailerModule.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteDto.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"modules/NoteModule.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"modules/NotificationModule.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PasswordUpdateDto.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/Snowflake.html":{},"modules/SocketModule.html":{},"classes/SubCommentPagerDto.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"classes/TodoDto.html":{},"modules/TodoModule.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserFollowEvent.html":{},"modules/UserModule.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"injectables/UserPublicService.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"classes/UserUpdateDto.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{}}}],["source.cover",{"_index":2586,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["source.id",{"_index":2587,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["source.title",{"_index":2585,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["sourceid",{"_index":1248,"title":{},"body":{"classes/CreateNotificationDto.html":{},"injectables/NotificationListener.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{}}}],["sourcetype",{"_index":1249,"title":{},"body":{"classes/CreateNotificationDto.html":{},"injectables/NotificationListener.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{}}}],["src",{"_index":1860,"title":{},"body":{"classes/ImagesDto.html":{}}}],["src/.../ability.class.ts",{"_index":3340,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../app.config.ts",{"_index":3486,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../auth",{"_index":3506,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../auth.constant.ts",{"_index":3496,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../business",{"_index":3341,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cache.constant.ts",{"_index":3355,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cache.service.ts",{"_index":3513,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../comment.constant.ts",{"_index":3343,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":3488,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../env.ts",{"_index":3474,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../error",{"_index":3346,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../event",{"_index":3348,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../file.constant.ts",{"_index":3350,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../google.config.ts",{"_index":3489,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../image.dto.ts",{"_index":3490,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../interact.constant.ts",{"_index":3351,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../logger.service.ts",{"_index":3352,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../mailer.config.ts",{"_index":3491,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../note.constant.ts",{"_index":3353,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../policy.decortor.ts",{"_index":3508,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../prisma",{"_index":3485,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../prisma.extension.ts",{"_index":3471,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../redis.config.ts",{"_index":3492,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../redis.util.ts",{"_index":3509,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../response.constant.ts",{"_index":3345,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../schedule.util.ts",{"_index":3476,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../security.config.ts",{"_index":3493,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../sms.config.ts",{"_index":3495,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../trpc.context.ts",{"_index":3481,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../trpc.helper.ts",{"_index":3505,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../trpc.instance.ts",{"_index":3472,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../trpc.meta.ts",{"_index":3497,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../trpc.routes.ts",{"_index":3516,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../trpc.service.ts",{"_index":3484,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../zod.util.ts",{"_index":3483,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/adapters/socket.adapter.ts",{"_index":2697,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/common/adapters/socket.adapter.ts:13",{"_index":2705,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/common/adapters/socket.adapter.ts:8",{"_index":2702,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/common/dto/delete.dto.ts",{"_index":587,"title":{},"body":{"classes/BatchDeleteDto.html":{}}}],["src/common/dto/id.dto.ts",{"_index":1786,"title":{},"body":{"classes/IdDto.html":{}}}],["src/common/dto/image.dto.ts",{"_index":1857,"title":{},"body":{"classes/ImagesDto.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/dto/pager.dto.ts",{"_index":2630,"title":{},"body":{"classes/PagerDto.html":{}}}],["src/common/exceptions/biz.exception.ts",{"_index":597,"title":{},"body":{"classes/BizException.html":{}}}],["src/common/exceptions/biz.exception.ts:12",{"_index":601,"title":{},"body":{"classes/BizException.html":{}}}],["src/common/exceptions/biz.exception.ts:9",{"_index":603,"title":{},"body":{"classes/BizException.html":{}}}],["src/common/exceptions/not",{"_index":706,"title":{},"body":{"classes/CannotFindException.html":{}}}],["src/common/filters/any",{"_index":166,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["src/common/filters/prisma",{"_index":1285,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/filters/ws",{"_index":238,"title":{},"body":{"classes/AllExceptionsFilter-1.html":{}}}],["src/common/interceptors/idempotence.interceptor.ts",{"_index":1788,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["src/common/interceptors/idempotence.interceptor.ts:128",{"_index":1794,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{}}}],["src/common/interceptors/idempotence.interceptor.ts:54",{"_index":1792,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{}}}],["src/common/interceptors/idempotence.interceptor.ts:60",{"_index":1798,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{}}}],["src/common/interceptors/logging.interceptor.ts",{"_index":2099,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/interceptors/logging.interceptor.ts:12",{"_index":2104,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/interceptors/logging.interceptor.ts:14",{"_index":2100,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/common/interceptors/timeout.interceptor.ts",{"_index":2961,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/common/interceptors/timeout.interceptor.ts:12",{"_index":2963,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/common/interceptors/timeout.interceptor.ts:15",{"_index":2965,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts",{"_index":3070,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts:21",{"_index":3072,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts:24",{"_index":3073,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts:65",{"_index":3075,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/model/response.model.ts",{"_index":1776,"title":{},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["src/common/model/response.model.ts:17",{"_index":2797,"title":{},"body":{"classes/ResOp.html":{}}}],["src/common/model/response.model.ts:20",{"_index":2795,"title":{},"body":{"classes/ResOp.html":{}}}],["src/common/model/response.model.ts:23",{"_index":2796,"title":{},"body":{"classes/ResOp.html":{}}}],["src/common/model/response.model.ts:26",{"_index":2793,"title":{},"body":{"classes/ResOp.html":{}}}],["src/common/pipes/parse",{"_index":2641,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["src/config/app.config.ts",{"_index":3532,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/database.config.ts",{"_index":3534,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/google.config.ts",{"_index":3535,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/mailer.config.ts",{"_index":3536,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/redis.config.ts",{"_index":3537,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/security.config.ts",{"_index":3538,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/config/sms.config.ts",{"_index":3539,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/constants/cache.constant.ts",{"_index":3443,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/error",{"_index":3383,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/event",{"_index":3413,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/response.constant.ts",{"_index":3371,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/global/env.ts",{"_index":3524,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/modules/auth/auth.constant.ts",{"_index":3540,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:28",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:51",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.dto.ts",{"_index":2110,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["src/modules/auth/auth.model.ts",{"_index":1852,"title":{},"body":{"classes/ImageCaptcha.html":{},"classes/LoginResult.html":{}}}],["src/modules/auth/auth.model.ts:2",{"_index":1853,"title":{},"body":{"classes/ImageCaptcha.html":{}}}],["src/modules/auth/auth.model.ts:3",{"_index":1854,"title":{},"body":{"classes/ImageCaptcha.html":{}}}],["src/modules/auth/auth.model.ts:7",{"_index":2120,"title":{},"body":{"classes/LoginResult.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":471,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:16",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:45",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:49",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:62",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/captcha/captcha.controller.ts",{"_index":717,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["src/modules/auth/captcha/captcha.controller.ts:28",{"_index":723,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["src/modules/auth/captcha/captcha.dto.ts",{"_index":797,"title":{},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["src/modules/auth/captcha/captcha.model.ts",{"_index":2121,"title":{},"body":{"classes/LoginResult-1.html":{}}}],["src/modules/auth/captcha/captcha.model.ts:2",{"_index":2122,"title":{},"body":{"classes/LoginResult-1.html":{}}}],["src/modules/auth/captcha/captcha.module.ts",{"_index":768,"title":{},"body":{"modules/CaptchaModule.html":{}}}],["src/modules/auth/captcha/captcha.service.ts",{"_index":772,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["src/modules/auth/captcha/captcha.service.ts:12",{"_index":775,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["src/modules/auth/captcha/captcha.service.ts:22",{"_index":777,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["src/modules/auth/captcha/captcha.service.ts:32",{"_index":780,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["src/modules/auth/controllers/account.controller.ts",{"_index":70,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/modules/auth/controllers/account.controller.ts:24",{"_index":92,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/modules/auth/controllers/account.controller.ts:29",{"_index":97,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/modules/auth/controllers/account.controller.ts:36",{"_index":82,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/modules/auth/controllers/account.controller.ts:41",{"_index":89,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/modules/auth/controllers/email.controller.ts",{"_index":1269,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/modules/auth/controllers/email.controller.ts:22",{"_index":1274,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/modules/auth/controllers/google.controller.ts",{"_index":1558,"title":{},"body":{"controllers/GoogleController.html":{}}}],["src/modules/auth/controllers/google.controller.ts:32",{"_index":1564,"title":{},"body":{"controllers/GoogleController.html":{}}}],["src/modules/auth/controllers/google.controller.ts:36",{"_index":1568,"title":{},"body":{"controllers/GoogleController.html":{}}}],["src/modules/auth/decorators/auth",{"_index":3543,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/modules/auth/dtos/account.dto.ts",{"_index":2799,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["src/modules/auth/guards/jwt",{"_index":2001,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/modules/auth/guards/local.guard.ts",{"_index":2078,"title":{},"body":{"injectables/LocalGuard.html":{}}}],["src/modules/auth/guards/local.guard.ts:8",{"_index":2081,"title":{},"body":{"injectables/LocalGuard.html":{}}}],["src/modules/auth/services/token.service.ts",{"_index":3033,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/modules/auth/services/token.service.ts:13",{"_index":3039,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/modules/auth/services/token.service.ts:21",{"_index":3041,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/modules/auth/services/token.service.ts:38",{"_index":3043,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/modules/auth/services/token.service.ts:46",{"_index":3045,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/modules/auth/services/token.service.ts:55",{"_index":3046,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/modules/auth/services/token.service.ts:60",{"_index":3048,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/modules/auth/strategies/google.strategy.ts",{"_index":1585,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["src/modules/auth/strategies/google.strategy.ts:23",{"_index":1615,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/modules/auth/strategies/google.strategy.ts:37",{"_index":1617,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":2026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:20",{"_index":2033,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:9",{"_index":2030,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":2083,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:12",{"_index":2086,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:20",{"_index":2088,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/casl/ability.class.ts",{"_index":547,"title":{},"body":{"classes/BaseAbility.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/casl/ability.class.ts:28",{"_index":551,"title":{},"body":{"classes/BaseAbility.html":{}}}],["src/modules/casl/casl.module.ts",{"_index":793,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/modules/casl/casl.service.ts",{"_index":6,"title":{},"body":{"injectables/AbilityService.html":{}}}],["src/modules/casl/casl.service.ts:10",{"_index":20,"title":{},"body":{"injectables/AbilityService.html":{}}}],["src/modules/casl/casl.service.ts:16",{"_index":37,"title":{},"body":{"injectables/AbilityService.html":{}}}],["src/modules/casl/casl.service.ts:18",{"_index":32,"title":{},"body":{"injectables/AbilityService.html":{}}}],["src/modules/casl/casl.service.ts:20",{"_index":29,"title":{},"body":{"injectables/AbilityService.html":{}}}],["src/modules/casl/casl.service.ts:24",{"_index":27,"title":{},"body":{"injectables/AbilityService.html":{}}}],["src/modules/casl/policy.decortor.ts",{"_index":3544,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/modules/casl/policy.guard.ts",{"_index":2672,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["src/modules/casl/policy.guard.ts:13",{"_index":2673,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["src/modules/casl/policy.guard.ts:21",{"_index":2674,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["src/modules/collection/collection.ability.ts",{"_index":810,"title":{},"body":{"injectables/CollectionAbility.html":{}}}],["src/modules/collection/collection.ability.ts:13",{"_index":811,"title":{},"body":{"injectables/CollectionAbility.html":{}}}],["src/modules/collection/collection.controller.ts",{"_index":829,"title":{},"body":{"controllers/CollectionController.html":{}}}],["src/modules/collection/collection.dto.ts",{"_index":839,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{}}}],["src/modules/collection/collection.module.ts",{"_index":862,"title":{},"body":{"modules/CollectionModule.html":{}}}],["src/modules/collection/collection.service.ts",{"_index":866,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:106",{"_index":888,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:112",{"_index":898,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:132",{"_index":882,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:161",{"_index":890,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:184",{"_index":900,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:19",{"_index":879,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:200",{"_index":896,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:25",{"_index":902,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:41",{"_index":892,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:53",{"_index":884,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:64",{"_index":886,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:84",{"_index":894,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.service.ts:95",{"_index":904,"title":{},"body":{"injectables/CollectionService.html":{}}}],["src/modules/collection/collection.trpc.ts",{"_index":946,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["src/modules/collection/collection.trpc.ts:18",{"_index":951,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["src/modules/collection/collection.trpc.ts:25",{"_index":953,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["src/modules/collection/collection.trpc.ts:29",{"_index":952,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["src/modules/comment/comment.ability.ts",{"_index":988,"title":{},"body":{"injectables/CommentAbility.html":{}}}],["src/modules/comment/comment.ability.ts:13",{"_index":989,"title":{},"body":{"injectables/CommentAbility.html":{}}}],["src/modules/comment/comment.constant.ts",{"_index":3364,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/comment/comment.controller.ts",{"_index":994,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:35",{"_index":1017,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:45",{"_index":1013,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:56",{"_index":1002,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:74",{"_index":1009,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.controller.ts:81",{"_index":1006,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/comment/comment.dto.ts",{"_index":1074,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["src/modules/comment/comment.module.ts",{"_index":1069,"title":{},"body":{"modules/CommentModule.html":{}}}],["src/modules/comment/comment.service.ts",{"_index":1093,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:121",{"_index":1118,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:140",{"_index":1120,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:150",{"_index":1112,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:188",{"_index":1114,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:198",{"_index":1122,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:212",{"_index":1110,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:236",{"_index":1124,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:25",{"_index":1106,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:252",{"_index":1116,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:268",{"_index":1108,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:32",{"_index":1125,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.service.ts:86",{"_index":1127,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/comment/comment.trpc.ts",{"_index":1194,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["src/modules/comment/comment.trpc.ts:16",{"_index":1195,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["src/modules/comment/comment.trpc.ts:23",{"_index":1197,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["src/modules/comment/comment.trpc.ts:27",{"_index":1196,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["src/modules/comment/events/comment",{"_index":1049,"title":{},"body":{"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{}}}],["src/modules/file/file.constant.ts",{"_index":3422,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/file/file.controller.ts",{"_index":1342,"title":{},"body":{"controllers/FileController.html":{}}}],["src/modules/file/file.controller.ts:27",{"_index":1358,"title":{},"body":{"controllers/FileController.html":{}}}],["src/modules/file/file.controller.ts:41",{"_index":1353,"title":{},"body":{"controllers/FileController.html":{}}}],["src/modules/file/file.controller.ts:65",{"_index":1362,"title":{},"body":{"controllers/FileController.html":{}}}],["src/modules/file/file.controller.ts:91",{"_index":1348,"title":{},"body":{"controllers/FileController.html":{}}}],["src/modules/file/file.dto.ts",{"_index":1422,"title":{},"body":{"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{}}}],["src/modules/file/file.module.ts",{"_index":1420,"title":{},"body":{"modules/FileModule.html":{}}}],["src/modules/file/file.service.ts",{"_index":1431,"title":{},"body":{"injectables/FileService.html":{}}}],["src/modules/file/file.service.ts:21",{"_index":1440,"title":{},"body":{"injectables/FileService.html":{}}}],["src/modules/file/file.service.ts:24",{"_index":1453,"title":{},"body":{"injectables/FileService.html":{}}}],["src/modules/file/file.service.ts:28",{"_index":1442,"title":{},"body":{"injectables/FileService.html":{}}}],["src/modules/file/file.service.ts:38",{"_index":1451,"title":{},"body":{"injectables/FileService.html":{}}}],["src/modules/file/file.service.ts:46",{"_index":1460,"title":{},"body":{"injectables/FileService.html":{}}}],["src/modules/file/file.service.ts:63",{"_index":1445,"title":{},"body":{"injectables/FileService.html":{}}}],["src/modules/file/file.service.ts:72",{"_index":1449,"title":{},"body":{"injectables/FileService.html":{}}}],["src/modules/file/file.service.ts:78",{"_index":1455,"title":{},"body":{"injectables/FileService.html":{}}}],["src/modules/file/file.service.ts:83",{"_index":1447,"title":{},"body":{"injectables/FileService.html":{}}}],["src/modules/health/health.controller.ts",{"_index":1619,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/modules/health/health.controller.ts:32",{"_index":1636,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/modules/health/health.controller.ts:38",{"_index":1627,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/modules/health/health.controller.ts:44",{"_index":1632,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/modules/health/health.controller.ts:51",{"_index":1634,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/modules/health/health.controller.ts:58",{"_index":1629,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/modules/health/health.module.ts",{"_index":1676,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/modules/history/history.controller.ts",{"_index":1709,"title":{},"body":{"controllers/HistoryController.html":{}}}],["src/modules/history/history.controller.ts:19",{"_index":1716,"title":{},"body":{"controllers/HistoryController.html":{}}}],["src/modules/history/history.controller.ts:24",{"_index":1714,"title":{},"body":{"controllers/HistoryController.html":{}}}],["src/modules/history/history.dto.ts",{"_index":1734,"title":{},"body":{"classes/HistoryPagerDto.html":{}}}],["src/modules/history/history.module.ts",{"_index":1729,"title":{},"body":{"modules/HistoryModule.html":{}}}],["src/modules/history/history.service.ts",{"_index":1735,"title":{},"body":{"injectables/HistoryService.html":{}}}],["src/modules/history/history.service.ts:12",{"_index":1737,"title":{},"body":{"injectables/HistoryService.html":{}}}],["src/modules/history/history.service.ts:18",{"_index":1742,"title":{},"body":{"injectables/HistoryService.html":{}}}],["src/modules/history/history.service.ts:39",{"_index":1741,"title":{},"body":{"injectables/HistoryService.html":{}}}],["src/modules/history/history.service.ts:72",{"_index":1739,"title":{},"body":{"injectables/HistoryService.html":{}}}],["src/modules/history/history.trpc.ts",{"_index":1757,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["src/modules/history/history.trpc.ts:18",{"_index":1760,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["src/modules/history/history.trpc.ts:26",{"_index":1762,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["src/modules/history/history.trpc.ts:30",{"_index":1761,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["src/modules/interact/events/user",{"_index":3138,"title":{},"body":{"classes/UserFollowEvent.html":{}}}],["src/modules/interact/interact.constant.ts",{"_index":3426,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/interact/interact.dto.ts",{"_index":1933,"title":{},"body":{"classes/InteractPagerDto.html":{}}}],["src/modules/interact/interact.listener.ts",{"_index":1866,"title":{},"body":{"injectables/InteractListener.html":{}}}],["src/modules/interact/interact.listener.ts:101",{"_index":1877,"title":{},"body":{"injectables/InteractListener.html":{}}}],["src/modules/interact/interact.listener.ts:19",{"_index":1873,"title":{},"body":{"injectables/InteractListener.html":{}}}],["src/modules/interact/interact.listener.ts:26",{"_index":1887,"title":{},"body":{"injectables/InteractListener.html":{}}}],["src/modules/interact/interact.listener.ts:50",{"_index":1883,"title":{},"body":{"injectables/InteractListener.html":{}}}],["src/modules/interact/interact.listener.ts:74",{"_index":1880,"title":{},"body":{"injectables/InteractListener.html":{}}}],["src/modules/interact/interact.module.ts",{"_index":1922,"title":{},"body":{"modules/InteractModule.html":{}}}],["src/modules/interact/interact.processor.ts",{"_index":1934,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["src/modules/interact/interact.processor.ts:19",{"_index":1937,"title":{},"body":{"classes/InteractProcessor.html":{}}}],["src/modules/interact/interact.processor.ts:27",{"_index":1944,"title":{},"body":{"classes/InteractProcessor.html":{}}}],["src/modules/interact/interact.processor.ts:48",{"_index":1942,"title":{},"body":{"classes/InteractProcessor.html":{}}}],["src/modules/interact/interact.trpc.ts",{"_index":1960,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["src/modules/interact/interact.trpc.ts:22",{"_index":1963,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["src/modules/interact/interact.trpc.ts:32",{"_index":1965,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["src/modules/interact/interact.trpc.ts:36",{"_index":1964,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["src/modules/interact/services/counting.service.ts",{"_index":1209,"title":{},"body":{"injectables/CountingService.html":{}}}],["src/modules/interact/services/counting.service.ts:12",{"_index":1214,"title":{},"body":{"injectables/CountingService.html":{}}}],["src/modules/interact/services/counting.service.ts:21",{"_index":1220,"title":{},"body":{"injectables/CountingService.html":{}}}],["src/modules/interact/services/counting.service.ts:31",{"_index":1218,"title":{},"body":{"injectables/CountingService.html":{}}}],["src/modules/interact/services/counting.service.ts:43",{"_index":1216,"title":{},"body":{"injectables/CountingService.html":{}}}],["src/modules/interact/services/counting.service.ts:53",{"_index":1226,"title":{},"body":{"injectables/CountingService.html":{}}}],["src/modules/interact/services/follow.service.ts",{"_index":1496,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:104",{"_index":1518,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:109",{"_index":1526,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:114",{"_index":1516,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:119",{"_index":1514,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:13",{"_index":1507,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:19",{"_index":1509,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:35",{"_index":1528,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:43",{"_index":1524,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:68",{"_index":1512,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:73",{"_index":1520,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/follow.service.ts:99",{"_index":1522,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/interact/services/like.service.ts",{"_index":2041,"title":{},"body":{"injectables/LikeService.html":{}}}],["src/modules/interact/services/like.service.ts:13",{"_index":2045,"title":{},"body":{"injectables/LikeService.html":{}}}],["src/modules/interact/services/like.service.ts:23",{"_index":2055,"title":{},"body":{"injectables/LikeService.html":{}}}],["src/modules/interact/services/like.service.ts:41",{"_index":2047,"title":{},"body":{"injectables/LikeService.html":{}}}],["src/modules/interact/services/like.service.ts:63",{"_index":2051,"title":{},"body":{"injectables/LikeService.html":{}}}],["src/modules/interact/services/like.service.ts:79",{"_index":2049,"title":{},"body":{"injectables/LikeService.html":{}}}],["src/modules/interact/services/like.service.ts:89",{"_index":2053,"title":{},"body":{"injectables/LikeService.html":{}}}],["src/modules/interact/services/view.service.ts",{"_index":3229,"title":{},"body":{"injectables/ViewService.html":{}}}],["src/modules/interact/services/view.service.ts:12",{"_index":3235,"title":{},"body":{"injectables/ViewService.html":{}}}],["src/modules/interact/services/view.service.ts:16",{"_index":3237,"title":{},"body":{"injectables/ViewService.html":{}}}],["src/modules/interact/services/view.service.ts:9",{"_index":3232,"title":{},"body":{"injectables/ViewService.html":{}}}],["src/modules/note",{"_index":2457,"title":{},"body":{"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{}}}],["src/modules/note/events/note",{"_index":2284,"title":{},"body":{"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{}}}],["src/modules/note/note.ability.ts",{"_index":2281,"title":{},"body":{"injectables/NoteAbility.html":{}}}],["src/modules/note/note.ability.ts:13",{"_index":2282,"title":{},"body":{"injectables/NoteAbility.html":{}}}],["src/modules/note/note.constant.ts",{"_index":3431,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/note/note.controller.ts",{"_index":2289,"title":{},"body":{"controllers/NoteController.html":{}}}],["src/modules/note/note.controller.ts:22",{"_index":2301,"title":{},"body":{"controllers/NoteController.html":{}}}],["src/modules/note/note.controller.ts:28",{"_index":2298,"title":{},"body":{"controllers/NoteController.html":{}}}],["src/modules/note/note.controller.ts:34",{"_index":2293,"title":{},"body":{"controllers/NoteController.html":{}}}],["src/modules/note/note.controller.ts:40",{"_index":2305,"title":{},"body":{"controllers/NoteController.html":{}}}],["src/modules/note/note.controller.ts:46",{"_index":2295,"title":{},"body":{"controllers/NoteController.html":{}}}],["src/modules/note/note.controller.ts:51",{"_index":2290,"title":{},"body":{"controllers/NoteController.html":{}}}],["src/modules/note/note.dto.ts",{"_index":2325,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["src/modules/note/note.listener.ts",{"_index":2348,"title":{},"body":{"injectables/NoteListener.html":{}}}],["src/modules/note/note.listener.ts:6",{"_index":2350,"title":{},"body":{"injectables/NoteListener.html":{}}}],["src/modules/note/note.module.ts",{"_index":2360,"title":{},"body":{"modules/NoteModule.html":{}}}],["src/modules/note/note.public.service.ts",{"_index":2369,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:105",{"_index":2405,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:139",{"_index":2391,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:153",{"_index":2395,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:164",{"_index":2403,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:179",{"_index":2385,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:194",{"_index":2383,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:208",{"_index":2397,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:227",{"_index":2393,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:253",{"_index":2399,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:26",{"_index":2381,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:263",{"_index":2389,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:35",{"_index":2401,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.public.service.ts:65",{"_index":2387,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["src/modules/note/note.service.ts",{"_index":2433,"title":{},"body":{"injectables/NoteService.html":{}}}],["src/modules/note/note.service.ts:126",{"_index":2436,"title":{},"body":{"injectables/NoteService.html":{}}}],["src/modules/note/note.service.ts:134",{"_index":2434,"title":{},"body":{"injectables/NoteService.html":{}}}],["src/modules/note/note.service.ts:15",{"_index":2440,"title":{},"body":{"injectables/NoteService.html":{}}}],["src/modules/note/note.service.ts:17",{"_index":2438,"title":{},"body":{"injectables/NoteService.html":{}}}],["src/modules/note/note.service.ts:38",{"_index":2437,"title":{},"body":{"injectables/NoteService.html":{}}}],["src/modules/note/note.service.ts:65",{"_index":2435,"title":{},"body":{"injectables/NoteService.html":{}}}],["src/modules/note/note.service.ts:99",{"_index":2439,"title":{},"body":{"injectables/NoteService.html":{}}}],["src/modules/note/note.trpc.ts",{"_index":2501,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["src/modules/note/note.trpc.ts:23",{"_index":2502,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["src/modules/note/note.trpc.ts:32",{"_index":2504,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["src/modules/note/note.trpc.ts:36",{"_index":2503,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["src/modules/notification/notification.controller.ts",{"_index":2547,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/modules/notification/notification.controller.ts:20",{"_index":2553,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/modules/notification/notification.controller.ts:26",{"_index":2550,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/modules/notification/notification.dto.ts",{"_index":1242,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/NotificationPagerDto.html":{}}}],["src/modules/notification/notification.listener.ts",{"_index":2560,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["src/modules/notification/notification.listener.ts:111",{"_index":2571,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["src/modules/notification/notification.listener.ts:16",{"_index":2564,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["src/modules/notification/notification.listener.ts:22",{"_index":2568,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["src/modules/notification/notification.listener.ts:56",{"_index":2566,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["src/modules/notification/notification.listener.ts:75",{"_index":2565,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["src/modules/notification/notification.module.ts",{"_index":2595,"title":{},"body":{"modules/NotificationModule.html":{}}}],["src/modules/notification/notification.service.ts",{"_index":2599,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:118",{"_index":2601,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:14",{"_index":2606,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:16",{"_index":2605,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:60",{"_index":2602,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:95",{"_index":2604,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.trpc.ts",{"_index":2534,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{}}}],["src/modules/notification/notification.trpc.ts:13",{"_index":2536,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{}}}],["src/modules/notification/notification.trpc.ts:20",{"_index":2538,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{}}}],["src/modules/notification/notification.trpc.ts:24",{"_index":2537,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{}}}],["src/modules/todo/todo.ability.ts",{"_index":2976,"title":{},"body":{"injectables/TodoAbility.html":{}}}],["src/modules/todo/todo.ability.ts:13",{"_index":2977,"title":{},"body":{"injectables/TodoAbility.html":{}}}],["src/modules/todo/todo.controller.ts",{"_index":2980,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/modules/todo/todo.controller.ts:25",{"_index":2988,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/modules/todo/todo.controller.ts:31",{"_index":2986,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/modules/todo/todo.controller.ts:37",{"_index":2984,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/modules/todo/todo.controller.ts:43",{"_index":2990,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/modules/todo/todo.controller.ts:49",{"_index":2985,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/modules/todo/todo.controller.ts:54",{"_index":2982,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/modules/todo/todo.dto.ts",{"_index":2994,"title":{},"body":{"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{}}}],["src/modules/todo/todo.module.ts",{"_index":3005,"title":{},"body":{"modules/TodoModule.html":{}}}],["src/modules/todo/todo.service.ts",{"_index":3009,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/modules/todo/todo.service.ts:10",{"_index":3016,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/modules/todo/todo.service.ts:12",{"_index":3014,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/modules/todo/todo.service.ts:28",{"_index":3013,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/modules/todo/todo.service.ts:36",{"_index":3011,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/modules/todo/todo.service.ts:46",{"_index":3015,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/modules/todo/todo.service.ts:55",{"_index":3012,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/modules/todo/todo.service.ts:63",{"_index":3010,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/modules/todo/todo.trpc.ts",{"_index":3023,"title":{},"body":{"injectables/TodoTrpcRouter.html":{}}}],["src/modules/todo/todo.trpc.ts:18",{"_index":3024,"title":{},"body":{"injectables/TodoTrpcRouter.html":{}}}],["src/modules/todo/todo.trpc.ts:25",{"_index":3026,"title":{},"body":{"injectables/TodoTrpcRouter.html":{}}}],["src/modules/todo/todo.trpc.ts:29",{"_index":3025,"title":{},"body":{"injectables/TodoTrpcRouter.html":{}}}],["src/modules/user/dto/password.dto.ts",{"_index":2654,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["src/modules/user/dto/user.dto.ts",{"_index":3131,"title":{},"body":{"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["src/modules/user/user.ability.ts",{"_index":3095,"title":{},"body":{"injectables/UserAbility.html":{}}}],["src/modules/user/user.ability.ts:13",{"_index":3096,"title":{},"body":{"injectables/UserAbility.html":{}}}],["src/modules/user/user.controller.ts",{"_index":3099,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:27",{"_index":3109,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:33",{"_index":3106,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:39",{"_index":3102,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:45",{"_index":3115,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:52",{"_index":3103,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:58",{"_index":3112,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":3146,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.public.service.ts",{"_index":3151,"title":{},"body":{"injectables/UserPublicService.html":{}}}],["src/modules/user/user.public.service.ts:15",{"_index":3153,"title":{},"body":{"injectables/UserPublicService.html":{}}}],["src/modules/user/user.public.service.ts:24",{"_index":3155,"title":{},"body":{"injectables/UserPublicService.html":{}}}],["src/modules/user/user.public.service.ts:39",{"_index":3157,"title":{},"body":{"injectables/UserPublicService.html":{}}}],["src/modules/user/user.service.ts",{"_index":3164,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:102",{"_index":3172,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:123",{"_index":3188,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:141",{"_index":3174,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:150",{"_index":3185,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:172",{"_index":3187,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:25",{"_index":3170,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:34",{"_index":3182,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:39",{"_index":3184,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:43",{"_index":3181,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:47",{"_index":3179,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:60",{"_index":3192,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:73",{"_index":3190,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:91",{"_index":3177,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.trpc.ts",{"_index":3223,"title":{},"body":{"injectables/UserTrpcRouter.html":{}}}],["src/modules/user/user.trpc.ts:14",{"_index":3224,"title":{},"body":{"injectables/UserTrpcRouter.html":{}}}],["src/modules/user/user.trpc.ts:22",{"_index":3226,"title":{},"body":{"injectables/UserTrpcRouter.html":{}}}],["src/modules/user/user.trpc.ts:26",{"_index":3225,"title":{},"body":{"injectables/UserTrpcRouter.html":{}}}],["src/shared/bull/bull.module.ts",{"_index":619,"title":{},"body":{"modules/BullModule.html":{}}}],["src/shared/cache/cache.module.ts",{"_index":633,"title":{},"body":{"modules/CacheModule.html":{}}}],["src/shared/cache/cache.service.ts",{"_index":643,"title":{},"body":{"injectables/CacheService.html":{},"miscellaneous/typealiases.html":{}}}],["src/shared/cache/cache.service.ts:16",{"_index":664,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/shared/cache/cache.service.ts:17",{"_index":650,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/shared/cache/cache.service.ts:26",{"_index":667,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/shared/cache/cache.service.ts:32",{"_index":656,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/shared/cache/cache.service.ts:36",{"_index":662,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/shared/cache/cache.service.ts:40",{"_index":659,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/shared/cache/cache.service.ts:44",{"_index":663,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/shared/cache/cache.service.ts:46",{"_index":669,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/shared/cache/cache.service.ts:57",{"_index":652,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/shared/database/database.module.ts",{"_index":1263,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/shared/database/prisma.extension.ts",{"_index":3518,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/shared/database/snowflake.util.ts",{"_index":2802,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:10",{"_index":2832,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:11",{"_index":2833,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:13",{"_index":2843,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:14",{"_index":2828,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:17",{"_index":2840,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:20",{"_index":2841,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:21",{"_index":2823,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:22",{"_index":2836,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:23",{"_index":2822,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:4",{"_index":2830,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:40",{"_index":2847,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:44",{"_index":2846,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:5",{"_index":2842,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:52",{"_index":2844,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:6",{"_index":2825,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:7",{"_index":2838,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/database/snowflake.util.ts:9",{"_index":2834,"title":{},"body":{"classes/Snowflake.html":{}}}],["src/shared/helper/cron.service.ts",{"_index":1256,"title":{},"body":{"injectables/CronService.html":{}}}],["src/shared/helper/cron.service.ts:8",{"_index":1257,"title":{},"body":{"injectables/CronService.html":{}}}],["src/shared/helper/helper.module.ts",{"_index":1686,"title":{},"body":{"modules/HelperModule.html":{}}}],["src/shared/helper/mailer/mailer.module.ts",{"_index":2126,"title":{},"body":{"modules/MailerModule.html":{}}}],["src/shared/helper/mailer/mailer.service.ts",{"_index":2146,"title":{},"body":{"injectables/MailerService.html":{}}}],["src/shared/helper/mailer/mailer.service.ts:15",{"_index":2153,"title":{},"body":{"injectables/MailerService.html":{}}}],["src/shared/helper/mailer/mailer.service.ts:22",{"_index":2159,"title":{},"body":{"injectables/MailerService.html":{}}}],["src/shared/helper/mailer/mailer.service.ts:42",{"_index":2155,"title":{},"body":{"injectables/MailerService.html":{}}}],["src/shared/helper/mailer/mailer.service.ts:50",{"_index":2157,"title":{},"body":{"injectables/MailerService.html":{}}}],["src/shared/helper/mailer/mailer.service.ts:67",{"_index":2164,"title":{},"body":{"injectables/MailerService.html":{}}}],["src/shared/helper/mailer/mailer.service.ts:89",{"_index":2166,"title":{},"body":{"injectables/MailerService.html":{}}}],["src/shared/logger/logger.module.ts",{"_index":2096,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/shared/logger/logger.service.ts",{"_index":2203,"title":{},"body":{"injectables/MyLogger.html":{},"miscellaneous/enumerations.html":{}}}],["src/shared/logger/logger.service.ts:104",{"_index":2219,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/shared/logger/logger.service.ts:20",{"_index":2214,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/shared/logger/logger.service.ts:31",{"_index":2228,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/shared/logger/logger.service.ts:35",{"_index":2230,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/shared/logger/logger.service.ts:39",{"_index":2220,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/shared/logger/logger.service.ts:80",{"_index":2224,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/shared/logger/logger.service.ts:86",{"_index":2216,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/shared/logger/logger.service.ts:92",{"_index":2222,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/shared/logger/logger.service.ts:98",{"_index":2226,"title":{},"body":{"injectables/MyLogger.html":{}}}],["src/shared/redis/redis",{"_index":2752,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["src/shared/redis/redis.module.ts",{"_index":2726,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/shared/redis/subpub.service.ts",{"_index":2735,"title":{},"body":{"injectables/RedisPubSubService.html":{}}}],["src/shared/redis/subpub.service.ts:10",{"_index":2742,"title":{},"body":{"injectables/RedisPubSubService.html":{}}}],["src/shared/redis/subpub.service.ts:14",{"_index":2745,"title":{},"body":{"injectables/RedisPubSubService.html":{}}}],["src/shared/redis/subpub.service.ts:18",{"_index":2747,"title":{},"body":{"injectables/RedisPubSubService.html":{}}}],["src/shared/redis/subpub.service.ts:7",{"_index":2740,"title":{},"body":{"injectables/RedisPubSubService.html":{}}}],["src/shared/trpc/trpc.context.ts",{"_index":3527,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/shared/trpc/trpc.helper.ts",{"_index":3542,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/shared/trpc/trpc.instance.ts",{"_index":3521,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/shared/trpc/trpc.meta.ts",{"_index":3541,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/shared/trpc/trpc.module.ts",{"_index":2939,"title":{},"body":{"modules/TRPCModule.html":{}}}],["src/shared/trpc/trpc.routes.ts",{"_index":3546,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/shared/trpc/trpc.service.ts",{"_index":2867,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{},"miscellaneous/typealiases.html":{}}}],["src/shared/trpc/trpc.service.ts:100",{"_index":2947,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:102",{"_index":2956,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:106",{"_index":2958,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:110",{"_index":2960,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:114",{"_index":2949,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:116",{"_index":2946,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:120",{"_index":2950,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:121",{"_index":2948,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:123",{"_index":2945,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:147",{"_index":2943,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:35",{"_index":2942,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:92",{"_index":2952,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/shared/trpc/trpc.service.ts:96",{"_index":2954,"title":{},"body":{"injectables/TRPCService.html":{}}}],["src/socket/base.gateway.ts",{"_index":575,"title":{},"body":{"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{}}}],["src/socket/base.gateway.ts:18",{"_index":583,"title":{},"body":{"classes/BaseGateway.html":{}}}],["src/socket/base.gateway.ts:24",{"_index":582,"title":{},"body":{"classes/BaseGateway.html":{}}}],["src/socket/base.gateway.ts:32",{"_index":613,"title":{},"body":{"classes/BroadcastBaseGateway.html":{}}}],["src/socket/base.gateway.ts:6",{"_index":580,"title":{},"body":{"classes/BaseGateway.html":{}}}],["src/socket/business",{"_index":3356,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/socket/events/admin.gateway.ts",{"_index":135,"title":{},"body":{"classes/AdminEventsGateway.html":{}}}],["src/socket/events/admin.gateway.ts:21",{"_index":145,"title":{},"body":{"classes/AdminEventsGateway.html":{}}}],["src/socket/events/admin.gateway.ts:31",{"_index":147,"title":{},"body":{"classes/AdminEventsGateway.html":{}}}],["src/socket/events/admin.gateway.ts:33",{"_index":149,"title":{},"body":{"classes/AdminEventsGateway.html":{}}}],["src/socket/events/web.gateway.ts",{"_index":3240,"title":{},"body":{"classes/WebEventsGateway.html":{}}}],["src/socket/events/web.gateway.ts:20",{"_index":3241,"title":{},"body":{"classes/WebEventsGateway.html":{}}}],["src/socket/events/web.gateway.ts:30",{"_index":3242,"title":{},"body":{"classes/WebEventsGateway.html":{}}}],["src/socket/events/web.gateway.ts:32",{"_index":3243,"title":{},"body":{"classes/WebEventsGateway.html":{}}}],["src/socket/shared/auth.gateway.ts",{"_index":394,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["src/socket/socket.module.ts",{"_index":2862,"title":{},"body":{"modules/SocketModule.html":{}}}],["src/utils/redis.util",{"_index":622,"title":{},"body":{"modules/BullModule.html":{}}}],["src/utils/redis.util.ts",{"_index":3545,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/schedule.util.ts",{"_index":3525,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/utils/zod.util.ts",{"_index":3529,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["srem(getrediskey(`${type}:${id}:users",{"_index":2063,"title":{},"body":{"injectables/LikeService.html":{}}}],["srem(getrediskey(`u:${userid}:${type}:likes",{"_index":2064,"title":{},"body":{"injectables/LikeService.html":{}}}],["stack",{"_index":2218,"title":{},"body":{"injectables/MyLogger.html":{}}}],["stacktrace",{"_index":3322,"title":{},"body":{"dependencies.html":{}}}],["startcursor",{"_index":1147,"title":{},"body":{"injectables/CommentService.html":{},"injectables/FollowService.html":{},"injectables/LikeService.html":{}}}],["state",{"_index":1987,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["static",{"_index":2804,"title":{},"body":{"classes/Snowflake.html":{}}}],["static_file_dir",{"_index":1469,"title":{},"body":{"injectables/FileService.html":{}}}],["status",{"_index":195,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/NotificationService.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateDto.html":{},"interfaces/myError.html":{}}}],["statuscode",{"_index":197,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/myError.html":{}}}],["storage",{"_index":1670,"title":{},"body":{"controllers/HealthController.html":{}}}],["store",{"_index":641,"title":{},"body":{"modules/CacheModule.html":{},"injectables/TokenService.html":{}}}],["strategies",{"_index":491,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/google.strategy",{"_index":488,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":489,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":490,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1595,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":1392,"title":{},"body":{"controllers/FileController.html":{}}}],["strict",{"_index":2145,"title":{},"body":{"modules/MailerModule.html":{}}}],["string",{"_index":199,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"classes/BizException.html":{},"injectables/CacheService.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionService.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/HistoryService.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/InteractProcessor.html":{},"interfaces/JobData.html":{},"injectables/LikeService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/ResOp.html":{},"classes/Snowflake.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoService.html":{},"injectables/TokenService.html":{},"classes/UserFollowEvent.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"interfaces/myError.html":{},"miscellaneous/typealiases.html":{}}}],["strongpasswordregex",{"_index":2662,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["strongpasswordregex.test(value",{"_index":2667,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["strongpasswordschema",{"_index":2656,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserPasswordDto.html":{}}}],["sub",{"_index":1590,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{}}}],["subclient",{"_index":2715,"title":{},"body":{"classes/RedisIoAdapter.html":{},"classes/RedisSubPub.html":{}}}],["subcommentpagerdto",{"_index":1011,"title":{"classes/SubCommentPagerDto.html":{}},"body":{"controllers/CommentController.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["subject",{"_index":2161,"title":{},"body":{"injectables/MailerService.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["subject(model",{"_index":2687,"title":{},"body":{"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["subjects",{"_index":555,"title":{},"body":{"classes/BaseAbility.html":{}}}],["subpage",{"_index":1201,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["subpub",{"_index":2729,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisPubSubService.html":{}}}],["subpub.service",{"_index":2731,"title":{},"body":{"modules/RedisModule.html":{}}}],["subpub.ts",{"_index":2753,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["subpub.ts:15",{"_index":2763,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["subpub.ts:30",{"_index":2764,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["subpub.ts:39",{"_index":2761,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["subpub.ts:41",{"_index":2765,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["subpub.ts:58",{"_index":2766,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["subpub.ts:6",{"_index":2762,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["subpub.ts:7",{"_index":2758,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["subscribe",{"_index":2737,"title":{},"body":{"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{}}}],["subscribe(event",{"_index":2743,"title":{},"body":{"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{}}}],["substring(shortmessage.indexof('\\n",{"_index":1337,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["sum",{"_index":1229,"title":{},"body":{"injectables/CountingService.html":{}}}],["sum((interact",{"_index":1231,"title":{},"body":{"injectables/CountingService.html":{}}}],["summary",{"_index":1032,"title":{},"body":{"controllers/CommentController.html":{},"controllers/HistoryController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":422,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BizException.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IAuthGateway.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(app",{"_index":2712,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["super(applicationref",{"_index":1313,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["super(context",{"_index":2238,"title":{},"body":{"injectables/MyLogger.html":{}}}],["super(jwtservice",{"_index":163,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/WebEventsGateway.html":{}}}],["super(sample(notfoundmessage",{"_index":715,"title":{},"body":{"classes/CannotFindException.html":{}}}],["super.canactivate(context",{"_index":2019,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.catch",{"_index":1332,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["super.catch(exception",{"_index":241,"title":{},"body":{"classes/AllExceptionsFilter-1.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["super.createioserver(port",{"_index":2713,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["super.debug.apply(this",{"_index":2271,"title":{},"body":{"injectables/MyLogger.html":{}}}],["super.error.apply(this",{"_index":2277,"title":{},"body":{"injectables/MyLogger.html":{}}}],["super.handleconnect(client",{"_index":438,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["super.handledisconnect(client",{"_index":444,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["super.handledisconnect(socket",{"_index":455,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["super.log.apply(this",{"_index":2273,"title":{},"body":{"injectables/MyLogger.html":{}}}],["super.verbose.apply(this",{"_index":2269,"title":{},"body":{"injectables/MyLogger.html":{}}}],["super.warn.apply(this",{"_index":2275,"title":{},"body":{"injectables/MyLogger.html":{}}}],["support",{"_index":3460,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":731,"title":{},"body":{"controllers/CaptchaController.html":{},"dependencies.html":{},"modules.html":{}}}],["svg.text",{"_index":765,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["svgcaptcha",{"_index":730,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["svgcaptcha.create",{"_index":748,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["swc",{"_index":3330,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":1172,"title":{},"body":{"injectables/CommentService.html":{}}}],["system.exception",{"_index":3419,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["systemexception",{"_index":3418,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["systeminformation",{"_index":3325,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":653,"title":{},"body":{"injectables/CacheService.html":{},"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["t['router",{"_index":2885,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["ta",{"_index":2866,"title":{"interfaces/TA.html":{}},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["tag",{"_index":2445,"title":{},"body":{"injectables/NoteService.html":{}}}],["tag.dto",{"_index":2480,"title":{},"body":{"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{}}}],["tag.dto.ts",{"_index":2458,"title":{},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{}}}],["tag.module",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["tag.module.ts",{"_index":2471,"title":{},"body":{"modules/NoteTagModule.html":{}}}],["tag.service",{"_index":2492,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["tag.service.ts",{"_index":2473,"title":{},"body":{"injectables/NoteTagService.html":{}}}],["tag.service.ts:10",{"_index":2479,"title":{},"body":{"injectables/NoteTagService.html":{}}}],["tag.service.ts:12",{"_index":2478,"title":{},"body":{"injectables/NoteTagService.html":{}}}],["tag.service.ts:27",{"_index":2476,"title":{},"body":{"injectables/NoteTagService.html":{}}}],["tag.service.ts:35",{"_index":2474,"title":{},"body":{"injectables/NoteTagService.html":{}}}],["tag.service.ts:44",{"_index":2475,"title":{},"body":{"injectables/NoteTagService.html":{}}}],["tag.trpc.ts",{"_index":2488,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["tag.trpc.ts:17",{"_index":2489,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["tag.trpc.ts:24",{"_index":2491,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["tag.trpc.ts:28",{"_index":2490,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["tag/note",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"classes/NoteTagDto.html":{},"modules/NoteTagModule.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{}}}],["tags",{"_index":2338,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["tags.map(tag",{"_index":2444,"title":{},"body":{"injectables/NoteService.html":{}}}],["take",{"_index":1157,"title":{},"body":{"injectables/CommentService.html":{}}}],["tap",{"_index":1806,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/LoggingInterceptor.html":{}}}],["tap(async",{"_index":1840,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["targetid",{"_index":1510,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationListener.html":{},"classes/UserFollowEvent.html":{}}}],["tcachekey",{"_index":655,"title":{},"body":{"injectables/CacheService.html":{},"miscellaneous/typealiases.html":{}}}],["tcacheresult",{"_index":658,"title":{},"body":{"injectables/CacheService.html":{},"miscellaneous/typealiases.html":{}}}],["template",{"_index":2141,"title":{},"body":{"modules/MailerModule.html":{},"injectables/MailerService.html":{}}}],["terminusmodule",{"_index":1679,"title":{},"body":{"modules/HealthModule.html":{}}}],["test(parts[0",{"_index":3067,"title":{},"body":{"injectables/TokenService.html":{}}}],["test(parts[1",{"_index":3068,"title":{},"body":{"injectables/TokenService.html":{}}}],["test(parts[2",{"_index":3069,"title":{},"body":{"injectables/TokenService.html":{}}}],["test/.../create",{"_index":3478,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["test/helper/create",{"_index":3526,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["text",{"_index":2162,"title":{},"body":{"injectables/MailerService.html":{}}}],["this._emitter",{"_index":687,"title":{},"body":{"injectables/CacheService.html":{}}}],["this._procedureauth",{"_index":2891,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["this._server",{"_index":164,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/WebEventsGateway.html":{}}}],["this.abilitymap",{"_index":64,"title":{},"body":{"injectables/AbilityService.html":{}}}],["this.abilityservice.abilitymap[model].createforuser(user",{"_index":2683,"title":{},"body":{"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["this.app.get(redis_pubsub",{"_index":2716,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["this.appconfig.baseurl}/static/avatar/default.png",{"_index":3221,"title":{},"body":{"injectables/UserService.html":{}}}],["this.appconfig.name",{"_index":2192,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.approuter",{"_index":2921,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["this.authfailed(client",{"_index":436,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["this.authservice.clearloginstatus(user.id",{"_index":125,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.authservice.getmenus(user.id",{"_index":129,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.authservice.getpermissions(user.id",{"_index":132,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.authservice.loginbygoogle",{"_index":1578,"title":{},"body":{"controllers/GoogleController.html":{}}}],["this.authservice.sign(user.id",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{}}}],["this.authtoken(token",{"_index":437,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["this.bizcode",{"_index":609,"title":{},"body":{"classes/BizException.html":{}}}],["this.cache",{"_index":679,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.cache.get(key",{"_index":684,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.cache.set(key",{"_index":685,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.cache.store.client",{"_index":683,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.cacheservice.emitter",{"_index":458,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["this.cacheservice.get(cachekey",{"_index":1748,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.cacheservice.get(key",{"_index":1989,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.cacheservice.getclient",{"_index":1825,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["this.cacheservice.set(cachekey",{"_index":1749,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.cacheservice.set(key",{"_index":2000,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.captchalogservice.create(account",{"_index":789,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["this.captchaservice.checkimgcaptcha(captchaid",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.catchclientknownrequesterror(exception",{"_index":1323,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["this.channelprefix",{"_index":2776,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.checkisexist(filepath",{"_index":1481,"title":{},"body":{"injectables/FileService.html":{}}}],["this.checkisexist(this.resolvefilepath(type",{"_index":1477,"title":{},"body":{"injectables/FileService.html":{}}}],["this.code",{"_index":1782,"title":{},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["this.collectionservice.additem(itemid",{"_index":985,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["this.collectionservice.create(input",{"_index":976,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["this.collectionservice.delete(id",{"_index":982,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["this.collectionservice.deleteitem(itemid",{"_index":986,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["this.collectionservice.getdefaultcollection(user.id",{"_index":983,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["this.collectionservice.getdefaultcollection(userid",{"_index":2430,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.collectionservice.isitemincollection(item.id",{"_index":2427,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.collectionservice.paginate(input",{"_index":972,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["this.collectionservice.update(id",{"_index":979,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{}}}],["this.commentservice.appendinteractinfo(items",{"_index":1035,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{}}}],["this.commentservice.appendiplocation(comment.id",{"_index":1041,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.createcomment(dto",{"_index":1039,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.createcomment(input",{"_index":1205,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["this.commentservice.deletecomment(id",{"_index":1047,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{}}}],["this.commentservice.dislikecomment(id",{"_index":1207,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["this.commentservice.likecomment(id",{"_index":1044,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{}}}],["this.commentservice.paginate(dto",{"_index":1034,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.paginate(input",{"_index":1200,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["this.commentservice.paginatesubcomment(dto",{"_index":1038,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.paginatesubcomment(input",{"_index":1203,"title":{},"body":{"injectables/CommentTrpcRouter.html":{}}}],["this.configservice.get('app",{"_index":1492,"title":{},"body":{"injectables/FileService.html":{}}}],["this.configservice.get('app.logger.level",{"_index":2240,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.configservice.get('app.logger.maxfiles",{"_index":2241,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.countingqueue.add",{"_index":2354,"title":{},"body":{"injectables/NoteListener.html":{}}}],["this.countingservice.getcommentcount(itemtype",{"_index":1954,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["this.countingservice.getcommentcount(reftype",{"_index":1959,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["this.countingservice.getitemcollectcount(itemid",{"_index":1952,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["this.countingservice.getuserlikedcount(id",{"_index":1996,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.countingservice.updatecount(itemtype",{"_index":1958,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["this.countingservice.updatelikecount(interacttype.note",{"_index":2353,"title":{},"body":{"injectables/NoteListener.html":{}}}],["this.createability",{"_index":51,"title":{},"body":{"injectables/AbilityService.html":{}}}],["this.createapprouter",{"_index":2911,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["this.createdefaultcollection(userid",{"_index":924,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.createrouter",{"_index":963,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["this.ctc.delete(callback",{"_index":2791,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.ctc.get(callback",{"_index":2789,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.ctc.set(callback",{"_index":2786,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.data",{"_index":1785,"title":{},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["this.db.pingcheck('database",{"_index":1654,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.discovery.getproviders",{"_index":54,"title":{},"body":{"injectables/AbilityService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["this.disk.checkstorage('disk",{"_index":1668,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.errorcodesstatusmapping",{"_index":1321,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["this.errorcodesstatusmapping[exception.code",{"_index":1325,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["this.eventemitter.emit(commentevents.commentcreate",{"_index":1170,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.eventemitter.emit(commentevents.commentdislike",{"_index":1186,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.eventemitter.emit(commentevents.commentlike",{"_index":1183,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.eventemitter.emit(interactevents.userfollow",{"_index":1539,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.eventemitter.emit(noteevents.notecollect",{"_index":940,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.eventemitter.emit(noteevents.notedislike",{"_index":2424,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.eventemitter.emit(noteevents.notelike",{"_index":2422,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.eventemitter.emit(noteevents.noteuncollect",{"_index":943,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.exceptionshortmessage",{"_index":1327,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["this.fileservice.deletefile(type",{"_index":1416,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.exists(type",{"_index":1411,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.getdir(type",{"_index":1382,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.getfilestream(type",{"_index":1393,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.resolvefileurl(type",{"_index":1385,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.writefile(type",{"_index":1412,"title":{},"body":{"controllers/FileController.html":{}}}],["this.followserive.follow(id",{"_index":1970,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.followserive.getcommonfollowerids(id",{"_index":1986,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.followserive.getcommonfollowingids(id",{"_index":1978,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.followserive.getfollowercount(id",{"_index":1994,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.followserive.getfollowerids(id",{"_index":1985,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.followserive.getfollowingcount(id",{"_index":1992,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.followserive.getfollowingids",{"_index":1976,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.followserive.isuserfollowing(id",{"_index":1973,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.followserive.unfollow(id",{"_index":1971,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.followservice.getallfollowingids(userid",{"_index":2413,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.forceupdatepassword(id",{"_index":3215,"title":{},"body":{"injectables/UserService.html":{}}}],["this.gatewaymessageformat(businessevents.auth_failed",{"_index":425,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["this.gatewaymessageformat(businessevents.gateway_connect",{"_index":584,"title":{},"body":{"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{}}}],["this.gatewaymessageformat(event",{"_index":461,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["this.generatekey(request",{"_index":1829,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["this.getclient",{"_index":691,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.getcommentbyid(itemid",{"_index":1181,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.getdefaultcollection(userid",{"_index":936,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.getitembyid(itemid",{"_index":1146,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.getnotebyid(itemid",{"_index":2420,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.getnotesbyids(ids",{"_index":2432,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.getuserbyid(userid",{"_index":3205,"title":{},"body":{"injectables/UserService.html":{}}}],["this.historyservice.batchdelete(dto.ids",{"_index":1724,"title":{},"body":{"controllers/HistoryController.html":{}}}],["this.historyservice.batchdelete(ids",{"_index":1774,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["this.historyservice.create(note.id",{"_index":2512,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.historyservice.paginate(dto",{"_index":1722,"title":{},"body":{"controllers/HistoryController.html":{}}}],["this.historyservice.paginate(input",{"_index":1766,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["this.http.pingcheck('kuizuo",{"_index":1651,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.init",{"_index":2768,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.initwinston",{"_index":2239,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.interactqueue.add",{"_index":1902,"title":{},"body":{"injectables/InteractListener.html":{}}}],["this.istokeninredis(result.id",{"_index":3060,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.jwtservice.decode(token",{"_index":442,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["this.jwtservice.sign(payload",{"_index":3049,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.jwtservice.verify(jwt",{"_index":3059,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.jwtservice.verify(token",{"_index":430,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["this.level",{"_index":2250,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.likeservice.dislike(interacttype.comment",{"_index":1185,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.likeservice.dislike(interacttype.note",{"_index":2423,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.likeservice.getitemliked(interacttype.comment",{"_index":1190,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.likeservice.getitemliked(interacttype.note",{"_index":2425,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.likeservice.getitemlikedcount(itemtype",{"_index":1950,"title":{},"body":{"classes/InteractProcessor.html":{},"interfaces/JobData.html":{}}}],["this.likeservice.getuserlikedids",{"_index":2431,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.likeservice.like(interacttype.comment",{"_index":1182,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.likeservice.like(interacttype.note",{"_index":2421,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.logger",{"_index":1259,"title":{},"body":{"injectables/CronService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["this.logger.debug",{"_index":2107,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.logger.error(`error",{"_index":2927,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["this.logger.error(err",{"_index":700,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.logger.error(error",{"_index":2195,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.logger.log('redis",{"_index":681,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.logger.warn",{"_index":222,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["this.logger.warn('missing",{"_index":2919,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["this.mailerservice.checklimit(email",{"_index":1281,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.mailerservice.log(email",{"_index":1283,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.mailerservice.sendmail",{"_index":2191,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.mailerservice.sendverificationcode(email",{"_index":1282,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.maxfiles",{"_index":2256,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.memory.checkheap('memory",{"_index":1660,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('memory",{"_index":1666,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.menuservice.refreshperms(id",{"_index":3125,"title":{},"body":{"controllers/UserController.html":{}}}],["this.message",{"_index":1783,"title":{},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["this.namespace.server",{"_index":451,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["this.notepublicservice.appendinteractinfo(items",{"_index":2509,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notepublicservice.appendinteractinfo(note",{"_index":2513,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notepublicservice.dislikenote(id",{"_index":2525,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notepublicservice.followfeed(input",{"_index":2510,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notepublicservice.getnotebyid(id",{"_index":2511,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notepublicservice.getnotesbycollectionid(input",{"_index":2521,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notepublicservice.getnotesbyuserid(input",{"_index":2518,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notepublicservice.getuserlikednotes(input",{"_index":2523,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notepublicservice.homefeed(input",{"_index":2508,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notepublicservice.likenote(id",{"_index":2524,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notepublicservice.search(input",{"_index":2515,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.noteservice.appendinteractinfo(notes",{"_index":1772,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["this.noteservice.batchdelete(ids",{"_index":2532,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.noteservice.create(input",{"_index":2528,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.noteservice.delete(id",{"_index":2531,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.noteservice.getnotesbyids(noteids",{"_index":1771,"title":{},"body":{"injectables/HistoryTrpcRouter.html":{}}}],["this.noteservice.paginate(input",{"_index":2526,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.noteservice.update(id",{"_index":2530,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["this.notetagservice.create(input",{"_index":2499,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["this.notetagservice.delete(id",{"_index":2500,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["this.notetagservice.findone(id",{"_index":2497,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["this.notetagservice.paginate(input",{"_index":2495,"title":{},"body":{"injectables/NoteTagTrpcRouter.html":{}}}],["this.notificationservice.count(user.id",{"_index":2545,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{}}}],["this.notificationservice.create",{"_index":2574,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["this.notificationservice.paginate(dto",{"_index":2556,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.paginate(input",{"_index":2543,"title":{},"body":{"injectables/NotifactionTrpcRouter.html":{}}}],["this.ok",{"_index":1784,"title":{},"body":{"interfaces/IBaseResponse.html":{},"classes/ResOp.html":{}}}],["this.prisma",{"_index":1655,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.prisma.$executerawunsafe",{"_index":1236,"title":{},"body":{"injectables/CountingService.html":{}}}],["this.prisma.$queryrawunsafe",{"_index":1230,"title":{},"body":{"injectables/CountingService.html":{}}}],["this.prisma.$transaction(async",{"_index":3213,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.collection.count",{"_index":945,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CountingService.html":{}}}],["this.prisma.collection.create",{"_index":920,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.prisma.collection.delete",{"_index":926,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.prisma.collection.exists",{"_index":944,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.prisma.collection.findfirst",{"_index":922,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.prisma.collection.findunique",{"_index":918,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.prisma.collection.paginate",{"_index":916,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.prisma.collection.update",{"_index":925,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.prisma.comment.count",{"_index":1165,"title":{},"body":{"injectables/CommentService.html":{},"injectables/CountingService.html":{}}}],["this.prisma.comment.create",{"_index":1169,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.prisma.comment.delete",{"_index":1171,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.prisma.comment.findunique",{"_index":1177,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.prisma.comment.finduniqueorthrow",{"_index":1162,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.prisma.comment.paginate",{"_index":1151,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.prisma.comment.update",{"_index":1180,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.prisma.history.create",{"_index":1755,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.prisma.history.deletemany",{"_index":1756,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.prisma.history.findfirst",{"_index":1750,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.prisma.history.paginate",{"_index":1743,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.prisma.history.update",{"_index":1752,"title":{},"body":{"injectables/HistoryService.html":{}}}],["this.prisma.note",{"_index":931,"title":{},"body":{"injectables/CollectionService.html":{}}}],["this.prisma.note.create",{"_index":2448,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.prisma.note.delete",{"_index":2454,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.prisma.note.deletemany",{"_index":2455,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.prisma.note.findmany",{"_index":2419,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["this.prisma.note.finduniqueorthrow",{"_index":1175,"title":{},"body":{"injectables/CommentService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{}}}],["this.prisma.note.paginate",{"_index":929,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{}}}],["this.prisma.note.update",{"_index":2453,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.prisma.notetag.create",{"_index":2485,"title":{},"body":{"injectables/NoteTagService.html":{}}}],["this.prisma.notetag.createmany",{"_index":2443,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.prisma.notetag.delete",{"_index":2486,"title":{},"body":{"injectables/NoteTagService.html":{}}}],["this.prisma.notetag.finduniqueorthrow",{"_index":2484,"title":{},"body":{"injectables/NoteTagService.html":{}}}],["this.prisma.notetag.paginate",{"_index":2481,"title":{},"body":{"injectables/NoteTagService.html":{}}}],["this.prisma.notification.aggregate",{"_index":2623,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.prisma.notification.create",{"_index":2618,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.prisma.notification.delete",{"_index":2619,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.prisma.notification.findfirst",{"_index":2617,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.prisma.notification.paginate",{"_index":2609,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.prisma.notification.updatemany",{"_index":2611,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.prisma.todo.create",{"_index":3019,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.todo.delete",{"_index":3021,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.todo.deletemany",{"_index":3022,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.todo.finduniqueorthrow",{"_index":3018,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.todo.paginate",{"_index":3017,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.todo.update",{"_index":3020,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.prisma.user",{"_index":3200,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.create",{"_index":3212,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.deletemany",{"_index":3217,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.exists",{"_index":3219,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findfirst",{"_index":3210,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":3163,"title":{},"body":{"injectables/UserPublicService.html":{}}}],["this.prisma.user.findunique",{"_index":3199,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.finduniqueorthrow",{"_index":3159,"title":{},"body":{"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.paginate",{"_index":3218,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":3201,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma[model].finduniqueorthrow",{"_index":2685,"title":{},"body":{"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["this.pubclient",{"_index":2774,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.redis.del(`captcha:${to",{"_index":2184,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.redis.del(key",{"_index":788,"title":{},"body":{"injectables/CaptchaService.html":{},"injectables/TokenService.html":{}}}],["this.redis.get(`captcha:${to",{"_index":2183,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.redis.get(`captcha:${to}:limit",{"_index":2176,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.redis.get(getrediskey(`${type}:${id}:likes",{"_index":2065,"title":{},"body":{"injectables/LikeService.html":{}}}],["this.redis.get(key",{"_index":783,"title":{},"body":{"injectables/CaptchaService.html":{}}}],["this.redis.hdel",{"_index":3056,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.redis.hexists(key",{"_index":3055,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.redis.hset",{"_index":3050,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.redis.multi",{"_index":2057,"title":{},"body":{"injectables/LikeService.html":{}}}],["this.redis.pfadd(getrediskey(`${type}:${itemid}:views",{"_index":3238,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.redis.pfcount(getrediskey(`${type}:${itemid}:views",{"_index":3239,"title":{},"body":{"injectables/ViewService.html":{}}}],["this.redis.scard(`u:${type}:${id}:likes",{"_index":2067,"title":{},"body":{"injectables/LikeService.html":{}}}],["this.redis.set",{"_index":2180,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.redis.set(`captcha:${to",{"_index":2174,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.redis.set(`captcha:${to}:limit",{"_index":2179,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.redis.set(`ip:${ip}:send:limit",{"_index":2178,"title":{},"body":{"injectables/MailerService.html":{}}}],["this.redis.set(getrediskey(rediskeys.captchastore",{"_index":763,"title":{},"body":{"controllers/CaptchaController.html":{}}}],["this.redis.sismember(getrediskey(`${type}:${id}:users",{"_index":2056,"title":{},"body":{"injectables/LikeService.html":{}}}],["this.redis.smembers(getrediskey(`u:${userid}:${type}:likes",{"_index":2071,"title":{},"body":{"injectables/LikeService.html":{}}}],["this.redis.sscan(getrediskey(`u:${userid}:${type}:likes",{"_index":2070,"title":{},"body":{"injectables/LikeService.html":{}}}],["this.redis.zadd(getrediskey(`followers:${targetid",{"_index":1538,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.redis.zadd(getrediskey(`following:${userid",{"_index":1536,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.redis.zcard(getrediskey(`followers:${userid",{"_index":1553,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.redis.zcard(getrediskey(`following:${userid",{"_index":1552,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.redis.zinter(2",{"_index":1555,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.redis.zrange(getrediskey(`following:${userid",{"_index":1550,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.redis.zrem(getrediskey(`followers:${targetid",{"_index":1541,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.redis.zrem(getrediskey(`following:${userid",{"_index":1540,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.redis.zrevrangebyscore",{"_index":1544,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.redis.zscore(getrediskey(`following:${userid",{"_index":1554,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.redisclient",{"_index":686,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.redisclient.on('ready",{"_index":680,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.redisconfig.host",{"_index":2769,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.redisconfig.password",{"_index":2771,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.redisconfig.port",{"_index":2770,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.redissubpub.publish(event",{"_index":2749,"title":{},"body":{"injectables/RedisPubSubService.html":{}}}],["this.redissubpub.subscribe(event",{"_index":2750,"title":{},"body":{"injectables/RedisPubSubService.html":{}}}],["this.redissubpub.unsubscribe(event",{"_index":2751,"title":{},"body":{"injectables/RedisPubSubService.html":{}}}],["this.reflector.get",{"_index":1823,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/TransformInterceptor.html":{}}}],["this.reflector.get(ability_factory_key",{"_index":58,"title":{},"body":{"injectables/AbilityService.html":{}}}],["this.reflector.get(trpc_router",{"_index":2915,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["this.reflector.getallandoverride",{"_index":3085,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["this.reflector.getallandoverride(check_policy_key",{"_index":2681,"title":{},"body":{"guards/PolicyGuard.html":{}}}],["this.reflector.getallandoverride(public_key",{"_index":2014,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.registercatchallexceptionshook",{"_index":200,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/myError.html":{}}}],["this.resolvefilepath(type",{"_index":1480,"title":{},"body":{"injectables/FileService.html":{}}}],["this.router",{"_index":962,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["this.serialize(data",{"_index":3090,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["this.subclient",{"_index":2775,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.subclient.off('message",{"_index":2790,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.subclient.on('message",{"_index":2787,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.subclient.subscribe(mychannel",{"_index":2781,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.subclient.unsubscribe(channel",{"_index":2788,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["this.todoservice.batchdelete(ids",{"_index":2324,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["this.todoservice.create(dto",{"_index":2319,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["this.todoservice.create(input",{"_index":3031,"title":{},"body":{"injectables/TodoTrpcRouter.html":{}}}],["this.todoservice.delete(id",{"_index":2323,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["this.todoservice.findone(id",{"_index":2317,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["this.todoservice.paginate(dto",{"_index":2314,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{}}}],["this.todoservice.paginate(input",{"_index":3029,"title":{},"body":{"injectables/TodoTrpcRouter.html":{}}}],["this.todoservice.update(id",{"_index":2322,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["this.tokenservice.generatetoken",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tokenservice.generatetoken(user.id",{"_index":1581,"title":{},"body":{"controllers/GoogleController.html":{}}}],["this.tokenservice.removetoken(userid",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tokenservice.verifytoken(authorization",{"_index":2022,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.tokenservice.verifytoken(token",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tokensocketidmap.get(token",{"_index":452,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["this.tokensocketidmap.set(token.tostring",{"_index":441,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["this.trpcservice.procedureauth",{"_index":965,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["this.userpublicservice.getuserbyid(id",{"_index":3228,"title":{},"body":{"injectables/UserTrpcRouter.html":{}}}],["this.userservice.create(dto",{"_index":3123,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete([id",{"_index":3126,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.forceupdatepassword(dto.id",{"_index":3129,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getprofile(user.id",{"_index":121,"title":{},"body":{"controllers/AccountController.html":{},"injectables/UserTrpcRouter.html":{}}}],["this.userservice.getuserbyemail(credential",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyid(id",{"_index":3122,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserbyids(ids",{"_index":1980,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["this.userservice.getuserbyusername(credential",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.paginate(dto",{"_index":3120,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.register(dto",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.update(id",{"_index":3124,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatepassword(user.id",{"_index":126,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.userservice.updateprofile(user.id",{"_index":123,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.winstonlogger",{"_index":2242,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.winstonlogger.add",{"_index":2265,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.winstonlogger.log(loglevel.debug",{"_index":2272,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.winstonlogger.log(loglevel.error",{"_index":2279,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.winstonlogger.log(loglevel.info",{"_index":2274,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.winstonlogger.log(loglevel.verbose",{"_index":2270,"title":{},"body":{"injectables/MyLogger.html":{}}}],["this.winstonlogger.log(loglevel.warn",{"_index":2276,"title":{},"body":{"injectables/MyLogger.html":{}}}],["threedaysago",{"_index":2414,"title":{},"body":{"injectables/NotePublicService.html":{}}}],["thresholdpercent",{"_index":1674,"title":{},"body":{"controllers/HealthController.html":{}}}],["throttle",{"_index":725,"title":{},"body":{"controllers/CaptchaController.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{}}}],["throttlerguard",{"_index":726,"title":{},"body":{"controllers/CaptchaController.html":{},"controllers/EmailController.html":{}}}],["throttlermodule",{"_index":1690,"title":{},"body":{"modules/HelperModule.html":{}}}],["throttlermodule.forroot",{"_index":1696,"title":{},"body":{"modules/HelperModule.html":{}}}],["throw",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaptchaService.html":{},"injectables/CommentService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailerService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TokenService.html":{},"injectables/UserService.html":{}}}],["throwerror",{"_index":2968,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throwerror(err",{"_index":2974,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throwerror(new",{"_index":2973,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["tilnextmillis",{"_index":2819,"title":{},"body":{"classes/Snowflake.html":{}}}],["tilnextmillis(lasttimestamp",{"_index":2845,"title":{},"body":{"classes/Snowflake.html":{}}}],["time",{"_index":2964,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timegen",{"_index":2820,"title":{},"body":{"classes/Snowflake.html":{}}}],["timeout",{"_index":2969,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout(this.time",{"_index":2971,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeouterror",{"_index":2967,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":294,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor(15",{"_index":338,"title":{},"body":{"modules/AppModule.html":{}}}],["timestamp",{"_index":2103,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["timestampleftshift",{"_index":2814,"title":{},"body":{"classes/Snowflake.html":{}}}],["title",{"_index":2332,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotificationListener.html":{},"classes/UserNotePagerDto.html":{}}}],["to_jsonb(${count",{"_index":1240,"title":{},"body":{"injectables/CountingService.html":{}}}],["todo",{"_index":562,"title":{},"body":{"classes/BaseAbility.html":{},"controllers/CommentController.html":{},"controllers/FileController.html":{},"injectables/LikeService.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotificationService.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["todo.ability",{"_index":3006,"title":{},"body":{"modules/TodoModule.html":{}}}],["todo.controller",{"_index":3007,"title":{},"body":{"modules/TodoModule.html":{}}}],["todo.dto",{"_index":2991,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{}}}],["todo.service",{"_index":2992,"title":{},"body":{"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoTrpcRouter.html":{}}}],["todo.trpc",{"_index":3008,"title":{},"body":{"modules/TodoModule.html":{}}}],["todoability",{"_index":2975,"title":{"injectables/TodoAbility.html":{}},"body":{"injectables/TodoAbility.html":{},"modules/TodoModule.html":{},"index.html":{}}}],["todocontroller",{"_index":2979,"title":{"controllers/TodoController.html":{}},"body":{"controllers/TodoController.html":{},"modules/TodoModule.html":{}}}],["tododto",{"_index":2983,"title":{"classes/TodoDto.html":{}},"body":{"controllers/TodoController.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"classes/TodoUpdateDto.html":{}}}],["todoinputschema",{"_index":2997,"title":{},"body":{"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{}}}],["todomodule",{"_index":333,"title":{"modules/TodoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TodoModule.html":{},"index.html":{},"modules.html":{}}}],["todooptionaldefaultsschema",{"_index":2996,"title":{},"body":{"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{}}}],["todooptionaldefaultsschema.pick",{"_index":2998,"title":{},"body":{"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{}}}],["todopagerdto",{"_index":2987,"title":{"classes/TodoPagerDto.html":{}},"body":{"controllers/TodoController.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{}}}],["todos",{"_index":2981,"title":{},"body":{"controllers/TodoController.html":{}}}],["todoservice",{"_index":2312,"title":{"injectables/TodoService.html":{}},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"index.html":{}}}],["todotrpcrouter",{"_index":3004,"title":{"injectables/TodoTrpcRouter.html":{}},"body":{"modules/TodoModule.html":{},"injectables/TodoTrpcRouter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["todoupdatedto",{"_index":2989,"title":{"classes/TodoUpdateDto.html":{}},"body":{"controllers/TodoController.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"classes/TodoUpdateDto.html":{}}}],["token",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"controllers/GoogleController.html":{},"interfaces/IAuthGateway.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailerService.html":{},"injectables/TokenService.html":{}}}],["token).send",{"_index":1583,"title":{},"body":{"controllers/GoogleController.html":{}}}],["token.expired",{"_index":3417,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["token.replace(/[bb]earer",{"_index":3057,"title":{},"body":{"injectables/TokenService.html":{}}}],["token.split",{"_index":3063,"title":{},"body":{"injectables/TokenService.html":{}}}],["tokenexpired",{"_index":3416,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tokenservice",{"_index":401,"title":{"injectables/TokenService.html":{}},"body":{"interfaces/AuthGatewayOptions.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/GoogleController.html":{},"interfaces/IAuthGateway.html":{},"injectables/JwtAuthGuard.html":{},"injectables/TokenService.html":{},"classes/WebEventsGateway.html":{}}}],["tokensocketidmap",{"_index":445,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["topic",{"_index":2446,"title":{},"body":{"injectables/NoteService.html":{}}}],["total",{"_index":2077,"title":{},"body":{"injectables/LikeService.html":{},"injectables/NotificationService.html":{}}}],["totallikescount",{"_index":2075,"title":{},"body":{"injectables/LikeService.html":{}}}],["transform",{"_index":2643,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["transform(val",{"_index":2638,"title":{},"body":{"classes/PagerDto.html":{}}}],["transform(value",{"_index":2644,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["transforminterceptor",{"_index":296,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/TransformInterceptor.html":{}}}],["transport",{"_index":2135,"title":{},"body":{"modules/MailerModule.html":{}}}],["transports",{"_index":2234,"title":{},"body":{"injectables/MyLogger.html":{}}}],["transports.console",{"_index":2266,"title":{},"body":{"injectables/MyLogger.html":{}}}],["transports.dailyrotatefile",{"_index":2249,"title":{},"body":{"injectables/MyLogger.html":{}}}],["trim",{"_index":1339,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["trpc",{"_index":2875,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{},"dependencies.html":{}}}],["trpc$config",{"_index":3514,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["trpc.constant",{"_index":2878,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpc.context",{"_index":2880,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpc.createcallerfactory(this.approuter",{"_index":2909,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpc.instance",{"_index":2881,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpc.mergerouters(...(routers",{"_index":2920,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpc.middleware(async",{"_index":2894,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpc.procedure",{"_index":2892,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpc.routes",{"_index":2883,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpc.service",{"_index":2940,"title":{},"body":{"modules/TRPCModule.html":{}}}],["trpc/server",{"_index":3270,"title":{},"body":{"dependencies.html":{}}}],["trpc/server/adapters/fastify",{"_index":2873,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpc_router",{"_index":2877,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpcapiendpoint",{"_index":2932,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["trpcmodule",{"_index":270,"title":{"modules/TRPCModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TRPCModule.html":{},"index.html":{},"modules.html":{}}}],["trpcprocedure",{"_index":3515,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["trpcrouter",{"_index":957,"title":{},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["trpcrouters",{"_index":2882,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{},"miscellaneous/typealiases.html":{}}}],["trpcroutertype",{"_index":3517,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["trpcservice",{"_index":950,"title":{"injectables/TRPCService.html":{}},"body":{"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"interfaces/TA.html":{},"modules/TRPCModule.html":{},"injectables/TRPCService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{},"index.html":{}}}],["true",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthGatewayOptions.html":{},"modules/CacheModule.html":{},"controllers/CaptchaController.html":{},"injectables/CollectionAbility.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionService.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentPagerDto.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"modules/HelperModule.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"injectables/InteractListener.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"modules/MailerModule.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PagerDto.html":{},"modules/RedisModule.html":{},"classes/ResOp.html":{},"classes/ResetPasswordDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoService.html":{},"classes/TodoUpdateDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["try",{"_index":56,"title":{},"body":{"injectables/AbilityService.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/CacheService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"interfaces/IAuthGateway.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailerService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TokenService.html":{}}}],["ts",{"_index":414,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"injectables/CacheService.html":{},"interfaces/IAuthGateway.html":{}}}],["ts/ban",{"_index":413,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"injectables/CacheService.html":{},"interfaces/IAuthGateway.html":{}}}],["ts/consistent",{"_index":571,"title":{},"body":{"classes/BaseAbility.html":{}}}],["ttl",{"_index":743,"title":{},"body":{"controllers/CaptchaController.html":{},"controllers/EmailController.html":{},"controllers/FileController.html":{},"modules/HelperModule.html":{}}}],["tx",{"_index":3214,"title":{},"body":{"injectables/UserService.html":{}}}],["tx.user.create",{"_index":3222,"title":{},"body":{"injectables/UserService.html":{}}}],["tx.user.update",{"_index":3216,"title":{},"body":{"injectables/UserService.html":{}}}],["type",{"_index":24,"title":{},"body":{"injectables/AbilityService.html":{},"controllers/AccountController.html":{},"classes/AdminEventsGateway.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"controllers/AuthController.html":{},"interfaces/AuthGatewayOptions.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"classes/BaseGateway.html":{},"classes/BizException.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/CountingService.html":{},"injectables/CronService.html":{},"controllers/EmailController.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"controllers/FileController.html":{},"classes/FileQueryDto.html":{},"injectables/FileService.html":{},"classes/FileUploadDto.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"modules/HelperModule.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"interfaces/IAuthGateway.html":{},"interfaces/IBaseResponse.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/ImageCaptcha.html":{},"classes/ImagesDto.html":{},"injectables/InteractListener.html":{},"classes/InteractProcessor.html":{},"injectables/InteractTrpcRouter.html":{},"interfaces/JobData.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/LoginResult.html":{},"classes/LoginResult-1.html":{},"injectables/MailerService.html":{},"injectables/MyLogger.html":{},"injectables/NoteAbility.html":{},"classes/NoteCollectEvent.html":{},"controllers/NoteController.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteListener.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationListener.html":{},"injectables/NotificationService.html":{},"injectables/ParseIntPipe.html":{},"guards/PolicyGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"classes/RegisterDto.html":{},"classes/ResOp.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/TokenService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"classes/UserFollowEvent.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"injectables/ViewService.html":{},"classes/WebEventsGateway.html":{},"interfaces/myError.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":3468,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":428,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"classes/BizException.html":{},"interfaces/IAuthGateway.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TransformInterceptor.html":{}}}],["types",{"_index":1371,"title":{},"body":{"controllers/FileController.html":{}}}],["types/lodash",{"_index":3272,"title":{},"body":{"dependencies.html":{}}}],["ua",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"dependencies.html":{}}}],["uid",{"_index":3234,"title":{},"body":{"injectables/ViewService.html":{}}}],["unauthorizedexception",{"_index":2011,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PolicyGuard.html":{},"injectables/TokenService.html":{}}}],["unauthorizedexception(errorcode[errorcodeenum.jwtinvalid",{"_index":2023,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/TokenService.html":{}}}],["undefined",{"_index":220,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/CacheService.html":{},"controllers/CaptchaController.html":{},"controllers/CommentController.html":{},"controllers/EmailController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"classes/InteractProcessor.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/myError.html":{},"miscellaneous/typealiases.html":{}}}],["undefined})@bypass",{"_index":1352,"title":{},"body":{"controllers/FileController.html":{}}}],["unfollow",{"_index":1506,"title":{},"body":{"injectables/FollowService.html":{},"injectables/InteractTrpcRouter.html":{}}}],["unfollow(targetid",{"_index":1527,"title":{},"body":{"injectables/FollowService.html":{}}}],["unique",{"_index":2615,"title":{},"body":{"injectables/NotificationService.html":{}}}],["unit.ts",{"_index":3480,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unknown",{"_index":93,"title":{},"body":{"controllers/AccountController.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CollectionService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FollowService.html":{},"controllers/GoogleController.html":{},"controllers/HealthController.html":{},"controllers/HistoryController.html":{},"injectables/HistoryService.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/IdempotenceInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LikeService.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailerService.html":{},"controllers/NoteController.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/RedisPubSubService.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TokenService.html":{},"controllers/UserController.html":{},"injectables/UserPublicService.html":{},"injectables/UserService.html":{},"interfaces/myError.html":{}}}],["unplugin",{"_index":3329,"title":{},"body":{"dependencies.html":{}}}],["unsubscribe",{"_index":2738,"title":{},"body":{"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{}}}],["unsubscribe(event",{"_index":2746,"title":{},"body":{"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{}}}],["update",{"_index":569,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionService.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CountingService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"injectables/NoteTrpcRouter.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/TodoTrpcRouter.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["update(@param",{"_index":2321,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":903,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/NoteService.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["update(undefined",{"_index":2302,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["updateat']).optional",{"_index":2467,"title":{},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{}}}],["updatecommentcount",{"_index":3430,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updatecount",{"_index":1212,"title":{},"body":{"injectables/CountingService.html":{}}}],["updatecount(type",{"_index":1221,"title":{},"body":{"injectables/CountingService.html":{}}}],["updatedat",{"_index":3530,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["updateitemcount",{"_index":3429,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updatepassword",{"_index":3169,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepassword(userid",{"_index":3189,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofile",{"_index":77,"title":{},"body":{"controllers/AccountController.html":{},"injectables/UserService.html":{}}}],["updateprofile(user",{"_index":94,"title":{},"body":{"controllers/AccountController.html":{}}}],["updateprofile(userid",{"_index":3191,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofiledto",{"_index":95,"title":{"classes/UpdateProfileDto.html":{}},"body":{"controllers/AccountController.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserService.html":{}}}],["upload",{"_index":1344,"title":{},"body":{"controllers/FileController.html":{}}}],["upload(@query",{"_index":1404,"title":{},"body":{"controllers/FileController.html":{}}}],["upload(query",{"_index":1359,"title":{},"body":{"controllers/FileController.html":{}}}],["url",{"_index":210,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/FileController.html":{},"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{},"injectables/MailerService.html":{},"interfaces/myError.html":{}}}],["urlencoded;charset=utf",{"_index":3379,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["use",{"_index":1314,"title":{},"body":{"interfaces/ErrorCodesStatusMapping.html":{},"controllers/HealthController.html":{},"injectables/NotificationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["use(trpc.middleware(async",{"_index":2903,"title":{},"body":{"interfaces/TA.html":{},"injectables/TRPCService.html":{}}}],["useclass",{"_index":336,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":1669,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":337,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BullModule.html":{},"modules/CacheModule.html":{},"modules/DatabaseModule.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"modules/MailerModule.html":{},"classes/PrismaClientExceptionFilter.html":{},"modules/RedisModule.html":{}}}],["useguards",{"_index":100,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/CaptchaController.html":{},"controllers/EmailController.html":{},"controllers/GoogleController.html":{},"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard(authstrategy.google",{"_index":1574,"title":{},"body":{"controllers/GoogleController.html":{}}}],["useguards(jwtauthguard",{"_index":118,"title":{},"body":{"controllers/AccountController.html":{}}}],["useguards(localguard",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(policyguard",{"_index":2310,"title":{},"body":{"controllers/NoteController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["useguards(throttlerguard",{"_index":737,"title":{},"body":{"controllers/CaptchaController.html":{},"controllers/EmailController.html":{}}}],["user",{"_index":83,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbility.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/CommentTrpcRouter.html":{},"controllers/GoogleController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HistoryController.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailerService.html":{},"injectables/NoteAbility.html":{},"controllers/NoteController.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"guards/PolicyGuard.html":{},"interfaces/TA.html":{},"injectables/TRPCService.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserAbility.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{}}}],["user.ability",{"_index":3147,"title":{},"body":{"modules/UserModule.html":{}}}],["user.constant",{"_index":3158,"title":{},"body":{"injectables/UserPublicService.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":3148,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":107,"title":{},"body":{"controllers/AccountController.html":{},"controllers/CommentController.html":{},"controllers/HistoryController.html":{},"controllers/NoteController.html":{},"controllers/NotificationController.html":{},"controllers/TodoController.html":{}}}],["user.decorator.ts",{"_index":3507,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["user.email",{"_index":2199,"title":{},"body":{"injectables/MailerService.html":{}}}],["user.follow",{"_index":3428,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user.id",{"_index":826,"title":{},"body":{"injectables/CollectionAbility.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentAbility.html":{},"controllers/CommentController.html":{},"injectables/CommentTrpcRouter.html":{},"controllers/HistoryController.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/NoteAbility.html":{},"controllers/NoteController.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"controllers/NotificationController.html":{},"injectables/TodoAbility.html":{},"controllers/TodoController.html":{},"injectables/TodoTrpcRouter.html":{}}}],["user.name",{"_index":2202,"title":{},"body":{"injectables/MailerService.html":{}}}],["user.password",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.public.service",{"_index":3149,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserTrpcRouter.html":{}}}],["user.role",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CollectionAbility.html":{},"injectables/CommentAbility.html":{},"injectables/NoteAbility.html":{},"injectables/TodoAbility.html":{},"injectables/UserAbility.html":{}}}],["user.service",{"_index":3118,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserTrpcRouter.html":{}}}],["user.trpc",{"_index":3150,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.constant",{"_index":2608,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user/user.module",{"_index":481,"title":{},"body":{"modules/AuthModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/InteractModule.html":{},"modules/NoteModule.html":{},"modules/NotificationModule.html":{}}}],["user/user.public.service",{"_index":1966,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["user/user.service",{"_index":110,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{}}}],["user_kick",{"_index":3362,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_offline",{"_index":3361,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_online",{"_index":3360,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userability",{"_index":3094,"title":{"injectables/UserAbility.html":{}},"body":{"injectables/UserAbility.html":{},"modules/UserModule.html":{},"index.html":{}}}],["usercollectnotes",{"_index":2519,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["usercontroller",{"_index":3098,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["userdto",{"_index":3101,"title":{"classes/UserDto.html":{}},"body":{"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateDto.html":{}}}],["userexist",{"_index":3397,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userfollow",{"_index":3427,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userfollowevent",{"_index":1529,"title":{"classes/UserFollowEvent.html":{}},"body":{"injectables/FollowService.html":{},"injectables/NotificationListener.html":{},"classes/UserFollowEvent.html":{}}}],["userid",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaptchaService.html":{},"injectables/CollectionAbility.html":{},"injectables/CollectionService.html":{},"injectables/CommentAbility.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"injectables/FollowService.html":{},"injectables/HistoryService.html":{},"injectables/LikeService.html":{},"injectables/NoteAbility.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteService.html":{},"injectables/NoteTagService.html":{},"classes/NoteUpdateDto.html":{},"injectables/NotificationListener.html":{},"injectables/TodoAbility.html":{},"injectables/TodoService.html":{},"injectables/TokenService.html":{},"classes/UserFollowEvent.html":{},"classes/UserNotePagerDto.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userids",{"_index":3175,"title":{},"body":{"injectables/UserService.html":{}}}],["userinputschema",{"_index":3134,"title":{},"body":{"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["userlikednotes",{"_index":2522,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["usermodule",{"_index":271,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/InteractModule.html":{},"modules/NoteModule.html":{},"modules/NotificationModule.html":{},"modules/SocketModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{}}}],["username",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/UserService.html":{}}}],["usernamefield",{"_index":2090,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernotepagerdto",{"_index":2342,"title":{"classes/UserNotePagerDto.html":{}},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"injectables/NotePublicService.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["usernotes",{"_index":2516,"title":{},"body":{"injectables/NoteTrpcRouter.html":{}}}],["usernotfound",{"_index":3395,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["useroptionaldefaultsschema",{"_index":3133,"title":{},"body":{"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["useroptionaldefaultsschema.extend",{"_index":3135,"title":{},"body":{"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["userpassworddto",{"_index":2669,"title":{"classes/UserPasswordDto.html":{}},"body":{"classes/PasswordUpdateDto.html":{},"controllers/UserController.html":{},"classes/UserPasswordDto.html":{}}}],["userprofileselect",{"_index":3197,"title":{},"body":{"injectables/UserService.html":{}}}],["userpublicservice",{"_index":1962,"title":{"injectables/UserPublicService.html":{}},"body":{"injectables/InteractTrpcRouter.html":{},"modules/UserModule.html":{},"injectables/UserPublicService.html":{},"injectables/UserTrpcRouter.html":{},"index.html":{}}}],["userquerydto",{"_index":3107,"title":{"classes/UserQueryDto.html":{}},"body":{"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"injectables/UserService.html":{},"classes/UserUpdateDto.html":{}}}],["users",{"_index":1979,"title":{},"body":{"injectables/InteractTrpcRouter.html":{},"controllers/UserController.html":{}}}],["users.map((user",{"_index":1982,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["userschema",{"_index":2800,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["userschema.pick",{"_index":2801,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["userselect",{"_index":2607,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/UserPublicService.html":{}}}],["userservice",{"_index":109,"title":{"injectables/UserService.html":{}},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/InteractTrpcRouter.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/UserTrpcRouter.html":{},"index.html":{}}}],["usersnotecount",{"_index":1981,"title":{},"body":{"injectables/InteractTrpcRouter.html":{}}}],["usertrpcrouter",{"_index":3145,"title":{"injectables/UserTrpcRouter.html":{}},"body":{"modules/UserModule.html":{},"injectables/UserTrpcRouter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["userupdatedto",{"_index":3113,"title":{"classes/UserUpdateDto.html":{}},"body":{"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["uuid",{"_index":1845,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["val",{"_index":2639,"title":{},"body":{"classes/PagerDto.html":{},"injectables/ParseIntPipe.html":{}}}],["validate",{"_index":1609,"title":{},"body":{"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(accesstoken",{"_index":1616,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":2032,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":2087,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatetoken",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatetoken(token",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(credential",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":2652,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["validation.pipe",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["validjwt",{"_index":429,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["value",{"_index":34,"title":{},"body":{"injectables/AbilityService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/CacheService.html":{},"interfaces/IdempotenceOption.html":{},"classes/InteractProcessor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MailerService.html":{},"injectables/NotePublicService.html":{},"injectables/ParseIntPipe.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisSubPub.html":{},"classes/Snowflake.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"miscellaneous/enumerations.html":{}}}],["verbose",{"_index":2208,"title":{},"body":{"injectables/MyLogger.html":{},"miscellaneous/enumerations.html":{}}}],["verbose(message",{"_index":2223,"title":{},"body":{"injectables/MyLogger.html":{}}}],["verbosememoryleak",{"_index":1705,"title":{},"body":{"modules/HelperModule.html":{}}}],["verification",{"_index":2193,"title":{},"body":{"injectables/MailerService.html":{}}}],["verificationcodeerror",{"_index":3401,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["verificationcodesendfail",{"_index":3403,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["verify",{"_index":432,"title":{},"body":{"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{}}}],["verifycode",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifytoken",{"_index":3038,"title":{},"body":{"injectables/TokenService.html":{}}}],["verifytoken(token",{"_index":3047,"title":{},"body":{"injectables/TokenService.html":{}}}],["version",{"_index":3464,"title":{},"body":{"properties.html":{}}}],["video",{"_index":3425,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["view",{"_index":3451,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["viewservice",{"_index":1921,"title":{"injectables/ViewService.html":{}},"body":{"modules/InteractModule.html":{},"injectables/ViewService.html":{},"index.html":{}}}],["visitedat",{"_index":1744,"title":{},"body":{"injectables/HistoryService.html":{}}}],["void",{"_index":30,"title":{},"body":{"injectables/AbilityService.html":{},"classes/AllExceptionsFilter.html":{},"classes/AllExceptionsFilter-1.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CollectionTrpcRouter.html":{},"injectables/CommentTrpcRouter.html":{},"injectables/HistoryTrpcRouter.html":{},"injectables/InteractTrpcRouter.html":{},"injectables/MyLogger.html":{},"injectables/NoteTagTrpcRouter.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotifactionTrpcRouter.html":{},"injectables/RedisPubSubService.html":{},"classes/RedisSubPub.html":{},"injectables/TRPCService.html":{},"injectables/TodoTrpcRouter.html":{},"injectables/UserTrpcRouter.html":{}}}],["wait",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["warn",{"_index":2209,"title":{},"body":{"injectables/MyLogger.html":{},"miscellaneous/enumerations.html":{}}}],["warn(message",{"_index":2225,"title":{},"body":{"injectables/MyLogger.html":{}}}],["weakmap",{"_index":2760,"title":{},"body":{"classes/RedisSubPub.html":{}}}],["web",{"_index":3244,"title":{},"body":{"classes/WebEventsGateway.html":{}}}],["webeventsgateway",{"_index":467,"title":{"classes/WebEventsGateway.html":{}},"body":{"modules/AuthModule.html":{},"modules/CaptchaModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"classes/WebEventsGateway.html":{},"index.html":{}}}],["websocket",{"_index":585,"title":{},"body":{"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{}}}],["websocketgateway",{"_index":152,"title":{},"body":{"classes/AdminEventsGateway.html":{},"classes/WebEventsGateway.html":{}}}],["websocketserver",{"_index":146,"title":{},"body":{"classes/AdminEventsGateway.html":{},"interfaces/AuthGatewayOptions.html":{},"interfaces/IAuthGateway.html":{},"classes/WebEventsGateway.html":{}}}],["width",{"_index":746,"title":{},"body":{"controllers/CaptchaController.html":{},"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["wildcard",{"_index":1700,"title":{},"body":{"modules/HelperModule.html":{}}}],["winston",{"_index":2231,"title":{},"body":{"injectables/MyLogger.html":{},"dependencies.html":{}}}],["winstonlogger",{"_index":2205,"title":{},"body":{"injectables/MyLogger.html":{}}}],["withcursor",{"_index":917,"title":{},"body":{"injectables/CollectionService.html":{},"injectables/CommentService.html":{},"injectables/HistoryService.html":{},"injectables/NotePublicService.html":{},"injectables/NoteService.html":{},"injectables/NotificationService.html":{}}}],["withpages",{"_index":2482,"title":{},"body":{"injectables/NoteTagService.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["workerid",{"_index":2815,"title":{},"body":{"classes/Snowflake.html":{}}}],["workeridbits",{"_index":2816,"title":{},"body":{"classes/Snowflake.html":{}}}],["workeridshift",{"_index":2817,"title":{},"body":{"classes/Snowflake.html":{}}}],["workspace",{"_index":3274,"title":{},"body":{"dependencies.html":{}}}],["writable",{"_index":1484,"title":{},"body":{"injectables/FileService.html":{}}}],["writefile",{"_index":1438,"title":{},"body":{"injectables/FileService.html":{}}}],["writefile(type",{"_index":1456,"title":{},"body":{"injectables/FileService.html":{}}}],["www",{"_index":3377,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["x",{"_index":1812,"title":{},"body":{"injectables/IdempotenceInterceptor.html":{},"interfaces/IdempotenceOption.html":{}}}],["xx",{"_index":2588,"title":{},"body":{"injectables/NotificationListener.html":{}}}],["yes",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseGateway.html":{},"classes/BroadcastBaseGateway.html":{},"injectables/CaptchaService.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"injectables/FileService.html":{},"injectables/MyLogger.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{},"injectables/NoteTagService.html":{},"classes/PrismaClientExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/TodoService.html":{},"injectables/TokenService.html":{},"classes/UserFollowEvent.html":{}}}],["yoid",{"_index":3161,"title":{},"body":{"injectables/UserPublicService.html":{}}}],["youni/database",{"_index":563,"title":{},"body":{"classes/BaseAbility.html":{},"injectables/CollectionService.html":{},"classes/CommentCreateEvent.html":{},"classes/CommentLikeEvent.html":{},"injectables/CommentService.html":{},"injectables/CountingService.html":{},"classes/CreateNotificationDto.html":{},"interfaces/ErrorCodesStatusMapping.html":{},"interfaces/GoogleProfile.html":{},"injectables/GoogleStrategy.html":{},"controllers/HealthController.html":{},"injectables/HistoryTrpcRouter.html":{},"classes/NoteCollectEvent.html":{},"classes/NoteLikeEvent.html":{},"injectables/NotePublicService.html":{},"injectables/NoteTrpcRouter.html":{},"injectables/NotificationListener.html":{},"classes/NotificationPagerDto.html":{},"injectables/NotificationService.html":{},"classes/PrismaClientExceptionFilter.html":{},"dependencies.html":{}}}],["youni/database/zod",{"_index":844,"title":{},"body":{"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["yyyy",{"_index":2253,"title":{},"body":{"injectables/MyLogger.html":{}}}],["z",{"_index":592,"title":{},"body":{"classes/BatchDeleteDto.html":{},"classes/CheckCodeDto.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{},"classes/IdDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"classes/LoginDto.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/PagerDto.html":{},"classes/PasswordUpdateDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["z.array(imageschema",{"_index":1863,"title":{},"body":{"classes/ImagesDto.html":{}}}],["z.array(notetagschema.keyof()).optional",{"_index":2468,"title":{},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{}}}],["z.array(todoschema.keyof()).optional",{"_index":3000,"title":{},"body":{"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{}}}],["z.array(z.string",{"_index":596,"title":{},"body":{"classes/BatchDeleteDto.html":{}}}],["z.coerce.date().optional().nullable",{"_index":2337,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["z.coerce.number().int().min(1).max(50).optional().default(default_limit",{"_index":2634,"title":{},"body":{"classes/PagerDto.html":{}}}],["z.coerce.number().int().min(1).optional().default(1",{"_index":2635,"title":{},"body":{"classes/PagerDto.html":{}}}],["z.enum(['account",{"_index":2114,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["z.enum(['createdat",{"_index":2466,"title":{},"body":{"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"classes/NoteTagUpdateDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"classes/TodoUpdateDto.html":{}}}],["z.infer",{"_index":1864,"title":{},"body":{"classes/ImagesDto.html":{},"miscellaneous/typealiases.html":{}}}],["z.nativeenum(commentreftype",{"_index":1087,"title":{},"body":{"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/SubCommentPagerDto.html":{}}}],["z.nativeenum(filetypeenum",{"_index":1427,"title":{},"body":{"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{}}}],["z.nativeenum(filetypeenum).optional",{"_index":1429,"title":{},"body":{"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{}}}],["z.nativeenum(notificationaction",{"_index":1252,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/NotificationPagerDto.html":{}}}],["z.number().optional",{"_index":1861,"title":{},"body":{"classes/ImagesDto.html":{},"classes/UserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["z.number().optional().default(100",{"_index":801,"title":{},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["z.number().optional().default(50",{"_index":802,"title":{},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["z.object",{"_index":594,"title":{},"body":{"classes/BatchDeleteDto.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"classes/CollectionUpdateDto.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{},"classes/IdDto.html":{},"classes/ImagesDto.html":{},"classes/LoginDto.html":{},"classes/PagerDto.html":{},"classes/RegisterDto.html":{}}}],["z.password().min(6).atleastone('digit",{"_index":2118,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["z.string",{"_index":800,"title":{},"body":{"classes/CheckCodeDto.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"classes/PagerDto.html":{},"classes/PasswordUpdateDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"injectables/TodoTrpcRouter.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{}}}],["z.string().array().default",{"_index":2339,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["z.string().email",{"_index":804,"title":{},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["z.string().min(1",{"_index":2333,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/UserNotePagerDto.html":{}}}],["z.string().min(4).max(255",{"_index":2117,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["z.string().optional",{"_index":2345,"title":{},"body":{"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteUpdateDto.html":{},"classes/PagerDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{}}}],["z.string().optional().default",{"_index":1250,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/NotificationPagerDto.html":{}}}],["z.string().refine((value",{"_index":2661,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["z.string().regex(/^1[3",{"_index":807,"title":{},"body":{"classes/CheckCodeDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{}}}],["z.string().regex(/^\\d{16,19",{"_index":1787,"title":{},"body":{"classes/IdDto.html":{}}}],["z0",{"_index":3065,"title":{},"body":{"injectables/TokenService.html":{}}}],["z\\d\\w_]{6",{"_index":2666,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":2663,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["z])(?=.*\\d)[a",{"_index":2664,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"classes/UserPasswordDto.html":{}}}],["za",{"_index":2665,"title":{},"body":{"classes/PasswordUpdateDto.html":{},"injectables/TokenService.html":{},"classes/UserPasswordDto.html":{}}}],["zh",{"_index":2194,"title":{},"body":{"injectables/MailerService.html":{}}}],["zod",{"_index":591,"title":{},"body":{"classes/BatchDeleteDto.html":{},"classes/CheckCodeDto.html":{},"classes/CollectionDto.html":{},"classes/CollectionItemDto.html":{},"classes/CollectionItemQueryDto.html":{},"classes/CollectionPagerDto.html":{},"injectables/CollectionTrpcRouter.html":{},"classes/CollectionUpdateDto.html":{},"classes/CommentPagerDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateNotificationDto.html":{},"classes/FileQueryDto.html":{},"classes/FileUploadDto.html":{},"classes/HistoryPagerDto.html":{},"classes/IdDto.html":{},"classes/ImageCaptchaDto.html":{},"classes/ImagesDto.html":{},"classes/InteractPagerDto.html":{},"classes/LoginDto.html":{},"classes/NoteDto.html":{},"classes/NotePagerDto.html":{},"classes/NoteSearchDto.html":{},"classes/NoteTagDto.html":{},"classes/NoteTagPagerDto.html":{},"injectables/NoteTagTrpcRouter.html":{},"classes/NoteTagUpdateDto.html":{},"injectables/NoteTrpcRouter.html":{},"classes/NoteUpdateDto.html":{},"classes/NotificationPagerDto.html":{},"classes/PagerDto.html":{},"classes/PasswordUpdateDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendEmailCodeDto.html":{},"classes/SendSmsCodeDto.html":{},"classes/SubCommentPagerDto.html":{},"classes/TodoDto.html":{},"classes/TodoPagerDto.html":{},"injectables/TodoTrpcRouter.html":{},"classes/TodoUpdateDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UserDto.html":{},"classes/UserNotePagerDto.html":{},"classes/UserPasswordDto.html":{},"classes/UserQueryDto.html":{},"classes/UserUpdateDto.html":{},"dependencies.html":{}}}],["zod/z",{"_index":2112,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["zodvalidationpipe",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CacheModule.html":{},"modules/CaptchaModule.html":{},"modules/CaslModule.html":{},"modules/CollectionModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/HelperModule.html":{},"modules/HistoryModule.html":{},"modules/InteractModule.html":{},"modules/LoggerModule.html":{},"modules/MailerModule.html":{},"modules/NoteModule.html":{},"modules/NoteTagModule.html":{},"modules/NotificationModule.html":{},"modules/RedisModule.html":{},"modules/SocketModule.html":{},"modules/TRPCModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["zx",{"_index":3335,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AbilityService.html":{"url":"injectables/AbilityService.html","title":"injectable - AbilityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AbilityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/casl/casl.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                abilityMap\n                            \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createAbility\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discovery: DiscoveryService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/casl/casl.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discovery\n                                                  \n                                                        \n                                                                    DiscoveryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createAbility\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAbility()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/casl/casl.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/casl/casl.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        abilityMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/casl/casl.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('AbilityService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/casl/casl.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common'\nimport { DiscoveryService, Reflector } from '@nestjs/core'\n\nimport { ModelName } from '@server/shared/database/prisma.extension'\n\nimport { BaseAbility } from './ability.class'\nimport { ABILITY_FACTORY_KEY } from './ability.decorator'\n\n@Injectable()\nexport class AbilityService implements OnModuleInit {\n  constructor(\n    private readonly discovery: DiscoveryService,\n    private readonly reflector: Reflector,\n  ) {}\n\n  private logger = new Logger('AbilityService')\n\n  abilityMap: Record\n\n  onModuleInit() {\n    this.createAbility()\n  }\n\n  private createAbility() {\n    const providers = this.discovery.getProviders()\n\n    const abilityMap = {}\n\n    providers\n      .forEach((provider) => {\n        try {\n          const model = this.reflector.get(ABILITY_FACTORY_KEY, provider.metatype)\n\n          if (model)\n            abilityMap[model] = provider.instance\n\n          return model\n        }\n        catch {\n\n        }\n      })\n\n    this.abilityMap = abilityMap as Record\n    return abilityMap\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AccountController.html":{"url":"controllers/AccountController.html","title":"controller - AccountController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/controllers/account.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                account\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    Async\n                                password\n                            \n                            \n                                    \n                                    Async\n                                profile\n                            \n                            \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/account.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        password\n                        \n                    \n                \n            \n            \n                \n                        \n                    password(user: IAuthUser, dto: PasswordUpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/account.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            PasswordUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                        \n                    profile(user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/account.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(user: IAuthUser, dto: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/account.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\nimport { ApiSecurityAuth } from '@server/common/decorators/swagger.decorator'\nimport { AuthUser } from '@server/modules/auth/decorators/auth-user.decorator'\nimport { PasswordUpdateDto } from '@server/modules/user/dto/password.dto'\n\nimport { UserService } from '../../user/user.service'\nimport { AuthService } from '../auth.service'\nimport { UpdateProfileDto } from '../dtos/account.dto'\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard'\n\n@ApiTags('Account - 账户模块')\n@ApiSecurityAuth()\n@UseGuards(JwtAuthGuard)\n@Controller('account')\nexport class AccountController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly authService: AuthService,\n  ) { }\n\n  @Get('profile')\n  async profile(@AuthUser() user: IAuthUser) {\n    return this.userService.getProfile(user.id)\n  }\n\n  @Put('profile')\n  async updateProfile(\n    @AuthUser() user: IAuthUser, @Body() dto: UpdateProfileDto,\n  ): Promise {\n    await this.userService.updateProfile(user.id, dto)\n  }\n\n  @Get('logout')\n  async logout(@AuthUser() user: IAuthUser): Promise {\n    await this.authService.clearLoginStatus(user.id)\n  }\n\n  @Put('password')\n  async password(\n    @AuthUser() user: IAuthUser, @Body()\n    dto: PasswordUpdateDto,\n  ): Promise {\n    await this.userService.updatePassword(user.id, dto)\n  }\n\n  // @Get('menus')\n  // async menu(@AuthUser() user: IAuthUser) {\n  //   return this.authService.getMenus(user.id)\n  // }\n\n  // @Get('permissions')\n  // async permissions(@AuthUser() user: IAuthUser) {\n  //   return this.authService.getPermissions(user.id)\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminEventsGateway.html":{"url":"classes/AdminEventsGateway.html","title":"class - AdminEventsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminEventsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/socket/events/admin.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Protected\n                                _server\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    server\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, authService: AuthService, cacheService: CacheService)\n                    \n                \n                        \n                            \n                                Defined in src/socket/events/admin.gateway.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheService\n                                                  \n                                                        \n                                                                        CacheService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        _server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/socket/events/admin.gateway.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        server\n                    \n                \n\n                \n                    \n                        getserver()\n                    \n                \n                            \n                                \n                                    Defined in src/socket/events/admin.gateway.ts:33\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt'\nimport {\n  GatewayMetadata,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets'\n\nimport { AuthService } from '@server/modules/auth/auth.service'\nimport { CacheService } from '@server/shared/cache/cache.service'\nimport { Server } from 'socket.io'\n\nimport { createAuthGateway } from '../shared/auth.gateway'\n\nconst AuthGateway = createAuthGateway({ namespace: 'admin' })\n\n@WebSocketGateway({ namespace: 'admin' })\nexport class AdminEventsGateway\n  extends AuthGateway\n  implements OnGatewayConnection, OnGatewayDisconnect {\n  constructor(\n    protected readonly jwtService: JwtService,\n    protected readonly authService: AuthService,\n    private readonly cacheService: CacheService,\n  ) {\n    super(jwtService, authService, cacheService)\n  }\n\n  @WebSocketServer()\n  protected _server: Server\n\n  get server() {\n    return this._server\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/any-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                registerCatchAllExceptionsHook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/any-exception.filter.ts:27\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AllExceptionsFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/any-exception.filter.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/any-exception.filter.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerCatchAllExceptionsHook\n                        \n                    \n                \n            \n            \n                \nregisterCatchAllExceptionsHook()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/any-exception.filter.ts:85\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common'\n\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCode, ErrorCodeEnum } from '@server/constants/error-code.constant'\n\nimport { isDev } from '@server/global/env'\nimport { FastifyReply, FastifyRequest } from 'fastify'\n\nimport { ResOp } from '../model/response.model'\n\ninterface myError {\n  readonly status: number\n  readonly statusCode?: number\n\n  readonly message?: string\n}\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  private readonly logger = new Logger(AllExceptionsFilter.name)\n\n  constructor() {\n    this.registerCatchAllExceptionsHook()\n  }\n\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp()\n    const request = ctx.getRequest()\n    const response = ctx.getResponse()\n\n    if (request.method === 'OPTIONS')\n      return response.status(HttpStatus.OK).send()\n\n    const url = request.raw.url!\n\n    const status\n      = exception instanceof HttpException\n        ? exception.getStatus()\n        : (exception as myError)?.status\n        || (exception as myError)?.statusCode\n        || HttpStatus.INTERNAL_SERVER_ERROR\n\n    let message\n      = (exception as any)?.response?.message\n      || (exception as myError)?.message\n      || `${exception}`\n\n    // 系统内部错误时\n    if (\n      status === HttpStatus.INTERNAL_SERVER_ERROR\n      && !(exception instanceof BizException)\n    ) {\n      Logger.error(exception, undefined, 'Catch')\n\n      // 生产环境下隐藏错误信息\n      if (!isDev)\n        message = ErrorCode[ErrorCodeEnum.ServerError]\n    }\n    else {\n      this.logger.warn(\n        `错误信息：(${status}) ${message} Path: ${decodeURI(url)}`,\n      )\n    }\n\n    const errorCode: number\n      = exception instanceof BizException ? exception.bizCode : status\n\n    // 返回基础响应结果\n    const resBody = new ResOp({\n      code: errorCode,\n      message,\n      ok: false,\n    })\n\n    response.status(status).type('application/json').send(resBody)\n  }\n\n  registerCatchAllExceptionsHook() {\n    process.on('unhandledRejection', (reason) => {\n      console.error('unhandledRejection: ', reason)\n    })\n\n    process.on('uncaughtException', (err) => {\n      console.error('uncaughtException: ', err)\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter-1.html":{"url":"classes/AllExceptionsFilter-1.html","title":"class - AllExceptionsFilter-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/ws-exception.filter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/ws-exception.filter.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n} from '@nestjs/common'\nimport { BaseWsExceptionFilter } from '@nestjs/websockets'\n\n@Catch()\nexport class AllExceptionsFilter extends BaseWsExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    super.catch(exception, host)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBullModule\n\nBullModule\n\nAppModule -->\n\nBullModule->AppModule\n\n\n\n\n\nCacheModule\n\nCacheModule\n\nAppModule -->\n\nCacheModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCollectionModule\n\nCollectionModule\n\nAppModule -->\n\nCollectionModule->AppModule\n\n\n\n\n\nCommentModule\n\nCommentModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nAppModule -->\n\nHistoryModule->AppModule\n\n\n\n\n\nInteractModule\n\nInteractModule\n\nAppModule -->\n\nInteractModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nNoteModule\n\nNoteModule\n\nAppModule -->\n\nNoteModule->AppModule\n\n\n\n\n\nNoteTagModule\n\nNoteTagModule\n\nAppModule -->\n\nNoteTagModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nSocketModule\n\nSocketModule\n\nAppModule -->\n\nSocketModule->AppModule\n\n\n\n\n\nTRPCModule\n\nTRPCModule\n\nAppModule -->\n\nTRPCModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BullModule\n                        \n                        \n                            CacheModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            CollectionModule\n                        \n                        \n                            CommentModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            FileModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HelperModule\n                        \n                        \n                            HistoryModule\n                        \n                        \n                            InteractModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            NoteModule\n                        \n                        \n                            NoteTagModule\n                        \n                        \n                            NotificationModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            SocketModule\n                        \n                        \n                            TRPCModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bull'\nimport { Module } from '@nestjs/common'\n\nimport { ConfigModule } from '@nestjs/config'\nimport { APP_FILTER, APP_GUARD, APP_INTERCEPTOR, APP_PIPE, HttpAdapterHost } from '@nestjs/core'\n\nimport * as config from '@server/config'\n\nimport { AllExceptionsFilter } from './common/filters/any-exception.filter'\nimport { PrismaClientExceptionFilter } from './common/filters/prisma-client-exception.filter'\nimport { IdempotenceInterceptor } from './common/interceptors/idempotence.interceptor'\nimport { TimeoutInterceptor } from './common/interceptors/timeout.interceptor'\nimport { TransformInterceptor } from './common/interceptors/transform.interceptor'\nimport { ZodValidationPipe } from './common/pipes/zod-validation.pipe'\nimport { AuthModule } from './modules/auth/auth.module'\nimport { JwtAuthGuard } from './modules/auth/guards/jwt-auth.guard'\nimport { CaslModule } from './modules/casl/casl.module'\nimport { CollectionModule } from './modules/collection/collection.module'\nimport { CommentModule } from './modules/comment/comment.module'\nimport { FileModule } from './modules/file/file.module'\nimport { HealthModule } from './modules/health/health.module'\nimport { HistoryModule } from './modules/history/history.module'\nimport { InteractModule } from './modules/interact/interact.module'\nimport { NoteModule } from './modules/note/note.module'\nimport { NoteTagModule } from './modules/note-tag/note-tag.module'\nimport { NotificationModule } from './modules/notification/notification.module'\nimport { UserModule } from './modules/user/user.module'\nimport { CacheModule } from './shared/cache/cache.module'\nimport { DatabaseModule } from './shared/database/database.module'\nimport { HelperModule } from './shared/helper/helper.module'\nimport { LoggerModule } from './shared/logger/logger.module'\nimport { RedisModule } from './shared/redis/redis.module'\nimport { TRPCModule } from './shared/trpc/trpc.module'\nimport { SocketModule } from './socket/socket.module'\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: ['../../.env', '.env'],\n      load: [...Object.values(config)],\n    }),\n    LoggerModule,\n    CacheModule,\n    DatabaseModule,\n    RedisModule,\n    BullModule,\n    HelperModule,\n\n    AuthModule,\n    UserModule,\n    HealthModule,\n    SocketModule,\n    FileModule,\n\n    // biz\n    NoteModule, // 笔记\n    NoteTagModule,\n    CollectionModule, // 收藏\n    HistoryModule, // 浏览历史\n    CommentModule, // 评论\n    InteractModule, // 交互\n    NotificationModule, // 通知\n    // ChatModule, // 聊天\n    // end biz\n\n    // TodoModule,\n\n    // wait module load\n    CaslModule,\n    TRPCModule,\n  ],\n  providers: [\n\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useFactory: () => new TimeoutInterceptor(15 * 1000) },\n    { provide: APP_INTERCEPTOR, useClass: IdempotenceInterceptor },\n\n    { provide: APP_PIPE, useClass: ZodValidationPipe },\n\n    {\n      provide: APP_FILTER,\n      useFactory: ({ httpAdapter }: HttpAdapterHost) => {\n        return new PrismaClientExceptionFilter(httpAdapter)\n      },\n      inject: [HttpAdapterHost],\n    },\n\n    { provide: APP_FILTER, useClass: AllExceptionsFilter },\n\n    { provide: APP_GUARD, useClass: JwtAuthGuard },\n  ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(dto: LoginDto, res: FastifyReply, ip: string, ua: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        FastifyReply\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ua\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(dto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ProtectKeys(['password'])\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Headers, Post, Res, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\nimport { Ip } from '@server/common/decorators/http.decorator'\nimport { ProtectKeys } from '@server/common/decorators/protect-keys.decorator'\n\nimport { ResOp } from '@server/common/model/response.model'\nimport { FastifyReply } from 'fastify'\n\nimport { UserService } from '../user/user.service'\n\nimport { LoginDto, RegisterDto } from './auth.dto'\nimport { AuthService } from './auth.service'\nimport { Public } from './decorators/public.decorator'\nimport { LocalGuard } from './guards/local.guard'\n\n@ApiTags('Auth - 认证模块')\n@UseGuards(LocalGuard)\n@Public()\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private userService: UserService,\n  ) { }\n\n  @Post('login')\n  async login(\n    @Body() dto: LoginDto,\n    @Res() res: FastifyReply,\n    @Ip() ip: string,\n    @Headers('user-agent') ua: string,\n  ) {\n    const { username, password, type } = dto\n    // await this.captchaService.checkImgCaptcha(captchaId, verifyCode);\n\n    const user = await this.authService.validateUser(username, password, type)\n\n    const jwt = await this.authService.sign(user.id, user.role, { ip, ua })\n\n    res.setCookie('auth-token', jwt)\n    res.send(\n      new ResOp({\n        data: { authToken: jwt },\n      }),\n    )\n  }\n\n  @Post('register')\n  @ProtectKeys(['password'])\n  async register(@Body() dto: RegisterDto) {\n    return await this.userService.register(dto)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthGatewayOptions.html":{"url":"interfaces/AuthGatewayOptions.html","title":"interface - AuthGatewayOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthGatewayOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/socket/shared/auth.gateway.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            namespace\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        namespace\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        namespace:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { } from '@nestjs/common'\nimport { OnEvent } from '@nestjs/event-emitter'\nimport { JwtService } from '@nestjs/jwt'\nimport type {\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets'\nimport { WebSocketServer } from '@nestjs/websockets'\n\nimport { EventBusEvents } from '@server/constants/event-bus.constant'\n\nimport { TokenService } from '@server/modules/auth/services/token.service'\nimport { CacheService } from '@server/shared/cache/cache.service'\nimport type { Socket } from 'socket.io'\nimport { Namespace } from 'socket.io'\n\nimport { BroadcastBaseGateway } from '../base.gateway'\nimport { BusinessEvents } from '../business-event.constant'\n\nexport interface AuthGatewayOptions {\n  namespace: string\n}\n\n// eslint-disable-next-line ts/ban-ts-comment\n// @ts-expect-error\nexport interface IAuthGateway extends OnGatewayConnection, OnGatewayDisconnect, BroadcastBaseGateway {}\n\nexport function createAuthGateway(options: AuthGatewayOptions): new (...args: any[]) => IAuthGateway {\n  const { namespace } = options\n\n  class AuthGateway extends BroadcastBaseGateway implements IAuthGateway {\n    constructor(\n      protected readonly jwtService: JwtService,\n      protected readonly tokenService: TokenService,\n      private readonly cacheService: CacheService,\n    ) {\n      super()\n    }\n\n    @WebSocketServer()\n    protected namespace: Namespace\n\n    async authFailed(client: Socket) {\n      client.send(\n        this.gatewayMessageFormat(BusinessEvents.AUTH_FAILED, '认证失败'),\n      )\n      client.disconnect()\n    }\n\n    async authToken(token: string): Promise {\n      if (typeof token !== 'string')\n        return false\n\n      const validJwt = async () => {\n        try {\n          const ok = await this.jwtService.verify(token)\n\n          if (!ok)\n            return false\n        }\n        catch {\n          return false\n        }\n        // is not crash, is verify\n        return true\n      }\n\n      return await validJwt()\n    }\n\n    async handleConnection(client: Socket) {\n      const token\n        = client.handshake.query.token\n        || client.handshake.headers.authorization\n        || client.handshake.headers.Authorization\n      if (!token)\n        return this.authFailed(client)\n\n      if (!(await this.authToken(token as string)))\n        return this.authFailed(client)\n\n      super.handleConnect(client)\n\n      const sid = client.id\n      this.tokenSocketIdMap.set(token.toString(), sid)\n\n      return this.jwtService.decode(token as string) as IAuthUser\n    }\n\n    handleDisconnect(client: Socket) {\n      super.handleDisconnect(client)\n    }\n\n    tokenSocketIdMap = new Map()\n\n    @OnEvent(EventBusEvents.TokenExpired)\n    handleTokenExpired(token: string) {\n      // consola.debug(`token expired: ${token}`)\n\n      const server = this.namespace.server\n      const sid = this.tokenSocketIdMap.get(token)\n      if (!sid)\n        return false\n\n      const socket = server.of(`/${namespace}`).sockets.get(sid)\n      if (socket) {\n        socket.disconnect()\n        super.handleDisconnect(socket)\n        return true\n      }\n      return false\n    }\n\n    override broadcast(event: BusinessEvents, data: any) {\n      this.cacheService.emitter\n        .of(`/${namespace}`)\n        .emit('message', this.gatewayMessageFormat(event, data))\n    }\n  }\n\n  return AuthGateway\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nCaptchaModule\n\nCaptchaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCaptchaModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\nAdminEventsGateway  -->\n\nAuthModule->AdminEventsGateway \n\n\n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\nWebEventsGateway  -->\n\nAuthModule->WebEventsGateway \n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            AccountController\n                        \n                        \n                            EmailController\n                        \n                        \n                            GoogleController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaptchaModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module, Provider } from '@nestjs/common'\n\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { JwtModule } from '@nestjs/jwt'\nimport { PassportModule } from '@nestjs/passport'\n\nimport { ISecurityConfig } from '@server/config'\nimport { isDev } from '@server/global/env'\n\nimport { UserModule } from '../user/user.module'\n\nimport { AuthController } from './auth.controller'\nimport { AuthService } from './auth.service'\nimport { CaptchaModule } from './captcha/captcha.module'\nimport { AccountController } from './controllers/account.controller'\nimport { EmailController } from './controllers/email.controller'\nimport { GoogleController } from './controllers/google.controller'\nimport { TokenService } from './services/token.service'\nimport { GoogleStrategy } from './strategies/google.strategy'\nimport { JwtStrategy } from './strategies/jwt.strategy'\nimport { LocalStrategy } from './strategies/local.strategy'\n\nconst controllers = [\n  AuthController,\n  AccountController,\n  EmailController,\n  GoogleController,\n]\nconst providers: Provider[] = [AuthService, TokenService]\nconst strategies = [LocalStrategy, JwtStrategy, GoogleStrategy]\n\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => {\n        const { jwtSecret, jwtExprire }\n          = configService.get('security')!\n\n        return {\n          secret: jwtSecret,\n          expires: jwtExprire,\n          ignoreExpiration: isDev,\n        }\n      },\n      inject: [ConfigService],\n    }),\n    CaptchaModule,\n    UserModule,\n  ],\n  controllers: [...controllers],\n  providers: [...providers, ...strategies],\n  exports: [JwtModule, ...providers],\n})\n@Global()\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearLoginStatus\n                            \n                            \n                                    Async\n                                sign\n                            \n                            \n                                    Async\n                                validateToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis, userService: UserService, tokenService: TokenService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tokenService\n                                                  \n                                                        \n                                                                        TokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearLoginStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearLoginStatus(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sign\n                        \n                    \n                \n            \n            \n                \n                        \n                    sign(userId: string, role: Role, otherInfo?: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                        Role\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                otherInfo\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(credential: string, password: string, type: LoginType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credential\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            LoginType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRedis } from '@liaoliaots/nestjs-redis'\nimport { Injectable } from '@nestjs/common'\n\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { UserService } from '@server/modules/user/user.service'\n\nimport { sleep } from '@server/utils/tool.util'\nimport { compareSync } from 'bcrypt'\nimport Redis from 'ioredis'\n\nimport { LoginType, Role } from './auth.constant'\nimport { TokenService } from './services/token.service'\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRedis()\n    private readonly redis: Redis,\n    private readonly userService: UserService,\n    private readonly tokenService: TokenService,\n  ) {}\n\n  async validateUser(credential: string, password: string, type: LoginType) {\n    const user = type === 'account'\n      ? await this.userService.getUserByUsername(credential)\n      : type === 'email'\n        ? await this.userService.getUserByEmail(credential)\n        : null\n\n    if (!user)\n      throw new BizException(ErrorCodeEnum.PasswordMismatch)\n\n    const isSamePassword = compareSync(password, user.password)\n\n    if (!isSamePassword) {\n      await sleep(1500)\n      throw new BizException(ErrorCodeEnum.PasswordMismatch)\n    }\n\n    const { password: _p, ...result } = user\n    return result\n  }\n\n  async validateToken(token: string) {\n    return await this.tokenService.verifyToken(token)\n  }\n\n  async sign(\n    userId: string,\n    role: Role,\n    otherInfo?: {\n      ip: string\n      ua: string\n    },\n  ): Promise {\n    const token = await this.tokenService.generateToken({ id: userId, role }, otherInfo)\n\n    return token\n  }\n\n  async clearLoginStatus(userId: string): Promise {\n    await this.tokenService.removeToken(userId)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseAbility.html":{"url":"classes/BaseAbility.html","title":"class - BaseAbility","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseAbility\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/casl/ability.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        createForUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createForUser(user: IAuthUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/casl/ability.class.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AppAbility\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PureAbility } from '@casl/ability'\nimport { Subjects } from '@casl/prisma'\nimport { Collection, Comment, History, Note, NoteTag, Notification, Todo, User } from '@youni/database'\n\nexport enum Action {\n  Manage = 'manage',\n  Create = 'create',\n  Read = 'read',\n  Update = 'update',\n  Delete = 'delete',\n}\n\n// eslint-disable-next-line ts/consistent-type-definitions\nexport type PrismaSubjects = {\n  User: User\n  Todo: Todo\n  Note: Note\n  NoteTag: NoteTag\n  Collection: Collection\n  History: History\n  Comment: Comment\n  Notification: Notification\n}\n\nexport type AppAbility = PureAbility]>\n\nexport abstract class BaseAbility {\n  abstract createForUser(user: IAuthUser): AppAbility\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseGateway.html":{"url":"classes/BaseGateway.html","title":"class - BaseGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/socket/base.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                gatewayMessageFormat\n                            \n                            \n                                handleConnect\n                            \n                            \n                                handleDisconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        gatewayMessageFormat\n                        \n                    \n                \n            \n            \n                \n                        \n                    gatewayMessageFormat(type: BusinessEvents, message: any, code?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/socket/base.gateway.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            BusinessEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { type: BusinessEvents; data: any; code: number; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnect\n                        \n                    \n                \n            \n            \n                \nhandleConnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/socket/base.gateway.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/socket/base.gateway.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { Socket } from 'socket.io'\n\nimport { BusinessEvents } from './business-event.constant'\n\nexport abstract class BaseGateway {\n  public gatewayMessageFormat(\n    type: BusinessEvents,\n    message: any,\n    code?: number,\n  ) {\n    return {\n      type,\n      data: message,\n      code,\n    }\n  }\n\n  handleDisconnect(client: Socket) {\n    client.send(\n      this.gatewayMessageFormat(BusinessEvents.GATEWAY_CONNECT, 'WebSocket 断开'),\n    )\n  }\n\n  handleConnect(client: Socket) {\n    client.send(\n      this.gatewayMessageFormat(BusinessEvents.GATEWAY_CONNECT, 'WebSocket 已连接'),\n    )\n  }\n}\n\nexport abstract class BroadcastBaseGateway extends BaseGateway {\n  broadcast(event: BusinessEvents, data: any) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BatchDeleteDto.html":{"url":"classes/BatchDeleteDto.html","title":"class - BatchDeleteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BatchDeleteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/delete.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(BatchDeleteSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nconst BatchDeleteSchema = z.object({\n  ids: z.array(z.string()),\n})\n\nexport class BatchDeleteDto extends createZodDto(BatchDeleteSchema) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BizException.html":{"url":"classes/BizException.html","title":"class - BizException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BizException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/biz.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                业务异常抛出\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bizCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(arg: any)\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/biz.exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        arg\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        bizCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCodeEnum\n\n                    \n                \n                    \n                        \n                                Defined in src/common/exceptions/biz.exception.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common'\n\nimport { ErrorCode, ErrorCodeEnum } from '@server/constants/error-code.constant'\n\n/**\n * 业务异常抛出\n */\nexport class BizException extends HttpException {\n  public bizCode: ErrorCodeEnum\n\n  constructor(message: string)\n  constructor(code: ErrorCodeEnum)\n  constructor(arg: any) {\n    if (typeof arg == 'string') {\n      const message = arg\n      super(\n        HttpException.createBody({\n          code: ErrorCodeEnum.Default,\n          message,\n        }),\n        HttpStatus.OK,\n      )\n      this.bizCode = ErrorCodeEnum.Default\n\n      return\n    }\n\n    const code = arg as ErrorCodeEnum\n    const message = ErrorCode[code]\n\n    super(\n      HttpException.createBody({\n        code,\n        message,\n      }),\n      HttpStatus.OK,\n    )\n\n    this.bizCode = code\n  }\n}\n\n// export { BizException as BusinessException }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BroadcastBaseGateway.html":{"url":"classes/BroadcastBaseGateway.html","title":"class - BroadcastBaseGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BroadcastBaseGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/socket/base.gateway.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseGateway\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                broadcast\n                            \n                            \n                                    Public\n                                gatewayMessageFormat\n                            \n                            \n                                handleConnect\n                            \n                            \n                                handleDisconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        broadcast\n                        \n                    \n                \n            \n            \n                \nbroadcast(event: BusinessEvents, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/socket/base.gateway.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            BusinessEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        gatewayMessageFormat\n                        \n                    \n                \n            \n            \n                \n                        \n                    gatewayMessageFormat(type: BusinessEvents, message: any, code?: number)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseGateway\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseGateway:6\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            BusinessEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { type: BusinessEvents; data: any; code: number; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnect\n                        \n                    \n                \n            \n            \n                \nhandleConnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseGateway\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseGateway:24\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseGateway\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseGateway:18\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { Socket } from 'socket.io'\n\nimport { BusinessEvents } from './business-event.constant'\n\nexport abstract class BaseGateway {\n  public gatewayMessageFormat(\n    type: BusinessEvents,\n    message: any,\n    code?: number,\n  ) {\n    return {\n      type,\n      data: message,\n      code,\n    }\n  }\n\n  handleDisconnect(client: Socket) {\n    client.send(\n      this.gatewayMessageFormat(BusinessEvents.GATEWAY_CONNECT, 'WebSocket 断开'),\n    )\n  }\n\n  handleConnect(client: Socket) {\n    client.send(\n      this.gatewayMessageFormat(BusinessEvents.GATEWAY_CONNECT, 'WebSocket 已连接'),\n    )\n  }\n}\n\nexport abstract class BroadcastBaseGateway extends BaseGateway {\n  broadcast(event: BusinessEvents, data: any) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BullModule.html":{"url":"modules/BullModule.html","title":"module - BullModule","body":"\n                   \n\n\n\n\n    Modules\n    BullModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/bull/bull.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { BullModule as NestBullModule } from '@nestjs/bull'\nimport { Global, Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { IRedisConfig } from '@server/config'\nimport { prefix } from 'src/utils/redis.util'\n\n@Global()\n@Module({\n  imports: [\n    NestBullModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => {\n        const redisOptions = configService.get('redis')!\n\n        return {\n          redis: {\n            host: redisOptions.host,\n            port: redisOptions.port,\n            password: redisOptions.password,\n          },\n          prefix,\n        }\n      },\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class BullModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CacheModule.html":{"url":"modules/CacheModule.html","title":"module - CacheModule","body":"\n                   \n\n\n\n\n    Modules\n    CacheModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CacheModule\n\n\n\ncluster_CacheModule_exports\n\n\n\ncluster_CacheModule_providers\n\n\n\n\nCacheService \n\nCacheService \n\n\n\nCacheModule\n\nCacheModule\n\nCacheService  -->\n\nCacheModule->CacheService \n\n\n\n\n\nCacheService\n\nCacheService\n\nCacheModule -->\n\nCacheService->CacheModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/cache/cache.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CacheService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CacheService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule as NestCacheModule } from '@nestjs/cache-manager'\nimport { Global, Module } from '@nestjs/common'\n\nimport { ConfigModule, ConfigService } from '@nestjs/config'\n\nimport { IRedisConfig } from '@server/config'\nimport { redisStore } from 'cache-manager-ioredis-yet'\nimport { RedisOptions } from 'ioredis'\n\nimport { CacheService } from './cache.service'\n\n@Global()\n@Module({\n  imports: [\n    NestCacheModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => {\n        const redisOptions: RedisOptions = configService.get('redis')!\n\n        return {\n          isGlobal: true,\n          store: redisStore,\n          isCacheableValue: () => true,\n          ...redisOptions,\n        }\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [CacheService],\n  exports: [CacheService],\n})\nexport class CacheModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheService.html":{"url":"injectables/CacheService.html","title":"injectable - CacheService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/cache/cache.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _emitter\n                            \n                            \n                                    Private\n                                cache\n                            \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cacheGet\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getClient\n                            \n                            \n                                    Public\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    redisClient\n                                \n                                \n                                    emitter\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cache: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/shared/cache/cache.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cache\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cacheGet\n                        \n                    \n                \n            \n            \n                \n                        \n                    cacheGet(options: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/cache/cache.service.ts:57\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: TCacheKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/cache/cache.service.ts:32\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            TCacheKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TCacheResult\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClient()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/cache/cache.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Redis\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: TCacheKey, value: any, milliseconds: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/cache/cache.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            TCacheKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                milliseconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _emitter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Emitter\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/cache/cache.service.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Cache\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/cache/cache.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(CacheService.name)\n                    \n                \n                    \n                        \n                                Defined in src/shared/cache/cache.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        redisClient\n                    \n                \n\n                \n                    \n                        getredisClient()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/cache/cache.service.ts:26\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        emitter\n                    \n                \n\n                \n                    \n                        getemitter()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/cache/cache.service.ts:46\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { CACHE_MANAGER } from '@nestjs/cache-manager'\nimport { Inject, Injectable, Logger } from '@nestjs/common'\nimport { RedisIoAdapterKey } from '@server/common/adapters/socket.adapter'\nimport { RedisKeys } from '@server/constants/cache.constant'\nimport { getRedisKey } from '@server/utils/redis.util'\nimport { Emitter } from '@socket.io/redis-emitter'\nimport { Cache } from 'cache-manager'\nimport type { Redis } from 'ioredis'\n\n// 获取器\nexport type TCacheKey = string\nexport type TCacheResult = Promise\n\n@Injectable()\nexport class CacheService {\n  private cache!: Cache\n  private logger = new Logger(CacheService.name)\n\n  constructor(@Inject(CACHE_MANAGER) cache: Cache) {\n    this.cache = cache\n    this.redisClient.on('ready', () => {\n      this.logger.log('Redis is ready!')\n    })\n  }\n\n  private get redisClient(): Redis {\n    // eslint-disable-next-line ts/ban-ts-comment\n    // @ts-expect-error\n    return this.cache.store.client\n  }\n\n  public get(key: TCacheKey): TCacheResult {\n    return this.cache.get(key)\n  }\n\n  public set(key: TCacheKey, value: any, milliseconds: number) {\n    return this.cache.set(key, value, milliseconds)\n  }\n\n  public getClient() {\n    return this.redisClient\n  }\n\n  private _emitter: Emitter\n\n  public get emitter(): Emitter {\n    if (this._emitter)\n      return this._emitter\n\n    this._emitter = new Emitter(this.redisClient, {\n      key: RedisIoAdapterKey,\n    })\n\n    return this._emitter\n  }\n\n  async cacheGet(options: {\n    key: string | (Record | string | undefined | number)[]\n    getValueFun: () => Promise\n    /**\n     * 过期时间，单位秒\n     */\n    expireTime?: number\n  }): Promise {\n    const redis = this.getClient()\n    const { key, getValueFun, expireTime } = options\n    const cacheKey = getRedisKey(\n      RedisKeys.CacheGet,\n      Array.isArray(key) ? key.join('_') : key,\n    )\n    const cacheValue = await redis.get(cacheKey)\n    if (!cacheValue)\n      return setValue()\n\n    try {\n      return JSON.parse(cacheValue)\n    }\n    catch (err) {\n      this.logger.error(err)\n      return setValue()\n    }\n\n    async function setValue() {\n      const value = await getValueFun()\n      await redis.set(cacheKey, JSON.stringify(value), 'EX', expireTime || 60)\n      return value\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CannotFindException.html":{"url":"classes/CannotFindException.html","title":"class - CannotFindException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CannotFindException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exceptions/not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/exceptions/not-found.exception.ts:6\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common'\nimport { sample } from 'lodash'\n\nexport const NotFoundMessage = ['404, Not Found']\n\nexport class CannotFindException extends NotFoundException {\n  constructor() {\n    super(sample(NotFoundMessage))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CaptchaController.html":{"url":"controllers/CaptchaController.html","title":"controller - CaptchaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CaptchaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/captcha/captcha.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/captcha\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                captchaByImg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        captchaByImg\n                        \n                    \n                \n            \n            \n                \n                        \n                    captchaByImg(dto: ImageCaptchaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('image')@Public()@Throttle({default: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/captcha/captcha.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ImageCaptchaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectRedis } from '@liaoliaots/nestjs-redis'\nimport { Controller, Get, Query, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\nimport { Throttle, ThrottlerGuard } from '@nestjs/throttler'\n\nimport { RedisKeys } from '@server/constants/cache.constant'\nimport { getRedisKey } from '@server/utils/redis.util'\nimport { generateUUID } from '@server/utils/tool.util'\nimport Redis from 'ioredis'\nimport { isEmpty } from 'lodash'\nimport * as svgCaptcha from 'svg-captcha'\n\nimport { ImageCaptcha } from '../auth.model'\nimport { Public } from '../decorators/public.decorator'\n\nimport { ImageCaptchaDto } from './captcha.dto'\n\n@ApiTags('Captcha - 验证码模块')\n@UseGuards(ThrottlerGuard)\n@Controller('auth/captcha')\nexport class CaptchaController {\n  constructor(@InjectRedis() private redis: Redis) {}\n\n  @Get('image')\n  @Public()\n  @Throttle({ default: { limit: 2, ttl: 600000 } })\n  async captchaByImg(@Query() dto: ImageCaptchaDto): Promise {\n    const { width, height } = dto\n\n    const svg = svgCaptcha.create({\n      size: 4,\n      color: true,\n      noise: 4,\n      width: isEmpty(width) ? 100 : width,\n      height: isEmpty(height) ? 50 : height,\n      charPreset: '1234567890',\n    })\n    const data = {\n      image: `data:image/svg+xml;base64,${Buffer.from(svg.data).toString(\n        'base64',\n      )}`,\n      id: generateUUID(),\n    }\n    // 5分钟过期时间\n    await this.redis.set(getRedisKey(RedisKeys.CaptchaStore, data.id), svg.text, 'EX', 5 * 60)\n    return data\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaptchaModule.html":{"url":"modules/CaptchaModule.html","title":"module - CaptchaModule","body":"\n                   \n\n\n\n\n    Modules\n    CaptchaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CaptchaModule\n\n\n\ncluster_CaptchaModule_exports\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\n\n\nCaptchaModule\n\nCaptchaModule\n\nAdminEventsGateway  -->\n\nCaptchaModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nCaptchaModule->WebEventsGateway \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/captcha/captcha.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            CaptchaController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Provider } from '@nestjs/common'\n\nimport { CaptchaController } from './captcha.controller'\nimport { CaptchaService } from './captcha.service'\n\nconst providers: Provider[] = [CaptchaService]\n\n@Module({\n  controllers: [CaptchaController],\n  providers: [...providers],\n  exports: [...providers],\n})\nexport class CaptchaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaptchaService.html":{"url":"injectables/CaptchaService.html","title":"injectable - CaptchaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaptchaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/captcha/captcha.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkImgCaptcha\n                            \n                            \n                                    Async\n                                log\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/captcha/captcha.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkImgCaptcha\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkImgCaptcha(id: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/captcha/captcha.service.ts:22\n                        \n                    \n\n\n            \n                \n                        校验图片验证码\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                        \n                    log(account: string, code: string, provider: \"sms\" | \"email\", userId?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/captcha/captcha.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                provider\n                                            \n                                                        \"sms\" | \"email\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRedis } from '@liaoliaots/nestjs-redis'\nimport { Injectable } from '@nestjs/common'\n\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { RedisKeys } from '@server/constants/cache.constant'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { getRedisKey } from '@server/utils/redis.util'\nimport Redis from 'ioredis'\nimport { isEmpty } from 'lodash'\n\n@Injectable()\nexport class CaptchaService {\n  constructor(\n    @InjectRedis() private readonly redis: Redis,\n\n    // private captchaLogService: CaptchaLogService,\n  ) {}\n\n  /**\n   * 校验图片验证码\n   */\n  async checkImgCaptcha(id: string, code: string): Promise {\n    const key = getRedisKey(RedisKeys.CaptchaStore, id)\n    const result = await this.redis.get(key)\n    if (isEmpty(result) || code.toLowerCase() !== result?.toLowerCase())\n      throw new BizException(ErrorCodeEnum.VerificationCodeError)\n\n    // 校验成功后移除验证码\n    await this.redis.del(key)\n  }\n\n  async log(\n    account: string,\n    code: string,\n    provider: 'sms' | 'email',\n    userId?: number,\n  ): Promise {\n    // await this.captchaLogService.create(account, code, provider, userId)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nAbilityService \n\nAbilityService \n\n\n\nCaslModule\n\nCaslModule\n\nAbilityService  -->\n\nCaslModule->AbilityService \n\n\n\n\n\nAbilityService\n\nAbilityService\n\nCaslModule -->\n\nAbilityService->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AbilityService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AbilityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common'\n\nimport { DiscoveryModule } from '@nestjs/core'\n\nimport { AbilityService } from './casl.service'\n\n@Module({\n  imports: [DiscoveryModule],\n  providers: [AbilityService],\n  exports: [AbilityService],\n})\n@Global()\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckCodeDto.html":{"url":"classes/CheckCodeDto.html","title":"class - CheckCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/captcha/captcha.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        createZodDto(z.object({\n  identity: z.string(),\n  code: z.string(),\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport class ImageCaptchaDto extends createZodDto(z.object({\n  width: z.number().optional().default(100),\n  height: z.number().optional().default(50),\n})) {}\n\nexport class SendEmailCodeDto extends createZodDto(z.object({\n  email: z.string().email({ message: '邮箱格式不正确' }),\n})) {}\n\nexport class SendSmsCodeDto extends createZodDto(z.object({\n  phone: z.string().regex(/^1[3-9]\\d{9}$/, { message: '手机号格式不正确' }),\n})) {}\n\nexport class CheckCodeDto extends createZodDto(z.object({\n  identity: z.string(),\n  code: z.string(),\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CollectionAbility.html":{"url":"injectables/CollectionAbility.html","title":"injectable - CollectionAbility","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CollectionAbility\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/collection/collection.ability.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: IAuthUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.ability.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AbilityBuilder } from '@casl/ability'\nimport { createPrismaAbility } from '@casl/prisma'\nimport { Injectable } from '@nestjs/common'\n\nimport { Role } from '@server/modules/auth/auth.constant'\n\nimport { Action, AppAbility, BaseAbility } from '../casl/ability.class'\nimport { DefineAbility } from '../casl/ability.decorator'\n\n@DefineAbility('Collection')\n@Injectable()\nexport class CollectionAbility implements BaseAbility {\n  createForUser(user: IAuthUser) {\n    const { can, build } = new AbilityBuilder(createPrismaAbility)\n\n    if (user.role === Role.User) {\n      can(Action.Create, 'Collection')\n      can(Action.Read, 'Collection', { isPublished: true })\n      can(Action.Update, 'Collection', { userId: user.id })\n      can(Action.Delete, 'Collection', { userId: user.id })\n    }\n\n    return build()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CollectionController.html":{"url":"controllers/CollectionController.html","title":"controller - CollectionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CollectionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/collection/collection.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                collections\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n} from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\nimport { CollectionService } from './collection.service'\n\n@ApiTags('Business - 收藏模块')\n@Controller('collections')\nexport class CollectionController {\n  constructor(private readonly collectionService: CollectionService) { }\n\n  // see collection.trpc.ts\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionDto.html":{"url":"classes/CollectionDto.html","title":"class - CollectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/collection/collection.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(CollectionInputSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { CollectionOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const CollectionInputSchema = CollectionOptionalDefaultsSchema.pick({\n  name: true,\n  description: true,\n  isPublished: true,\n})\n\nexport class CollectionDto extends createZodDto(CollectionInputSchema) { }\n\nexport class CollectionUpdateDto extends createZodDto(CollectionInputSchema.partial()) { }\n\nexport class CollectionPagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\nexport class CollectionItemQueryDto extends createZodDto(basePagerSchema.extend({\n  collectionId: z.string(),\n})) { }\n\nexport const CollectionItemSchema = z.object({\n  itemId: z.string(),\n  // collectionId: z.string(),\n})\n\nexport class CollectionItemDto extends createZodDto(CollectionItemSchema) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionItemDto.html":{"url":"classes/CollectionItemDto.html","title":"class - CollectionItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/collection/collection.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(CollectionItemSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { CollectionOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const CollectionInputSchema = CollectionOptionalDefaultsSchema.pick({\n  name: true,\n  description: true,\n  isPublished: true,\n})\n\nexport class CollectionDto extends createZodDto(CollectionInputSchema) { }\n\nexport class CollectionUpdateDto extends createZodDto(CollectionInputSchema.partial()) { }\n\nexport class CollectionPagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\nexport class CollectionItemQueryDto extends createZodDto(basePagerSchema.extend({\n  collectionId: z.string(),\n})) { }\n\nexport const CollectionItemSchema = z.object({\n  itemId: z.string(),\n  // collectionId: z.string(),\n})\n\nexport class CollectionItemDto extends createZodDto(CollectionItemSchema) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionItemQueryDto.html":{"url":"classes/CollectionItemQueryDto.html","title":"class - CollectionItemQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionItemQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/collection/collection.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(basePagerSchema.extend({\n  collectionId: z.string(),\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { CollectionOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const CollectionInputSchema = CollectionOptionalDefaultsSchema.pick({\n  name: true,\n  description: true,\n  isPublished: true,\n})\n\nexport class CollectionDto extends createZodDto(CollectionInputSchema) { }\n\nexport class CollectionUpdateDto extends createZodDto(CollectionInputSchema.partial()) { }\n\nexport class CollectionPagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\nexport class CollectionItemQueryDto extends createZodDto(basePagerSchema.extend({\n  collectionId: z.string(),\n})) { }\n\nexport const CollectionItemSchema = z.object({\n  itemId: z.string(),\n  // collectionId: z.string(),\n})\n\nexport class CollectionItemDto extends createZodDto(CollectionItemSchema) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CollectionModule.html":{"url":"modules/CollectionModule.html","title":"module - CollectionModule","body":"\n                   \n\n\n\n\n    Modules\n    CollectionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CollectionModule\n\n\n\ncluster_CollectionModule_exports\n\n\n\ncluster_CollectionModule_imports\n\n\n\ncluster_CollectionModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nCollectionModule\n\nCollectionModule\n\nCollectionModule -->\n\nUserModule->CollectionModule\n\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\nAdminEventsGateway  -->\n\nCollectionModule->AdminEventsGateway \n\n\n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\nWebEventsGateway  -->\n\nCollectionModule->WebEventsGateway \n\n\n\n\n\nCollectionAbility\n\nCollectionAbility\n\nCollectionModule -->\n\nCollectionAbility->CollectionModule\n\n\n\n\n\nCollectionService\n\nCollectionService\n\nCollectionModule -->\n\nCollectionService->CollectionModule\n\n\n\n\n\nCollectionTrpcRouter\n\nCollectionTrpcRouter\n\nCollectionModule -->\n\nCollectionTrpcRouter->CollectionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/collection/collection.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CollectionAbility\n                        \n                        \n                            CollectionService\n                        \n                        \n                            CollectionTrpcRouter\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CollectionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Provider } from '@nestjs/common'\n\nimport { UserModule } from '../user/user.module'\n\nimport { CollectionAbility } from './collection.ability'\nimport { CollectionController } from './collection.controller'\nimport { CollectionService } from './collection.service'\nimport { CollectionTrpcRouter } from './collection.trpc'\n\nconst providers: Provider[] = [\n  CollectionService,\n  CollectionTrpcRouter,\n  CollectionAbility,\n]\n\n@Module({\n  imports: [\n    UserModule,\n  ],\n  controllers: [CollectionController],\n  providers,\n  exports: [...providers],\n})\nexport class CollectionModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionPagerDto.html":{"url":"classes/CollectionPagerDto.html","title":"class - CollectionPagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionPagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/collection/collection.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(basePagerSchema.extend({\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { CollectionOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const CollectionInputSchema = CollectionOptionalDefaultsSchema.pick({\n  name: true,\n  description: true,\n  isPublished: true,\n})\n\nexport class CollectionDto extends createZodDto(CollectionInputSchema) { }\n\nexport class CollectionUpdateDto extends createZodDto(CollectionInputSchema.partial()) { }\n\nexport class CollectionPagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\nexport class CollectionItemQueryDto extends createZodDto(basePagerSchema.extend({\n  collectionId: z.string(),\n})) { }\n\nexport const CollectionItemSchema = z.object({\n  itemId: z.string(),\n  // collectionId: z.string(),\n})\n\nexport class CollectionItemDto extends createZodDto(CollectionItemSchema) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CollectionService.html":{"url":"injectables/CollectionService.html","title":"injectable - CollectionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CollectionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/collection/collection.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addItem\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createDefaultCollection\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                deleteItem\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getDefaultCollection\n                            \n                            \n                                    Async\n                                getItemCollectedCount\n                            \n                            \n                                    Async\n                                getItems\n                            \n                            \n                                    Async\n                                isItemInCollection\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/modules/collection/collection.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    addItem(itemId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CollectionDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CollectionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createDefaultCollection\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDefaultCollection(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteItem(itemId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDefaultCollection\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDefaultCollection(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getItemCollectedCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemCollectedCount(itemId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:200\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getItems\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItems(dto: CollectionItemQueryDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CollectionItemQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isItemInCollection\n                        \n                    \n                \n            \n            \n                \n                        \n                    isItemInCollection(itemId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:184\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(dto: CollectionPagerDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CollectionPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CollectionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CollectionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExtendedPrismaClient\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectPrismaClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/collection/collection.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\nimport { EventEmitter2 } from '@nestjs/event-emitter'\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { ExtendedPrismaClient, InjectPrismaClient } from '@server/shared/database/prisma.extension'\nimport { resourceNotFoundWrapper } from '@server/utils/prisma.util'\n\nimport { Note } from '@youni/database'\n\nimport { NoteCollectEvent } from '../note/events/note-collect.event'\nimport { NoteEvents } from '../note/note.constant'\n\nimport { CollectionDto, CollectionItemQueryDto, CollectionPagerDto } from './collection.dto'\n\n@Injectable()\nexport class CollectionService {\n  @InjectPrismaClient()\n  private readonly prisma: ExtendedPrismaClient\n\n  constructor(\n    private readonly eventEmitter: EventEmitter2,\n  ) { }\n\n  async paginate(\n    dto: CollectionPagerDto,\n    userId: string,\n  ) {\n    const { cursor, limit } = dto\n\n    return await this.prisma.collection.paginate({\n      where: {\n        userId,\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n  }\n\n  async findOne(id: string) {\n    return this.prisma.collection.findUnique({\n      where: {\n        id,\n      },\n    }).catch(\n      resourceNotFoundWrapper(\n        new BizException(ErrorCodeEnum.ResourceNotFound),\n      ),\n    )\n  }\n\n  async create(dto: CollectionDto, userId: string) {\n    const { ...data } = dto\n\n    await this.prisma.collection.create({\n      data: {\n        ...data,\n        userId,\n      },\n    })\n  }\n\n  async createDefaultCollection(userId: string) {\n    const exists = await this.prisma.collection.findFirst({\n      where: {\n        isDefault: true,\n        userId,\n      },\n    })\n\n    if (exists)\n      return exists\n\n    return await this.prisma.collection.create({\n      data: {\n        name: '我的收藏',\n        isDefault: true,\n        userId,\n      },\n    })\n  }\n\n  async getDefaultCollection(userId: string) {\n    const collection = await this.prisma.collection.findFirst({\n      where: {\n        isDefault: true,\n        userId,\n      },\n    })\n\n    return (collection ?? await this.createDefaultCollection(userId))\n  }\n\n  async update(id: string, dto: CollectionDto) {\n    const { ...data } = dto\n\n    await this.prisma.collection.update({\n      where: { id },\n      data: {\n        ...data,\n      },\n    })\n  }\n\n  async delete(id: string) {\n    await this.prisma.collection.delete({\n      where: { id },\n    })\n  }\n\n  async getItems(dto: CollectionItemQueryDto, userId: string) {\n    const { collectionId, cursor, limit } = dto\n\n    const [items, meta] = await this.prisma.note.paginate({\n      where: {\n        collections: {\n          some: {\n            id: collectionId,\n            userId,\n          },\n        },\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    return { items, meta }\n  }\n\n  async addItem(itemId: string, userId: string) {\n    const item = await this.prisma.note\n      .findUniqueOrThrow({ where: { id: itemId } })\n      .catch(resourceNotFoundWrapper(\n        new BizException(ErrorCodeEnum.NoteNotFound),\n      ))\n\n    const defaultCollection = await this.getDefaultCollection(userId)\n\n    await this.prisma.collection.update({\n      where: {\n        id: defaultCollection.id,\n        userId,\n      },\n      data: {\n        note: {\n          connect: {\n            id: item.id,\n          },\n        },\n      },\n    })\n\n    this.eventEmitter.emit(NoteEvents.NoteCollect, new NoteCollectEvent({\n      note: item,\n      senderId: userId,\n    }))\n  }\n\n  async deleteItem(itemId: string, userId: string) {\n    const defaultCollection = await this.getDefaultCollection(userId)\n\n    await this.prisma.collection.update({\n      where: {\n        id: defaultCollection.id,\n        userId,\n      },\n      data: {\n        note: {\n          disconnect: {\n            id: itemId,\n          },\n        },\n      },\n    })\n\n    this.eventEmitter.emit(NoteEvents.NoteUncollect, new NoteCollectEvent({\n      note: { id: itemId } as Note,\n      senderId: userId,\n    }))\n  }\n\n  async isItemInCollection(itemId: string, userId: string) {\n    // const defaultCollection = await this.getDefaultCollection(userId)\n\n    return await this.prisma.collection.exists({\n      where: {\n        // id: defaultCollection.id,\n        note: {\n          some: {\n            id: itemId,\n          },\n        },\n        userId,\n      },\n    })\n  }\n\n  async getItemCollectedCount(itemId: string) {\n    return await this.prisma.collection.count({\n      where: {\n        note: {\n          some: {\n            id: itemId,\n          },\n        },\n      },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CollectionTrpcRouter.html":{"url":"injectables/CollectionTrpcRouter.html","title":"injectable - CollectionTrpcRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CollectionTrpcRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/collection/collection.trpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createRouter\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(trpcService: TRPCService, collectionService: CollectionService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/collection/collection.trpc.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trpcService\n                                                  \n                                                        \n                                                                        TRPCService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        collectionService\n                                                  \n                                                        \n                                                                        CollectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createRouter\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRouter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.trpc.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/collection/collection.trpc.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/collection/collection.trpc.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common'\n\nimport { IdDto } from '@server/common/dto/id.dto'\nimport { TRPCRouter } from '@server/shared/trpc/trpc.decorator'\nimport { defineTrpcRouter } from '@server/shared/trpc/trpc.helper'\nimport { TRPCService } from '@server/shared/trpc/trpc.service'\n\nimport { z } from 'zod'\n\nimport { Action } from '../casl/ability.class'\n\nimport { CollectionInputSchema, CollectionItemDto, CollectionPagerDto } from './collection.dto'\nimport { CollectionService } from './collection.service'\n\n@TRPCRouter()\n@Injectable()\nexport class CollectionTrpcRouter implements OnModuleInit {\n  private router: ReturnType\n\n  constructor(\n    private readonly trpcService: TRPCService,\n    private readonly collectionService: CollectionService,\n  ) { }\n\n  onModuleInit() {\n    this.router = this.createRouter()\n  }\n\n  private createRouter() {\n    const procedureAuth = this.trpcService.procedureAuth\n    return defineTrpcRouter('collection', {\n      list: procedureAuth\n        .input(CollectionPagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          return this.collectionService.paginate(input, user.id)\n        }),\n      create: procedureAuth\n        .input(CollectionInputSchema)\n        .meta({ model: 'Collection', action: Action.Create })\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          return this.collectionService.create(input, user.id)\n        }),\n      update: procedureAuth\n        .input(CollectionInputSchema.extend({ id: z.string() }))\n        .meta({ model: 'Collection', action: Action.Update })\n        .mutation(async (opt) => {\n          const { input } = opt\n          const { id, ...data } = input\n\n          return this.collectionService.update(id, data)\n        }),\n      delete: procedureAuth\n        .input(IdDto.schema)\n        .meta({ model: 'Collection', action: Action.Delete })\n        .mutation(async (opt) => {\n          const { input } = opt\n          const { id } = input\n\n          return this.collectionService.delete(id)\n        }),\n      defaultCollection: procedureAuth\n        .query(async (opt) => {\n          const { ctx: { user } } = opt\n\n          return this.collectionService.getDefaultCollection(user.id)\n        }),\n      addItem: procedureAuth\n        .input(CollectionItemDto.schema)\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { itemId } = input\n\n          return this.collectionService.addItem(itemId, user.id)\n        }),\n      deleteItem: procedureAuth\n        .input(CollectionItemDto.schema)\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { itemId } = input\n\n          return this.collectionService.deleteItem(itemId, user.id)\n        }),\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionUpdateDto.html":{"url":"classes/CollectionUpdateDto.html","title":"class - CollectionUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/collection/collection.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(CollectionInputSchema.partial())\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { CollectionOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const CollectionInputSchema = CollectionOptionalDefaultsSchema.pick({\n  name: true,\n  description: true,\n  isPublished: true,\n})\n\nexport class CollectionDto extends createZodDto(CollectionInputSchema) { }\n\nexport class CollectionUpdateDto extends createZodDto(CollectionInputSchema.partial()) { }\n\nexport class CollectionPagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\nexport class CollectionItemQueryDto extends createZodDto(basePagerSchema.extend({\n  collectionId: z.string(),\n})) { }\n\nexport const CollectionItemSchema = z.object({\n  itemId: z.string(),\n  // collectionId: z.string(),\n})\n\nexport class CollectionItemDto extends createZodDto(CollectionItemSchema) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentAbility.html":{"url":"injectables/CommentAbility.html","title":"injectable - CommentAbility","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentAbility\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.ability.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: IAuthUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.ability.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AbilityBuilder } from '@casl/ability'\nimport { createPrismaAbility } from '@casl/prisma'\nimport { Injectable } from '@nestjs/common'\n\nimport { Role } from '@server/modules/auth/auth.constant'\n\nimport { Action, AppAbility, BaseAbility } from '../casl/ability.class'\nimport { DefineAbility } from '../casl/ability.decorator'\n\n@DefineAbility('Comment')\n@Injectable()\nexport class CommentAbility implements BaseAbility {\n  createForUser(user: IAuthUser) {\n    const { can, build } = new AbilityBuilder(createPrismaAbility)\n\n    if (user.role === Role.Admin)\n      can(Action.Manage, 'Comment')\n\n    if (user.role === Role.User) {\n      can(Action.Create, 'Comment')\n      can(Action.Read, 'Comment')\n      // can(Action.Update, 'Comment', { userId: user.id })\n      can(Action.Delete, 'Comment', { userId: user.id })\n    }\n\n    return build()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentController.html":{"url":"controllers/CommentController.html","title":"controller - CommentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                like\n                            \n                            \n                                    \n                                    \n                                    Async\n                                list\n                            \n                            \n                                    \n                                    \n                                    Async\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateCommentDto, ip: string, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: '创建评论'})@Idempotence({expired: 20, errorMessage: '请不要重复评论'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: '删除评论'})@Policy({model: 'Comment', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        like\n                        \n                    \n                \n            \n            \n                \n                        \n                    like(undefined: IdDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/like')@ApiOperation({summary: '点赞评论'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(dto: SubCommentPagerDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/sub/page')@ApiOperation({summary: '获取子评论列表'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            SubCommentPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        page\n                        \n                    \n                \n            \n            \n                \n                        \n                    page(dto: CommentPagerDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('page')@ApiOperation({summary: '获取评论列表'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/comment/comment.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CommentPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Ip,\n  Param,\n  Post,\n  Query,\n} from '@nestjs/common'\nimport { ApiOperation, ApiTags } from '@nestjs/swagger'\n\nimport { Idempotence } from '@server/common/decorators/idempotence.decorator'\n\nimport { IdDto } from '@server/common/dto/id.dto'\nimport { scheduleManager } from '@server/utils/schedule.util'\n\nimport { AuthUser } from '../auth/decorators/auth-user.decorator'\n\nimport { Action } from '../casl/ability.class'\nimport { Policy } from '../casl/policy.decortor'\n\nimport { CommentPagerDto, CreateCommentDto, SubCommentPagerDto } from './comment.dto'\nimport { CommentService } from './comment.service'\n\n@ApiTags('Business - 评论模块')\n@Controller('comments')\nexport class CommentController {\n  constructor(\n    private readonly commentService: CommentService,\n  ) { }\n\n  @Get('page')\n  @ApiOperation({ summary: '获取评论列表' })\n  async page(@Query() dto: CommentPagerDto, @AuthUser() user: IAuthUser) {\n    const { items, meta } = await this.commentService.paginate(dto)\n\n    await this.commentService.appendInteractInfo(items, user.id)\n\n    return { items, meta }\n  }\n\n  @Get(':id/sub/page')\n  @ApiOperation({ summary: '获取子评论列表' })\n  async list(@Query() dto: SubCommentPagerDto, @AuthUser() user: IAuthUser) {\n    const { items, meta } = await this.commentService.paginateSubComment(dto)\n\n    await this.commentService.appendInteractInfo(items, user.id)\n\n    return { items, meta }\n  }\n\n  @Post()\n  @ApiOperation({ summary: '创建评论' })\n  @Idempotence({ expired: 20, errorMessage: '请不要重复评论' })\n  async create(\n    @Body() dto: CreateCommentDto,\n    @Ip() ip: string,\n    @AuthUser() user: IAuthUser,\n  ) {\n    const comment = await this.commentService.createComment(dto, user.id)\n\n    scheduleManager.schedule(async () => {\n      await this.commentService.appendIpLocation(comment.id, ip)\n    })\n\n    // TODO: 评论通知\n\n    return comment\n  }\n\n  @Post(':id/like')\n  @ApiOperation({ summary: '点赞评论' })\n  async like(@Param() { id }: IdDto, @AuthUser() user: IAuthUser) {\n    return await this.commentService.likeComment(id, user.id)\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: '删除评论' })\n  @Policy({ model: 'Comment', action: Action.Delete })\n  async delete(@Param() { id }: IdDto) {\n    await this.commentService.deleteComment(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentCreateEvent.html":{"url":"classes/CommentCreateEvent.html","title":"class - CommentCreateEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentCreateEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/events/comment-create.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                            \n                                recipientId\n                            \n                            \n                                senderId\n                            \n                            \n                                source\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/modules/comment/events/comment-create.event.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Comment\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/events/comment-create.event.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipientId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/events/comment-create.event.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/events/comment-create.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        source\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Note\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/events/comment-create.event.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Comment, Note } from '@youni/database'\n\nexport class CommentCreateEvent {\n  source: Note\n  comment: Comment\n  senderId: string\n  recipientId: string\n\n  public constructor(partial?: Partial) {\n    Object.assign(this, partial)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentLikeEvent.html":{"url":"classes/CommentLikeEvent.html","title":"class - CommentLikeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentLikeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/events/comment-like.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                            \n                                recipientId\n                            \n                            \n                                senderId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/modules/comment/events/comment-like.event.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Comment\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/events/comment-like.event.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipientId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/events/comment-like.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/events/comment-like.event.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Comment } from '@youni/database'\n\nexport class CommentLikeEvent {\n  comment: Comment\n  senderId: string\n  recipientId: string\n\n  public constructor(partial?: Partial) {\n    Object.assign(this, partial)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentModule.html":{"url":"modules/CommentModule.html","title":"module - CommentModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_imports\n\n\n\ncluster_CommentModule_providers\n\n\n\ncluster_CommentModule_exports\n\n\n\n\nInteractModule\n\nInteractModule\n\n\n\nCommentModule\n\nCommentModule\n\nCommentModule -->\n\nInteractModule->CommentModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nCommentModule -->\n\nUserModule->CommentModule\n\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\nAdminEventsGateway  -->\n\nCommentModule->AdminEventsGateway \n\n\n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\nWebEventsGateway  -->\n\nCommentModule->WebEventsGateway \n\n\n\n\n\nCommentAbility\n\nCommentAbility\n\nCommentModule -->\n\nCommentAbility->CommentModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\nCommentTrpcRouter\n\nCommentTrpcRouter\n\nCommentModule -->\n\nCommentTrpcRouter->CommentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/comment/comment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentAbility\n                        \n                        \n                            CommentService\n                        \n                        \n                            CommentTrpcRouter\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            InteractModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Provider } from '@nestjs/common'\n\nimport { InteractModule } from '../interact/interact.module'\nimport { UserModule } from '../user/user.module'\n\nimport { CommentAbility } from './comment.ability'\nimport { CommentController } from './comment.controller'\nimport { CommentService } from './comment.service'\nimport { CommentTrpcRouter } from './comment.trpc'\n\nconst providers: Provider[] = [\n  CommentService,\n  CommentTrpcRouter,\n  CommentAbility,\n]\n\n@Module({\n  imports: [\n    InteractModule,\n    UserModule,\n  ],\n  controllers: [CommentController],\n  providers,\n  exports: [...providers],\n})\nexport class CommentModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentPagerDto.html":{"url":"classes/CommentPagerDto.html","title":"class - CommentPagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentPagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(CommentPagerSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SnowflakeIdSchema } from '@server/common/dto/id.dto'\nimport { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { CommentSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nimport { CommentRefType } from './comment.constant'\n\nexport const CreateCommentInputSchema = CommentSchema.pick({\n  content: true,\n}).extend({\n  parentId: SnowflakeIdSchema.optional().nullable(),\n  itemId: SnowflakeIdSchema,\n  itemType: z.nativeEnum(CommentRefType),\n})\n\nexport class CreateCommentDto extends createZodDto(CreateCommentInputSchema) { }\n\nexport const CommentPagerSchema = basePagerSchema.extend({\n  itemId: SnowflakeIdSchema,\n  itemType: z.nativeEnum(CommentRefType),\n})\n\nexport class CommentPagerDto extends createZodDto(CommentPagerSchema) { }\n\nexport class SubCommentPagerDto extends createZodDto(CommentPagerSchema.extend({\n  rootId: SnowflakeIdSchema,\n})) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentService.html":{"url":"injectables/CommentService.html","title":"injectable - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                appendInteractInfo\n                            \n                            \n                                    Async\n                                appendIpLocation\n                            \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                dislikeComment\n                            \n                            \n                                    Async\n                                getCommentById\n                            \n                            \n                                    Async\n                                getCommentCount\n                            \n                            \n                                    Async\n                                getItemById\n                            \n                            \n                                    Async\n                                likeComment\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Async\n                                paginateSubComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(likeService: LikeService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/modules/comment/comment.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        likeService\n                                                  \n                                                        \n                                                                        LikeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        appendInteractInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    appendInteractInfo(items: Comment | Comment[], userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:268\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                        Comment | Comment[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        appendIpLocation\n                        \n                    \n                \n            \n            \n                \n                        \n                    appendIpLocation(id: string, ip: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:212\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(dto: CreateCommentDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:188\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        dislikeComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    dislikeComment(itemId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:252\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCommentById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommentById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCommentCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommentCount(itemType: CommentRefType, itemId: string, parentId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemType\n                                            \n                                                            CommentRefType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                parentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getItemById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemById(itemId: string, itemType: CommentRefType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                itemType\n                                            \n                                                            CommentRefType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        likeComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    likeComment(itemId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:236\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(dto: CommentPagerDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CommentPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginateSubComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateSubComment(dto: SubCommentPagerDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            SubCommentPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExtendedPrismaClient\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectPrismaClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/comment.service.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\nimport { EventEmitter2 } from '@nestjs/event-emitter'\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { ExtendedPrismaClient, InjectPrismaClient } from '@server/shared/database/prisma.extension'\n\nimport { getIpLocation } from '@server/utils/ip.util'\nimport { resourceNotFoundWrapper } from '@server/utils/prisma.util'\nimport { Comment, CommentRefType } from '@youni/database'\n\nimport { CursorPaginationMeta } from 'prisma-extension-pagination'\n\nimport { InteractType } from '../interact/interact.constant'\nimport { LikeService } from '../interact/services/like.service'\n\nimport { CommentEvents, CommentSelect } from './comment.constant'\nimport { CommentPagerDto, CreateCommentDto, SubCommentPagerDto } from './comment.dto'\nimport { CommentCreateEvent } from './events/comment-create.event'\nimport { CommentLikeEvent } from './events/comment-like.event'\n\n@Injectable()\nexport class CommentService {\n  @InjectPrismaClient()\n  private readonly prisma: ExtendedPrismaClient\n\n  constructor(\n    private readonly likeService: LikeService,\n    private readonly eventEmitter: EventEmitter2,\n  ) { }\n\n  async paginate(dto: CommentPagerDto) {\n    const { cursor, limit, sortBy = 'createdAt', sortOrder = 'desc', itemId, itemType } = dto\n    const ref = await this.getItemById(itemId, itemType)\n\n    if (!ref) {\n      return {\n        items: [],\n        meta: {\n          startCursor: null,\n          endCursor: null,\n          hasNextPage: false,\n          hasPreviousPage: false,\n        } as CursorPaginationMeta,\n      }\n    }\n\n    const [items, meta] = await this.prisma.comment.paginate({\n      where: {\n        refId: ref.id,\n        refType: itemType,\n        parentId: null,\n      },\n      select: {\n        ...CommentSelect,\n        children: {\n          take: 1, // 只返回一条记录,更多则需要展开查看\n          select: {\n            ...CommentSelect,\n            parent: {\n              select: {\n                id: true,\n                user: {\n                  select: {\n                    id: true,\n                    avatar: true,\n                    nickname: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      orderBy: {\n        [sortBy]: sortOrder,\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    return { items, meta }\n  }\n\n  async paginateSubComment(dto: SubCommentPagerDto) {\n    const { cursor, limit, sortBy = 'createdAt', sortOrder = 'desc', rootId, itemId, itemType } = dto\n\n    const [items, meta] = await this.prisma.comment.paginate({\n      where: {\n        refId: itemId,\n        refType: itemType,\n        parentId: rootId,\n      },\n      select: {\n        ...CommentSelect,\n        parent: {\n          select: {\n            id: true,\n            user: {\n              select: {\n                id: true,\n                avatar: true,\n                nickname: true,\n              },\n            },\n          },\n        },\n      },\n      orderBy: {\n        [sortBy]: sortOrder,\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    return { items, meta }\n  }\n\n  async getCommentById(id: string) {\n    return this.prisma.comment.findUniqueOrThrow({\n      where: {\n        id,\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            nickname: true,\n            avatar: true,\n          },\n        },\n      },\n    }).catch(resourceNotFoundWrapper(\n      new BizException(ErrorCodeEnum.CommentNotFound),\n    ))\n  }\n\n  async getCommentCount(itemType: CommentRefType, itemId: string, parentId?: string) {\n    return await this.prisma.comment.count({\n      where: {\n        refId: itemId,\n        refType: itemType,\n        ...(parentId && { parentId }),\n      },\n    })\n  }\n\n  async createComment(dto: CreateCommentDto, userId: string) {\n    const { content, itemId, itemType, parentId } = dto\n\n    const ref = await this.getItemById(itemId, itemType)\n\n    if (!ref)\n      throw new BizException(ErrorCodeEnum.ResourceNotFound)\n\n    let recipientId = ref.userId\n    if (parentId) {\n      const parentComment = await this.prisma.comment.findUniqueOrThrow({\n        where: {\n          id: parentId,\n        },\n      })\n      recipientId = parentComment.userId\n    }\n\n    const comment = await this.prisma.comment.create({\n      data: {\n        refId: itemId,\n        refType: itemType,\n        content,\n        parentId,\n        userId,\n      },\n    })\n\n    this.eventEmitter.emit(CommentEvents.CommentCreate, new CommentCreateEvent({\n      source: { ...ref },\n      comment,\n      senderId: userId,\n      recipientId,\n    }))\n\n    return comment\n  }\n\n  async deleteComment(id: string) {\n    const comment = await this.prisma.comment.delete({\n      where: {\n        id,\n      },\n    })\n\n    return comment\n  }\n\n  async getItemById(itemId: string, itemType: CommentRefType) {\n    switch (itemType) {\n      case CommentRefType.Note:\n        return this.prisma.note.findUniqueOrThrow({\n          where: {\n            id: itemId,\n          },\n        }).catch(resourceNotFoundWrapper(\n          new BizException(ErrorCodeEnum.NoteNotFound),\n        ))\n      // case CommentRefType.xxx:\n    }\n  }\n\n  async appendIpLocation(id: string, ip: string) {\n    if (!ip)\n      return\n\n    const comment = this.prisma.comment.findUnique({\n      where: {\n        id,\n      },\n    })\n\n    if (!comment)\n      return\n\n    const location = await getIpLocation(ip)\n\n    await this.prisma.comment.update({\n      where: { id },\n      data: {\n        ip,\n        location,\n      },\n    })\n  }\n\n  async likeComment(itemId: string, userId: string) {\n    const comment = await this.getCommentById(itemId)\n\n    const ok = await this.likeService.like(InteractType.Comment, itemId, userId)\n\n    if (ok) {\n      this.eventEmitter.emit(CommentEvents.CommentLike, new CommentLikeEvent({\n        comment,\n        senderId: userId,\n        recipientId: comment.user.id,\n      }))\n    }\n\n    return ok\n  }\n\n  async dislikeComment(itemId: string, userId: string) {\n    const comment = await this.getCommentById(itemId)\n\n    const ok = await this.likeService.dislike(InteractType.Comment, itemId, userId)\n\n    if (ok) {\n      this.eventEmitter.emit(CommentEvents.CommentDislike, new CommentLikeEvent({\n        comment,\n        senderId: userId,\n        recipientId: comment.user.id,\n      }))\n    }\n\n    return ok\n  }\n\n  async appendInteractInfo(items: Comment | Comment[], userId: string) {\n    if (!Array.isArray(items))\n      items = [items]\n\n    const likedList = await Promise.all(items.map(item => this.likeService.getItemLiked(InteractType.Comment, item.id, userId)))\n\n    items.forEach((item, index) => {\n      item.interact.liked = likedList[index]\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentTrpcRouter.html":{"url":"injectables/CommentTrpcRouter.html","title":"injectable - CommentTrpcRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentTrpcRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.trpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createRouter\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(trpcService: TRPCService, commentService: CommentService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/comment/comment.trpc.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trpcService\n                                                  \n                                                        \n                                                                        TRPCService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commentService\n                                                  \n                                                        \n                                                                        CommentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createRouter\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRouter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.trpc.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/comment/comment.trpc.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/comment/comment.trpc.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common'\n\nimport { IdDto } from '@server/common/dto/id.dto'\nimport { TRPCRouter } from '@server/shared/trpc/trpc.decorator'\nimport { defineTrpcRouter } from '@server/shared/trpc/trpc.helper'\nimport { TRPCService } from '@server/shared/trpc/trpc.service'\n\nimport { Action } from '../casl/ability.class'\n\nimport { CommentPagerDto, CreateCommentDto, SubCommentPagerDto } from './comment.dto'\nimport { CommentService } from './comment.service'\n\n@TRPCRouter()\n@Injectable()\nexport class CommentTrpcRouter implements OnModuleInit {\n  private router: ReturnType\n\n  constructor(\n    private readonly trpcService: TRPCService,\n    private readonly commentService: CommentService,\n  ) { }\n\n  onModuleInit() {\n    this.router = this.createRouter()\n  }\n\n  private createRouter() {\n    const procedureAuth = this.trpcService.procedureAuth\n    return defineTrpcRouter('comment', {\n      page: procedureAuth\n        .input(CommentPagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          const { items, meta } = await this.commentService.paginate(input)\n\n          await this.commentService.appendInteractInfo(items, user.id)\n          return { items, meta }\n        }),\n      subPage: procedureAuth\n        .input(SubCommentPagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          const { items, meta } = await this.commentService.paginateSubComment(input)\n\n          await this.commentService.appendInteractInfo(items, user.id)\n\n          return { items, meta }\n        }),\n      create: procedureAuth\n        .input(CreateCommentDto.schema)\n        .meta({ model: 'Comment', action: Action.Create })\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          return this.commentService.createComment(input, user.id)\n        }),\n      delete: procedureAuth\n        .input(IdDto.schema)\n        .meta({ model: 'Comment', action: Action.Delete })\n        .mutation(async (opt) => {\n          const { input } = opt\n          const { id } = input\n\n          return this.commentService.deleteComment(id)\n        }),\n      like: procedureAuth\n        .input(IdDto.schema)\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id } = input\n\n          return this.commentService.likeComment(id, user.id)\n        }),\n      dislike: procedureAuth\n        .input(IdDto.schema)\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id } = input\n\n          return this.commentService.dislikeComment(id, user.id)\n        }),\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountingService.html":{"url":"injectables/CountingService.html","title":"injectable - CountingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/interact/services/counting.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCommentCount\n                            \n                            \n                                    Async\n                                getItemCollectCount\n                            \n                            \n                                    Async\n                                getUserLikedCount\n                            \n                            \n                                    Async\n                                updateCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: ExtendedPrismaClient, likeService: LikeService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/interact/services/counting.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        ExtendedPrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        likeService\n                                                  \n                                                        \n                                                                        LikeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCommentCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommentCount(refType: InteractType, refId: string, parentId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/counting.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refType\n                                            \n                                                            InteractType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                parentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getItemCollectCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemCollectCount(itemId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/counting.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserLikedCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserLikedCount(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/counting.service.ts:21\n                        \n                    \n\n\n            \n                \n                        获取用户获赞数\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCount(type: InteractType, itemId: string, countType: \"liked\" | \"collect\" | \"comment\", count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/counting.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            InteractType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                countType\n                                            \n                                                        \"liked\" | \"collect\" | \"comment\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '@server/shared/database/prisma.extension'\n\nimport { CommentRefType } from '@youni/database'\n\nimport { InteractType } from '../interact.constant'\n\nimport { LikeService } from './like.service'\n\n@Injectable()\nexport class CountingService {\n  constructor(\n    @InjectPrismaClient() private prisma: ExtendedPrismaClient,\n    private likeService: LikeService,\n  ) { }\n\n  /**\n   * 获取用户获赞数\n   */\n  async getUserLikedCount(userId: string) {\n    const [{ sum }] = await this.prisma.$queryRawUnsafe(`\n      SELECT SUM((interact->>'likedCount')::int)\n      FROM \"${InteractType.Note}\"\n      WHERE \"userId\" = $1\n    `, userId)\n\n    return Number(sum) ?? 0\n  }\n\n  async getItemCollectCount(itemId: string) {\n    return await this.prisma.collection.count({\n      where: {\n        note: {\n          some: {\n            id: itemId,\n          },\n        },\n      },\n    })\n  }\n\n  async getCommentCount(refType: InteractType, refId: string, parentId?: string) {\n    return await this.prisma.comment.count({\n      where: {\n        refId,\n        refType: refType as CommentRefType,\n        ...(parentId && { parentId }),\n      },\n    })\n  }\n\n  async updateCount(\n    type: InteractType,\n    itemId: string,\n    countType: 'liked' | 'collect' | 'comment',\n    count: number,\n  ) {\n    await this.prisma.$executeRawUnsafe(\n      `UPDATE \"${type}\"\n       SET interact = jsonb_set(\n         interact,\n         '{\"${countType}Count\"}',\n         to_jsonb(${count})\n       )\n       WHERE id = $1`,\n      itemId,\n    )\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(CreateCommentInputSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SnowflakeIdSchema } from '@server/common/dto/id.dto'\nimport { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { CommentSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nimport { CommentRefType } from './comment.constant'\n\nexport const CreateCommentInputSchema = CommentSchema.pick({\n  content: true,\n}).extend({\n  parentId: SnowflakeIdSchema.optional().nullable(),\n  itemId: SnowflakeIdSchema,\n  itemType: z.nativeEnum(CommentRefType),\n})\n\nexport class CreateCommentDto extends createZodDto(CreateCommentInputSchema) { }\n\nexport const CommentPagerSchema = basePagerSchema.extend({\n  itemId: SnowflakeIdSchema,\n  itemType: z.nativeEnum(CommentRefType),\n})\n\nexport class CommentPagerDto extends createZodDto(CommentPagerSchema) { }\n\nexport class SubCommentPagerDto extends createZodDto(CommentPagerSchema.extend({\n  rootId: SnowflakeIdSchema,\n})) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(NotificationInputSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { NotificationAction } from '@youni/database'\nimport { NotificationSchema } from '@youni/database/zod'\n\nimport { createZodDto } from 'nestjs-zod'\n\nimport { z } from 'zod'\n\nexport const NotificationInputSchema = NotificationSchema.pick({\n  action: true,\n  content: true,\n  sourceId: true,\n  sourceType: true,\n  source: true,\n  senderId: true,\n  recipientId: true,\n}).extend({\n  content: z.string().optional().default(''),\n})\n\nexport class CreateNotificationDto extends createZodDto(NotificationInputSchema) {\n\n}\n\nexport const NotificationPagerSchema = basePagerSchema.extend({\n  action: z.nativeEnum(NotificationAction),\n})\n\nexport class NotificationPagerDto extends createZodDto(NotificationPagerSchema) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CronService.html":{"url":"injectables/CronService.html","title":"injectable - CronService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CronService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/helper/cron.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: ExtendedPrismaClient, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/helper/cron.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        ExtendedPrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/helper/cron.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '../database/prisma.extension'\n\n@Injectable()\nexport class CronService {\n  private logger: Logger\n  constructor(\n    @InjectPrismaClient()\n    private readonly prisma: ExtendedPrismaClient,\n    private readonly configService: ConfigService,\n  ) {\n    this.logger = new Logger(CronService.name)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAdminEventsGateway  -->\n\nDatabaseModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nDatabaseModule->WebEventsGateway \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common'\n\nimport { CustomPrismaModule } from 'nestjs-prisma'\n\nimport { PRISMA_CLIENT, extendedPrismaClient } from './prisma.extension'\n\nconst providers = [\n  {\n    provide: PRISMA_CLIENT,\n    useFactory: () => {\n      return extendedPrismaClient\n    },\n  },\n]\n\n@Global()\n@Module({\n  imports: [\n    CustomPrismaModule.forRootAsync({\n      name: 'PrismaService',\n      useFactory: () => {\n        return extendedPrismaClient\n      },\n    }),\n  ],\n  providers,\n  exports: providers,\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailController.html":{"url":"controllers/EmailController.html","title":"controller - EmailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/controllers/email.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/email\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                sendEmailCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        sendEmailCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmailCode(dto: SendEmailCodeDto, ip: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send')@Public()@Throttle({default: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/email.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            SendEmailCodeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { Throttle, ThrottlerGuard } from '@nestjs/throttler'\n\nimport { Ip } from '@server/common/decorators/http.decorator'\nimport { MailerService } from '@server/shared/helper/mailer/mailer.service'\n\nimport { SendEmailCodeDto } from '../captcha/captcha.dto'\nimport { Public } from '../decorators/public.decorator'\n\n@ApiTags('Auth - 认证模块')\n@UseGuards(ThrottlerGuard)\n@Controller('auth/email')\nexport class EmailController {\n  constructor(\n    private mailerService: MailerService,\n  ) {}\n\n  @Post('send')\n  @Public()\n  @Throttle({ default: { limit: 2, ttl: 60_000 } })\n  async sendEmailCode(\n    @Body() dto: SendEmailCodeDto,\n    @Ip() ip: string,\n  ): Promise {\n    const { email } = dto\n\n    await this.mailerService.checkLimit(email, ip)\n    const { code } = await this.mailerService.sendVerificationCode(email)\n\n    await this.mailerService.log(email, code, ip)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorCodesStatusMapping.html":{"url":"interfaces/ErrorCodesStatusMapping.html","title":"interface - ErrorCodesStatusMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorCodesStatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/prisma-client-exception.filter.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        number\n\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/prisma-client-exception.filter.ts:15\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ContextType,\n  HttpException,\n  HttpServer,\n  HttpStatus,\n} from '@nestjs/common'\nimport { APP_FILTER, BaseExceptionFilter, HttpAdapterHost } from '@nestjs/core'\nimport { Prisma } from '@youni/database'\n\nexport declare type GqlContextType = 'graphql' | ContextType\n\nexport interface ErrorCodesStatusMapping {\n  [key: string]: number\n}\n\n/**\n * {@link PrismaClientExceptionFilter} catches {@link Prisma.PrismaClientKnownRequestError} exceptions.\n */\n@Catch(Prisma?.PrismaClientKnownRequestError)\nexport class PrismaClientExceptionFilter extends BaseExceptionFilter {\n  /**\n   * default error codes mapping\n   *\n   * Error codes definition for Prisma Client (Query Engine)\n   * @see https://www.prisma.io/docs/reference/api-reference/error-reference#prisma-client-query-engine\n   */\n  private errorCodesStatusMapping: ErrorCodesStatusMapping = {\n    P2000: HttpStatus.BAD_REQUEST,\n    P2002: HttpStatus.CONFLICT,\n    P2025: HttpStatus.NOT_FOUND,\n  }\n\n  /**\n   * @param applicationRef\n   * @param errorCodesStatusMapping\n   */\n  constructor(\n    applicationRef?: HttpServer,\n    errorCodesStatusMapping: ErrorCodesStatusMapping | null = null,\n  ) {\n    super(applicationRef)\n\n    // use custom error codes mapping (overwrite)\n    //\n    // @example:\n    //\n    //   const { httpAdapter } = app.get(HttpAdapterHost);\n    //   app.useGlobalFilters(new PrismaClientExceptionFilter(httpAdapter, {\n    //     P2022: HttpStatus.BAD_REQUEST,\n    //   }));\n    //\n    if (errorCodesStatusMapping) {\n      this.errorCodesStatusMapping = Object.assign(\n        this.errorCodesStatusMapping,\n        errorCodesStatusMapping,\n      )\n    }\n  }\n\n  /**\n   * @param exception\n   * @param host\n   * @returns\n   */\n  catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n    return this.catchClientKnownRequestError(exception, host)\n  }\n\n  private catchClientKnownRequestError(\n    exception: Prisma.PrismaClientKnownRequestError,\n    host: ArgumentsHost,\n  ) {\n    const statusCode = this.errorCodesStatusMapping[exception.code]\n    const message = `[${exception.code}]: ${this.exceptionShortMessage(\n      exception.message,\n    )}`\n\n    if (host.getType() === 'http') {\n      if (!Object.keys(this.errorCodesStatusMapping).includes(exception.code))\n        return super.catch(exception, host)\n\n      return super.catch(\n        new HttpException({ statusCode, message }, statusCode),\n        host,\n      )\n    }\n    else if (host.getType() === 'graphql') {\n      // for graphql requests\n      if (!Object.keys(this.errorCodesStatusMapping).includes(exception.code))\n        return exception\n\n      return new HttpException({ statusCode, message }, statusCode)\n    }\n  }\n\n  private exceptionShortMessage(message: string): string {\n    const shortMessage = message.substring(message.indexOf('→'))\n    return shortMessage\n      .substring(shortMessage.indexOf('\\n'))\n      .replace(/\\n/g, '')\n      .trim()\n  }\n}\n\nexport function providePrismaClientExceptionFilter(\n  errorCodesStatusMapping?: ErrorCodesStatusMapping,\n) {\n  return {\n    provide: APP_FILTER,\n    useFactory: ({ httpAdapter }: HttpAdapterHost) => {\n      return new PrismaClientExceptionFilter(\n        httpAdapter,\n        errorCodesStatusMapping,\n      )\n    },\n    inject: [HttpAdapterHost],\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/file/file.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                get\n                            \n                            \n                                    \n                                    Async\n                                getTypes\n                            \n                            \n                                    \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(params: FileQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:type/:name')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/file/file.controller.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            FileQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(params: FileQueryDto, res: FastifyReply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:type/:name')@Throttle({default: undefined})@Bypass()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/file/file.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            FileQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        FastifyReply\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getTypes\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTypes(query: PagerDto, params: FileUploadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:type')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/file/file.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                params\n                                            \n                                                            FileUploadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(query: FileUploadDto, req: FastifyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/upload')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/file/file.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            FileUploadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        FastifyRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import path from 'node:path'\n\nimport { BadRequestException, Controller, Delete, Get, Param, Post, Query, Req, Res } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { Throttle } from '@nestjs/throttler'\nimport { Bypass } from '@server/common/decorators/bypass.decorator'\nimport { PagerDto } from '@server/common/dto/pager.dto'\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { alphabet } from '@server/constants/other.constant'\nimport { FastifyReply, FastifyRequest } from 'fastify'\nimport { lookup } from 'mime-types'\n\nimport { customAlphabet } from 'nanoid'\n\nimport { FileQueryDto, FileUploadDto } from './file.dto'\nimport { FileService } from './file.service'\n\n@ApiTags('System - 文件模块')\n@Controller(['objects', 'files'])\nexport class FileController {\n  constructor(\n    private readonly fileService: FileService,\n  ) { }\n\n  @Get('/:type')\n  async getTypes(@Query() query: PagerDto, @Param() params: FileUploadDto) {\n    const { type = 'file' } = params\n    // const { page, size } = query\n    const dir = await this.fileService.getDir(type)\n    return Promise.all(\n      dir.map(async (name) => {\n        return { name, url: await this.fileService.resolveFileUrl(type, name) }\n      }),\n    )\n  }\n\n  @Get('/:type/:name')\n  @Throttle({ default: { limit: 60, ttl: 60_000 } })\n  @Bypass()\n  async get(@Param() params: FileQueryDto, @Res() res: FastifyReply) {\n    const { type, name } = params\n    const ext = path.extname(name)\n    const mimetype = lookup(ext)\n\n    try {\n      const stream = await this.fileService.getFileStream(type, name)\n      if (mimetype) {\n        res.type(mimetype)\n        res.header('cache-control', 'public, max-age=31536000')\n        res.header(\n          'expires',\n          new Date(Date.now() + 31536000 * 1000).toUTCString(),\n        )\n      }\n\n      return res.send(stream)\n    }\n    catch {\n      throw new BizException(ErrorCodeEnum.ResourceNotFound)\n    }\n  }\n\n  @Post('/upload')\n  async upload(@Query() query: FileUploadDto, @Req() req: FastifyRequest) {\n    const file = await req.file()\n\n    if (!file)\n      throw new BadRequestException('仅供上传文件！')\n\n    if (file.fieldname !== 'file')\n      throw new BadRequestException('字段必须为 file')\n\n    const { type = 'file' } = query\n\n    const ext = path.extname(file.filename)\n\n    const filename = customAlphabet(alphabet)(18) + ext.toLowerCase()\n\n    if (!(await this.fileService.exists(type, filename)))\n      await this.fileService.writeFile(type, filename, file.file)\n\n    // TODO: save record in dabase\n    return {\n      url: await this.fileService.resolveFileUrl(type, filename),\n      name: filename,\n    }\n  }\n\n  @Delete('/:type/:name')\n  async delete(@Param() params: FileQueryDto) {\n    const { type, name } = params\n    await this.fileService.deleteFile(type, name)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileModule.html":{"url":"modules/FileModule.html","title":"module - FileModule","body":"\n                   \n\n\n\n\n    Modules\n    FileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FileModule\n\n\n\ncluster_FileModule_exports\n\n\n\ncluster_FileModule_providers\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\n\n\nFileModule\n\nFileModule\n\nAdminEventsGateway  -->\n\nFileModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nFileModule->WebEventsGateway \n\n\n\n\n\nFileService\n\nFileService\n\nFileModule -->\n\nFileService->FileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/file/file.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Provider } from '@nestjs/common'\n\nimport { FileController } from './file.controller'\nimport { FileService } from './file.service'\n\nconst providers: Provider[] = [FileService]\n\n@Module({\n  controllers: [FileController],\n  providers,\n  exports: providers,\n})\nexport class FileModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileQueryDto.html":{"url":"classes/FileQueryDto.html","title":"class - FileQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/file/file.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(FileQuerySchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nimport { FileTypeEnum } from './file.constant'\n\nexport const FileQuerySchema = z.object({\n  type: z.nativeEnum(FileTypeEnum),\n  name: z.string(),\n})\n\nexport class FileQueryDto extends createZodDto(FileQuerySchema) {}\n\nexport const FileUploadSchema = z.object({\n  type: z.nativeEnum(FileTypeEnum).optional(),\n})\n\nexport class FileUploadDto extends createZodDto(FileUploadSchema) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileService.html":{"url":"injectables/FileService.html","title":"injectable - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/file/file.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkIsExist\n                            \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                exists\n                            \n                            \n                                    Async\n                                getDir\n                            \n                            \n                                    Async\n                                getFileStream\n                            \n                            \n                                    Private\n                                resolveFilePath\n                            \n                            \n                                    Async\n                                resolveFileUrl\n                            \n                            \n                                    Async\n                                writeFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/file/file.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkIsExist\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIsExist(path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/file/file.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(type: FileType, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/file/file.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            FileType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(type: FileType, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/file/file.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            FileType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDir\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDir(type: FileType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/file/file.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            FileType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFileStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileStream(type: FileType, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/file/file.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            FileType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        resolveFilePath\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolveFilePath(type: FileType, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/file/file.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            FileType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolveFileUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolveFileUrl(type: FileType, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/file/file.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            FileType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        writeFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    writeFile(type: FileType, name: string, data: Readable, encoding?: BufferEncoding)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/file/file.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            FileType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encoding\n                                            \n                                                        BufferEncoding\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { createWriteStream } from 'node:fs'\nimport path from 'node:path'\nimport { Readable, pipeline } from 'node:stream'\nimport { promisify } from 'node:util'\n\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { IAppConfig } from '@server/config/app.config'\nimport { STATIC_FILE_DIR } from '@server/constants/path.constant'\nimport fs from 'fs-extra'\n\nimport { FileType } from './file.constant'\n\nconst pump = promisify(pipeline)\n\n@Injectable()\nexport class FileService {\n  constructor(private readonly configService: ConfigService) { }\n\n  private resolveFilePath(type: FileType, name: string) {\n    return path.resolve(STATIC_FILE_DIR, type, name)\n  }\n\n  private async checkIsExist(path: string) {\n    try {\n      await fs.access(path)\n      return true\n    }\n    catch {\n      return false\n    }\n  }\n\n  async getFileStream(type: FileType, name: string) {\n    const exists = await this.checkIsExist(this.resolveFilePath(type, name))\n    if (!exists)\n      throw new NotFoundException('文件不存在')\n\n    return fs.createReadStream(this.resolveFilePath(type, name))\n  }\n\n  async writeFile(\n    type: FileType,\n    name: string,\n    data: Readable,\n    encoding?: BufferEncoding,\n  ) {\n    const filePath = this.resolveFilePath(type, name)\n    if (await this.checkIsExist(filePath))\n      throw new BadRequestException('文件已存在')\n\n    await fs.mkdir(path.dirname(filePath), { recursive: true })\n\n    const writable = createWriteStream(filePath, { encoding })\n\n    await pump(data, writable)\n  }\n\n  async deleteFile(type: FileType, name: string) {\n    try {\n      return await fs.unlink(this.resolveFilePath(type, name))\n    }\n    catch {\n      return null\n    }\n  }\n\n  async getDir(type: FileType) {\n    await fs.mkdir(this.resolveFilePath(type, ''), { recursive: true })\n    const path_1 = path.resolve(STATIC_FILE_DIR, type)\n    return await fs.readdir(path_1)\n  }\n\n  async resolveFileUrl(type: FileType, name: string) {\n    const { baseUrl } = await this.configService.get('app')!\n    return `${baseUrl.replace(/\\/+$/, '')}/objects/${type}/${name}`\n  }\n\n  exists(type: FileType, name: string) {\n    return this.checkIsExist(this.resolveFilePath(type, name))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/file/file.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(FileUploadSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nimport { FileTypeEnum } from './file.constant'\n\nexport const FileQuerySchema = z.object({\n  type: z.nativeEnum(FileTypeEnum),\n  name: z.string(),\n})\n\nexport class FileQueryDto extends createZodDto(FileQuerySchema) {}\n\nexport const FileUploadSchema = z.object({\n  type: z.nativeEnum(FileTypeEnum).optional(),\n})\n\nexport class FileUploadDto extends createZodDto(FileUploadSchema) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FollowService.html":{"url":"injectables/FollowService.html","title":"injectable - FollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/interact/services/follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                follow\n                            \n                            \n                                    Async\n                                getAllFollowingIds\n                            \n                            \n                                    Async\n                                getCommonFollowerIds\n                            \n                            \n                                    Async\n                                getCommonFollowingIds\n                            \n                            \n                                    Async\n                                getFollowerCount\n                            \n                            \n                                    Async\n                                getFollowerIds\n                            \n                            \n                                    Async\n                                getFollowingCount\n                            \n                            \n                                    Async\n                                getFollowingIds\n                            \n                            \n                                    Async\n                                isUserFollowing\n                            \n                            \n                                    Async\n                                unfollow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/modules/interact/services/follow.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        follow\n                        \n                    \n                \n            \n            \n                \n                        \n                    follow(targetId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/follow.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                targetId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllFollowingIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllFollowingIds(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/follow.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCommonFollowerIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommonFollowerIds(targetId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/follow.service.ts:119\n                        \n                    \n\n\n            \n                \n                        获取他的粉丝共同关注列表\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                targetId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCommonFollowingIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommonFollowingIds(targetId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/follow.service.ts:114\n                        \n                    \n\n\n            \n                \n                        获取共同关注列表\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                targetId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFollowerCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowerCount(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/follow.service.ts:104\n                        \n                    \n\n\n            \n                \n                        获取用户的粉丝数量。\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFollowerIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowerIds(userId: string, dto: PagerDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/follow.service.ts:73\n                        \n                    \n\n\n            \n                \n                        获取关注用户的粉丝 ID 列表。\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            PagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFollowingCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowingCount(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/follow.service.ts:99\n                        \n                    \n\n\n            \n                \n                        获取用户正在关注的用户数量。\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFollowingIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowingIds(dto: PagerDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/follow.service.ts:43\n                        \n                    \n\n\n            \n                \n                        获取用户正在关注的用户 ID 列表。\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            PagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isUserFollowing\n                        \n                    \n                \n            \n            \n                \n                        \n                    isUserFollowing(targetId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/follow.service.ts:109\n                        \n                    \n\n\n            \n                \n                        检查一个用户是否关注了另一个用户。\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                targetId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        unfollow\n                        \n                    \n                \n            \n            \n                \n                        \n                    unfollow(targetId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/follow.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                targetId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRedis } from '@liaoliaots/nestjs-redis'\nimport { Injectable } from '@nestjs/common'\nimport { EventEmitter2 } from '@nestjs/event-emitter'\nimport { PagerDto } from '@server/common/dto/pager.dto'\nimport { getRedisKey } from '@server/utils/redis.util'\nimport Redis from 'ioredis'\nimport { CursorPaginationMeta } from 'prisma-extension-pagination'\n\nimport { UserFollowEvent } from '../events/user-follow.event'\nimport { InteractEvents } from '../interact.constant'\n\n@Injectable()\nexport class FollowService {\n  constructor(\n    @InjectRedis() private redis: Redis,\n    private readonly eventEmitter: EventEmitter2,\n  ) { }\n\n  async follow(targetId: string, userId: string) {\n    const now = Date.now()\n\n    // 用户正在关注的人 如 following:2 为 用户2 正在关注的人\n    await this.redis.zadd(getRedisKey(`following:${userId}`), now, targetId)\n\n    // 用户的粉丝 如 follows:1 为 用户1 的粉丝\n    await this.redis.zadd(getRedisKey(`followers:${targetId}`), now, userId)\n\n    this.eventEmitter.emit(InteractEvents.UserFollow, new UserFollowEvent({\n      targetId,\n      userId,\n    }))\n    return true\n  }\n\n  async unfollow(targetId: string, userId: string) {\n    await this.redis.zrem(getRedisKey(`following:${userId}`), targetId)\n    await this.redis.zrem(getRedisKey(`followers:${targetId}`), userId)\n\n    return true\n  }\n\n  /** 获取用户正在关注的用户 ID 列表。 */\n  async getFollowingIds(dto: PagerDto, userId: string) {\n    const { cursor = '+inf', limit } = dto\n\n    const ids: string[] = []\n\n    const startCursor = cursor !== '0' ? cursor : '+inf'\n    const keys = await this.redis.zrevrangebyscore(\n      getRedisKey(`following:${userId}`),\n      startCursor,\n      '-inf',\n      'LIMIT',\n      0,\n      limit,\n    )\n    ids.push(...keys)\n\n    const meta: CursorPaginationMeta = {\n      hasNextPage: ids.length === limit,\n      hasPreviousPage: cursor !== '0',\n      startCursor: ids.length > 0 ? ids[0] : '0',\n      endCursor: ids.length > 0 ? ids[ids.length - 1] : '0',\n    }\n    return { ids, meta }\n  }\n\n  async getAllFollowingIds(userId: string) {\n    return this.redis.zrange(getRedisKey(`following:${userId}`), 0, -1)\n  }\n\n  /** 获取关注用户的粉丝 ID 列表。 */\n  async getFollowerIds(userId: string, dto: PagerDto) {\n    const { cursor = '+inf', limit } = dto\n\n    const ids: string[] = []\n\n    const startCursor = cursor !== '0' ? cursor : '+inf'\n    const keys = await this.redis.zrevrangebyscore(\n      getRedisKey(`followers:${userId}`),\n      startCursor,\n      '-inf',\n      'LIMIT',\n      0,\n      limit,\n    )\n    ids.push(...keys)\n\n    const meta: CursorPaginationMeta = {\n      hasNextPage: ids.length === limit,\n      hasPreviousPage: cursor !== '0',\n      startCursor: ids.length > 0 ? ids[0] : '0',\n      endCursor: ids.length > 0 ? ids[ids.length - 1] : '0',\n    }\n    return { ids, meta }\n  }\n\n  /** 获取用户正在关注的用户数量。 */\n  async getFollowingCount(userId: string) {\n    return this.redis.zcard(getRedisKey(`following:${userId}`))\n  }\n\n  /** 获取用户的粉丝数量。 */\n  async getFollowerCount(userId: string) {\n    return this.redis.zcard(getRedisKey(`followers:${userId}`))\n  }\n\n  /** 检查一个用户是否关注了另一个用户。 */\n  async isUserFollowing(targetId: string, userId: string) {\n    return !!(await this.redis.zscore(getRedisKey(`following:${userId}`), targetId))\n  }\n\n  /** 获取共同关注列表 */\n  async getCommonFollowingIds(targetId: string, userId: string) {\n    return this.redis.zinter(2, getRedisKey(`following:${targetId}`), getRedisKey(`following:${userId}`))\n  }\n\n  /** 获取他的粉丝共同关注列表 */\n  async getCommonFollowerIds(targetId: string, userId: string) {\n    return this.redis.zinter(2, getRedisKey(`followers:${targetId}`), getRedisKey(`following:${userId}`))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleController.html":{"url":"controllers/GoogleController.html","title":"controller - GoogleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/controllers/google.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                googleAuth\n                            \n                            \n                                    \n                                    \n                                    Async\n                                googleAuthRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuth(_req: FastifyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/google.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _req\n                                            \n                                                        FastifyRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        googleAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuthRedirect(req: FastifyRequest, res: FastifyReply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/controllers/google.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        FastifyRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        FastifyReply\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ApiTags } from '@nestjs/swagger'\n\nimport { AppConfig, IAppConfig } from '@server/config'\nimport { FastifyReply, FastifyRequest } from 'fastify'\n\nimport { AuthStrategy } from '../auth.constant'\nimport { AuthService } from '../auth.service'\nimport { Public } from '../decorators/public.decorator'\nimport { TokenService } from '../services/token.service'\n\n@ApiTags('Auth - 认证模块')\n@Controller('auth/google')\n@Public()\nexport class GoogleController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly tokenService: TokenService,\n    @Inject(AppConfig.KEY) private readonly appConfig: IAppConfig,\n  ) { }\n\n  @Get()\n  @UseGuards(AuthGuard(AuthStrategy.GOOGLE))\n  async googleAuth(@Req() _req: FastifyRequest) { }\n\n  @Get('callback')\n  @UseGuards(AuthGuard(AuthStrategy.GOOGLE))\n  async googleAuthRedirect(\n    @Req() req: FastifyRequest,\n    @Res() res: FastifyReply,\n  ) {\n    // FIXME:\n    // const user = await this.authService.loginByGoogle(\n    //   res.user as unknown as Prisma.UserCreateInput,\n    // )\n\n    // const token = await this.tokenService.generateToken(user.id)\n\n    // res.setCookie('token', token).send(\n    //   new ResOp({\n    //     data: {\n    //       token,\n    //     },\n    //   }),\n    // )\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleProfile.html":{"url":"interfaces/GoogleProfile.html","title":"interface - GoogleProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/google.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            email_verified\n                                        \n                                \n                                \n                                        \n                                            given_name\n                                        \n                                \n                                \n                                        \n                                            locale\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            picture\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email_verified\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email_verified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        given_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        given_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        locale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        picture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        picture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { AppConfig, GoogleConfig, IAppConfig, IGoogleConfig } from '@server/config'\nimport { User } from '@youni/database'\nimport { Strategy } from 'passport-google-oauth20'\n\nimport { AuthStrategy } from '../auth.constant'\n\nexport interface GoogleProfile {\n  sub: string\n  name: string\n  given_name: string\n  picture: string\n  email: string\n  email_verified: boolean\n  locale: string\n}\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(\n  Strategy,\n  AuthStrategy.GOOGLE,\n) {\n  constructor(\n    @Inject(GoogleConfig.KEY) private readonly googleConfig: IGoogleConfig,\n    @Inject(AppConfig.KEY) private readonly appConfig: IAppConfig,\n  ) {\n    super({\n      clientID: googleConfig.clientId,\n      clientSecret: googleConfig.secret,\n      callbackURL: `${appConfig.baseUrl}/${appConfig.globalPrefix}/auth/google/callback`,\n      scope: ['email', 'profile'],\n      proxy: true,\n    })\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: { _json: GoogleProfile },\n  ): Promise {\n    const { name, picture, email, locale } = profile._json\n\n    const user: Partial & {\n      accessToken: string\n      refreshToken: string\n    } = {\n      email,\n      username: email,\n      nickname: name,\n      avatar: picture,\n      accessToken,\n      refreshToken,\n    }\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/google.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  AuthStrategy.GOOGLE,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(googleConfig: IGoogleConfig, appConfig: IAppConfig)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/google.strategy.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        googleConfig\n                                                  \n                                                        \n                                                                        IGoogleConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appConfig\n                                                  \n                                                        \n                                                                        IAppConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/google.strategy.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { AppConfig, GoogleConfig, IAppConfig, IGoogleConfig } from '@server/config'\nimport { User } from '@youni/database'\nimport { Strategy } from 'passport-google-oauth20'\n\nimport { AuthStrategy } from '../auth.constant'\n\nexport interface GoogleProfile {\n  sub: string\n  name: string\n  given_name: string\n  picture: string\n  email: string\n  email_verified: boolean\n  locale: string\n}\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(\n  Strategy,\n  AuthStrategy.GOOGLE,\n) {\n  constructor(\n    @Inject(GoogleConfig.KEY) private readonly googleConfig: IGoogleConfig,\n    @Inject(AppConfig.KEY) private readonly appConfig: IAppConfig,\n  ) {\n    super({\n      clientID: googleConfig.clientId,\n      clientSecret: googleConfig.secret,\n      callbackURL: `${appConfig.baseUrl}/${appConfig.globalPrefix}/auth/google/callback`,\n      scope: ['email', 'profile'],\n      proxy: true,\n    })\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: { _json: GoogleProfile },\n  ): Promise {\n    const { name, picture, email, locale } = profile._json\n\n    const user: Partial & {\n      accessToken: string\n      refreshToken: string\n    } = {\n      email,\n      username: email,\n      nickname: name,\n      avatar: picture,\n      accessToken,\n      refreshToken,\n    }\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                checkDatabase\n                            \n                            \n                                    \n                                    \n                                    Async\n                                checkDisk\n                            \n                            \n                                    \n                                    \n                                    Async\n                                checkMemoryHeap\n                            \n                            \n                                    \n                                    \n                                    Async\n                                checkMemoryRSS\n                            \n                            \n                                    \n                                    \n                                    Async\n                                checkNetwork\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        checkDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDatabase()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('database')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/health/health.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        checkDisk\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDisk()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('disk')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/health/health.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        checkMemoryHeap\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkMemoryHeap()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('memory-heap')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/health/health.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        checkMemoryRSS\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkMemoryRSS()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('memory-rss')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/health/health.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        checkNetwork\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkNetwork()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('network')@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/health/health.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport {\n  DiskHealthIndicator,\n  HealthCheck,\n  HttpHealthIndicator,\n  MemoryHealthIndicator,\n  PrismaHealthIndicator,\n} from '@nestjs/terminus'\n\nimport { InjectPrismaClient } from '@server/shared/database/prisma.extension'\nimport { PrismaClient } from '@youni/database'\n\nimport { Public } from '../auth/decorators/public.decorator'\n\n@ApiTags('Health - 健康检查')\n@Public()\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private http: HttpHealthIndicator,\n    private db: PrismaHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n  ) {}\n\n  @InjectPrismaClient()\n  private readonly prisma: PrismaClient\n\n  @Get('network')\n  @HealthCheck()\n  async checkNetwork() {\n    return this.http.pingCheck('kuizuo', 'https://kuizuo.cn')\n  }\n\n  @Get('database')\n  @HealthCheck()\n  async checkDatabase() {\n    return this.db.pingCheck('database', this.prisma)\n  }\n\n  @Get('memory-heap')\n  @HealthCheck()\n  async checkMemoryHeap() {\n    // the process should not use more than 200MB memory\n    return this.memory.checkHeap('memory-heap', 200 * 1024 * 1024)\n  }\n\n  @Get('memory-rss')\n  @HealthCheck()\n  async checkMemoryRSS() {\n    // the process should not have more than 1024MB RSS memory allocated\n    return this.memory.checkRSS('memory-rss', 1024 * 1024 * 1024)\n  }\n\n  @Get('disk')\n  @HealthCheck()\n  async checkDisk() {\n    return this.disk.checkStorage('disk', {\n      // The used disk storage should not exceed 75% of the full disk size\n      thresholdPercent: 0.75,\n      path: '/',\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios'\nimport { Module } from '@nestjs/common'\nimport { TerminusModule } from '@nestjs/terminus'\n\nimport { HealthController } from './health.controller'\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HelperModule.html":{"url":"modules/HelperModule.html","title":"module - HelperModule","body":"\n                   \n\n\n\n\n    Modules\n    HelperModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_imports\n\n\n\ncluster_HelperModule_providers\n\n\n\ncluster_HelperModule_exports\n\n\n\n\nMailerModule\n\nMailerModule\n\n\n\nHelperModule\n\nHelperModule\n\nHelperModule -->\n\nMailerModule->HelperModule\n\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\nAdminEventsGateway  -->\n\nHelperModule->AdminEventsGateway \n\n\n\n\n\nMailerModule \n\nMailerModule \n\nMailerModule  -->\n\nHelperModule->MailerModule \n\n\n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\nWebEventsGateway  -->\n\nHelperModule->WebEventsGateway \n\n\n\n\n\nCronService\n\nCronService\n\nHelperModule -->\n\nCronService->HelperModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/helper/helper.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CronService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            MailerModule\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios'\nimport { Global, Module, type Provider } from '@nestjs/common'\n\nimport { EventEmitterModule } from '@nestjs/event-emitter'\nimport { ScheduleModule } from '@nestjs/schedule'\n\nimport { ThrottlerModule } from '@nestjs/throttler'\n\nimport { isDev } from '@server/global/env'\n\nimport { CronService } from './cron.service'\nimport { MailerModule } from './mailer/mailer.module'\n\nconst providers: Provider[] = [\n  CronService,\n]\n\n@Global()\n@Module({\n  imports: [\n    // http\n    HttpModule,\n    // schedule\n    ScheduleModule.forRoot(),\n    // rate limit\n    ThrottlerModule.forRoot([\n      {\n        limit: 3,\n        ttl: 60000,\n      },\n    ]),\n    EventEmitterModule.forRoot({\n      wildcard: true,\n      delimiter: '.',\n      newListener: false,\n      removeListener: false,\n      maxListeners: 20,\n      verboseMemoryLeak: isDev,\n      ignoreErrors: false,\n    }),\n    // mailer\n    MailerModule,\n  ],\n  providers,\n  exports: [MailerModule, ...providers],\n})\nexport class HelperModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HistoryController.html":{"url":"controllers/HistoryController.html","title":"controller - HistoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HistoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/history/history.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                historys\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                batchDelete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        batchDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    batchDelete(dto: BatchDeleteDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('batchDelete')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/history/history.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            BatchDeleteDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        page\n                        \n                    \n                \n            \n            \n                \n                        \n                    page(dto: HistoryPagerDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('page')@ApiOperation({summary: '获取浏览记录'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/history/history.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            HistoryPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Query } from '@nestjs/common'\n\nimport { ApiOperation, ApiTags } from '@nestjs/swagger'\n\nimport { BatchDeleteDto } from '@server/common/dto/delete.dto'\n\nimport { AuthUser } from '../auth/decorators/auth-user.decorator'\n\nimport { HistoryPagerDto } from './history.dto'\nimport { HistoryService } from './history.service'\n\n@ApiTags('Business - 历史记录模块')\n@Controller('historys')\nexport class HistoryController {\n  constructor(private historyService: HistoryService) { }\n\n  @Get('page')\n  @ApiOperation({ summary: '获取浏览记录' })\n  async page(@Query() dto: HistoryPagerDto, @AuthUser() user: IAuthUser) {\n    return this.historyService.paginate(dto, user.id)\n  }\n\n  @Delete('batchDelete')\n  async batchDelete(@Body() dto: BatchDeleteDto, @AuthUser() user: IAuthUser) {\n    return await this.historyService.batchDelete(dto.ids, user.id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HistoryModule.html":{"url":"modules/HistoryModule.html","title":"module - HistoryModule","body":"\n                   \n\n\n\n\n    Modules\n    HistoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HistoryModule\n\n\n\ncluster_HistoryModule_exports\n\n\n\ncluster_HistoryModule_providers\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\n\n\nHistoryModule\n\nHistoryModule\n\nAdminEventsGateway  -->\n\nHistoryModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nHistoryModule->WebEventsGateway \n\n\n\n\n\nHistoryService\n\nHistoryService\n\nHistoryModule -->\n\nHistoryService->HistoryModule\n\n\n\n\n\nHistoryTrpcRouter\n\nHistoryTrpcRouter\n\nHistoryModule -->\n\nHistoryTrpcRouter->HistoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/history/history.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HistoryService\n                        \n                        \n                            HistoryTrpcRouter\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HistoryController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Provider, forwardRef } from '@nestjs/common'\n\nimport { NoteModule } from '../note/note.module'\n\nimport { HistoryController } from './history.controller'\nimport { HistoryService } from './history.service'\nimport { HistoryTrpcRouter } from './history.trpc'\n\nconst providers: Provider[] = [\n  HistoryService,\n  HistoryTrpcRouter,\n]\n\n@Module({\n  imports: [\n    forwardRef(() => NoteModule),\n  ],\n  controllers: [HistoryController],\n  providers,\n  exports: [...providers],\n})\nexport class HistoryModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HistoryPagerDto.html":{"url":"classes/HistoryPagerDto.html","title":"class - HistoryPagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HistoryPagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/history/history.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(basePagerSchema.extend({\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { createZodDto } from 'nestjs-zod'\n\nexport class HistoryPagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryService.html":{"url":"injectables/HistoryService.html","title":"injectable - HistoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/history/history.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                batchDelete\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheService: CacheService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/history/history.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheService\n                                                  \n                                                        \n                                                                        CacheService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        batchDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    batchDelete(ids: string[], userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/history/history.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(itemId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/history/history.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(dto: HistoryPagerDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/history/history.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            HistoryPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExtendedPrismaClient\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectPrismaClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/history/history.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { RedisKeys } from '@server/constants/cache.constant'\nimport { CacheService } from '@server/shared/cache/cache.service'\nimport { ExtendedPrismaClient, InjectPrismaClient } from '@server/shared/database/prisma.extension'\nimport { getRedisKey } from '@server/utils/redis.util'\n\nimport { HistoryPagerDto } from './history.dto'\n\n@Injectable()\nexport class HistoryService {\n  @InjectPrismaClient()\n  private prisma: ExtendedPrismaClient\n\n  constructor(\n    private readonly cacheService: CacheService,\n  ) { }\n\n  async paginate(\n    dto: HistoryPagerDto,\n    userId: string,\n  ) {\n    const { cursor, limit } = dto\n\n    const [items, meta] = await this.prisma.history.paginate({\n      where: {\n        userId,\n      },\n      orderBy: {\n        visitedAt: 'desc',\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    return { items, meta }\n  }\n\n  async create(itemId: string, userId: string) {\n    // 上次浏览时间\n    const cacheKey = await getRedisKey(RedisKeys.View, `${itemId}:ip`)\n    const lastViewedAt = await this.cacheService.get(cacheKey)\n\n    if (lastViewedAt)\n      return\n\n    await this.cacheService.set(cacheKey, '1', 60_000)\n\n    const history = await this.prisma.history.findFirst({\n      where: {\n        noteId: itemId,\n        userId,\n      },\n    })\n\n    if (history) {\n      await this.prisma.history.update({\n        where: { id: history.id },\n        data: { visitedAt: new Date() },\n      })\n    }\n    else {\n      await this.prisma.history.create({\n        data: {\n          noteId: itemId,\n          userId,\n        },\n      })\n    }\n  }\n\n  async batchDelete(ids: string[], userId: string) {\n    return await this.prisma.history.deleteMany({\n      where: {\n        id: { in: ids },\n        userId,\n      },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HistoryTrpcRouter.html":{"url":"injectables/HistoryTrpcRouter.html","title":"injectable - HistoryTrpcRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HistoryTrpcRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/history/history.trpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createRouter\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(trpcService: TRPCService, historyService: HistoryService, noteService: NotePublicService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/history/history.trpc.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trpcService\n                                                  \n                                                        \n                                                                        TRPCService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyService\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        noteService\n                                                  \n                                                        \n                                                                        NotePublicService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createRouter\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRouter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/history/history.trpc.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/history/history.trpc.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/history/history.trpc.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common'\n\nimport { BatchDeleteDto } from '@server/common/dto/delete.dto'\nimport { TRPCRouter } from '@server/shared/trpc/trpc.decorator'\nimport { defineTrpcRouter } from '@server/shared/trpc/trpc.helper'\nimport { TRPCService } from '@server/shared/trpc/trpc.service'\n\nimport { Note } from '@youni/database'\n\nimport { NotePublicService } from '../note/note.public.service'\n\nimport { HistoryPagerDto } from './history.dto'\nimport { HistoryService } from './history.service'\n\n@TRPCRouter()\n@Injectable()\nexport class HistoryTrpcRouter implements OnModuleInit {\n  private router: ReturnType\n\n  constructor(\n    private readonly trpcService: TRPCService,\n    private readonly historyService: HistoryService,\n    private readonly noteService: NotePublicService,\n  ) { }\n\n  onModuleInit() {\n    this.router = this.createRouter()\n  }\n\n  private createRouter() {\n    const procedureAuth = this.trpcService.procedureAuth\n    return defineTrpcRouter('history', {\n      list: procedureAuth\n        .input(HistoryPagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          const { items, meta } = await this.historyService.paginate(input, user.id)\n\n          const noteIds = items.map(item => item.noteId!)\n\n          const notes = await this.noteService.getNotesByIds(noteIds)\n\n          await this.noteService.appendInteractInfo(notes as unknown as Note[], user.id)\n\n          return {\n            items: notes,\n            meta,\n          }\n        }),\n      batchDelete: procedureAuth\n        .input(BatchDeleteDto.schema)\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { ids } = input\n\n          return this.historyService.batchDelete(ids, user.id)\n        }),\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthGateway.html":{"url":"interfaces/IAuthGateway.html","title":"interface - IAuthGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/socket/shared/auth.gateway.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n                            BroadcastBaseGateway\n            \n\n\n\n\n    \n\n\n    \n        import { } from '@nestjs/common'\nimport { OnEvent } from '@nestjs/event-emitter'\nimport { JwtService } from '@nestjs/jwt'\nimport type {\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets'\nimport { WebSocketServer } from '@nestjs/websockets'\n\nimport { EventBusEvents } from '@server/constants/event-bus.constant'\n\nimport { TokenService } from '@server/modules/auth/services/token.service'\nimport { CacheService } from '@server/shared/cache/cache.service'\nimport type { Socket } from 'socket.io'\nimport { Namespace } from 'socket.io'\n\nimport { BroadcastBaseGateway } from '../base.gateway'\nimport { BusinessEvents } from '../business-event.constant'\n\nexport interface AuthGatewayOptions {\n  namespace: string\n}\n\n// eslint-disable-next-line ts/ban-ts-comment\n// @ts-expect-error\nexport interface IAuthGateway extends OnGatewayConnection, OnGatewayDisconnect, BroadcastBaseGateway {}\n\nexport function createAuthGateway(options: AuthGatewayOptions): new (...args: any[]) => IAuthGateway {\n  const { namespace } = options\n\n  class AuthGateway extends BroadcastBaseGateway implements IAuthGateway {\n    constructor(\n      protected readonly jwtService: JwtService,\n      protected readonly tokenService: TokenService,\n      private readonly cacheService: CacheService,\n    ) {\n      super()\n    }\n\n    @WebSocketServer()\n    protected namespace: Namespace\n\n    async authFailed(client: Socket) {\n      client.send(\n        this.gatewayMessageFormat(BusinessEvents.AUTH_FAILED, '认证失败'),\n      )\n      client.disconnect()\n    }\n\n    async authToken(token: string): Promise {\n      if (typeof token !== 'string')\n        return false\n\n      const validJwt = async () => {\n        try {\n          const ok = await this.jwtService.verify(token)\n\n          if (!ok)\n            return false\n        }\n        catch {\n          return false\n        }\n        // is not crash, is verify\n        return true\n      }\n\n      return await validJwt()\n    }\n\n    async handleConnection(client: Socket) {\n      const token\n        = client.handshake.query.token\n        || client.handshake.headers.authorization\n        || client.handshake.headers.Authorization\n      if (!token)\n        return this.authFailed(client)\n\n      if (!(await this.authToken(token as string)))\n        return this.authFailed(client)\n\n      super.handleConnect(client)\n\n      const sid = client.id\n      this.tokenSocketIdMap.set(token.toString(), sid)\n\n      return this.jwtService.decode(token as string) as IAuthUser\n    }\n\n    handleDisconnect(client: Socket) {\n      super.handleDisconnect(client)\n    }\n\n    tokenSocketIdMap = new Map()\n\n    @OnEvent(EventBusEvents.TokenExpired)\n    handleTokenExpired(token: string) {\n      // consola.debug(`token expired: ${token}`)\n\n      const server = this.namespace.server\n      const sid = this.tokenSocketIdMap.get(token)\n      if (!sid)\n        return false\n\n      const socket = server.of(`/${namespace}`).sockets.get(sid)\n      if (socket) {\n        socket.disconnect()\n        super.handleDisconnect(socket)\n        return true\n      }\n      return false\n    }\n\n    override broadcast(event: BusinessEvents, data: any) {\n      this.cacheService.emitter\n        .of(`/${namespace}`)\n        .emit('message', this.gatewayMessageFormat(event, data))\n    }\n  }\n\n  return AuthGateway\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBaseResponse.html":{"url":"interfaces/IBaseResponse.html","title":"interface - IBaseResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IBaseResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/model/response.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            code\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ok\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ok\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ok:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\n\nimport {\n  RESPONSE_SUCCESS_CODE,\n  RESPONSE_SUCCESS_MSG,\n} from '@server/constants/response.constant'\n\nexport interface IBaseResponse {\n  ok?: boolean\n  code?: number\n  message?: string\n  data?: T\n}\n\nexport class ResOp {\n  @ApiProperty({ type: 'boolean', default: true })\n  ok: boolean\n\n  @ApiProperty({ type: 'number', default: RESPONSE_SUCCESS_CODE })\n  code: number\n\n  @ApiProperty({ type: 'string', default: RESPONSE_SUCCESS_MSG })\n  message: string\n\n  @ApiProperty({ type: 'object' })\n  data?: T\n\n  constructor({\n    code,\n    message,\n    ok,\n    data,\n  }: IBaseResponse) {\n    this.code = code ?? RESPONSE_SUCCESS_CODE\n    this.message = message ?? RESPONSE_SUCCESS_MSG\n    this.ok = ok ?? true\n\n    if (data)\n      this.data = data\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/id.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(\n  z.object({\n    id: SnowflakeIdSchema,\n  }),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const SnowflakeIdSchema = z.string().regex(/^\\d{16,19}$/)\n\nexport class IdDto extends createZodDto(\n  z.object({\n    id: SnowflakeIdSchema,\n  }),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IdempotenceInterceptor.html":{"url":"injectables/IdempotenceInterceptor.html","title":"injectable - IdempotenceInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IdempotenceInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/idempotence.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateKey\n                            \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, cacheService: CacheService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/idempotence.interceptor.ts:54\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheService\n                                                  \n                                                        \n                                                                        CacheService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateKey(req: FastifyRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/idempotence.interceptor.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        FastifyRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                        \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/idempotence.interceptor.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import type {\n  CallHandler,\n  ExecutionContext,\n  NestInterceptor,\n} from '@nestjs/common'\n\nimport {\n  ConflictException,\n  Injectable,\n  SetMetadata,\n} from '@nestjs/common'\nimport { Reflector } from '@nestjs/core'\n\nimport { CacheService } from '@server/shared/cache/cache.service'\nimport { getIp } from '@server/utils/ip.util'\nimport { getRedisKey } from '@server/utils/redis.util'\n\nimport { hashString } from '@server/utils/tool.util'\nimport type { FastifyRequest } from 'fastify'\nimport { catchError, tap } from 'rxjs'\n\nimport { HTTP_IDEMPOTENCE_KEY, HTTP_IDEMPOTENCE_OPTIONS } from '../decorators/idempotence.decorator'\n\nconst IdempotenceHeaderKey = 'x-idempotence'\n\nexport interface IdempotenceOption {\n  errorMessage?: string\n  pendingMessage?: string\n\n  /**\n   * 如果重复请求的话，手动处理异常\n   */\n  handler?: (req: FastifyRequest) => any\n\n  /**\n   * 记录重复请求的时间\n   * @default 60\n   */\n  expired?: number\n\n  /**\n   * 如果 header 没有幂等 key，根据 request 生成 key，如何生成这个 key 的方法\n   */\n  generateKey?: (req: FastifyRequest) => string\n\n  /**\n   * 仅读取 header 的 key，不自动生成\n   * @default false\n   */\n  disableGenerateKey?: boolean\n}\n\n@Injectable()\nexport class IdempotenceInterceptor implements NestInterceptor {\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly cacheService: CacheService,\n  ) {}\n\n  async intercept(context: ExecutionContext, next: CallHandler) {\n    const request = context.switchToHttp().getRequest()\n\n    // skip Get 请求\n    if (request.method.toUpperCase() === 'GET')\n      return next.handle()\n\n    const handler = context.getHandler()\n    const options: IdempotenceOption | undefined = this.reflector.get(\n      HTTP_IDEMPOTENCE_OPTIONS,\n      handler,\n    )\n\n    if (!options)\n      return next.handle()\n\n    const {\n      errorMessage = '相同请求成功后在 60 秒内只能发送一次',\n      pendingMessage = '相同请求正在处理中...',\n      handler: errorHandler,\n      expired = 60,\n      disableGenerateKey = false,\n    } = options\n    const redis = this.cacheService.getClient()\n\n    const idempotence = request.headers[IdempotenceHeaderKey] as string\n    const key = disableGenerateKey\n      ? undefined\n      : options.generateKey\n        ? options.generateKey(request)\n        : this.generateKey(request)\n\n    const idempotenceKey\n      = !!(idempotence || key) && getRedisKey(`idempotence:${idempotence || key}`)\n\n    SetMetadata(HTTP_IDEMPOTENCE_KEY, idempotenceKey)(handler)\n\n    if (idempotenceKey) {\n      const resultValue: '0' | '1' | null = (await redis.get(\n        idempotenceKey,\n      )) as any\n      if (resultValue !== null) {\n        if (errorHandler)\n          return await errorHandler(request)\n\n        const message = {\n          1: errorMessage,\n          0: pendingMessage,\n        }[resultValue]\n        throw new ConflictException(message)\n      }\n      else {\n        await redis.set(idempotenceKey, '0', 'EX', expired)\n      }\n    }\n    return next.handle().pipe(\n      tap(async () => {\n        idempotenceKey && (await redis.set(idempotenceKey, '1', 'KEEPTTL'))\n      }),\n      catchError(async (err) => {\n        if (idempotenceKey)\n          await redis.del(idempotenceKey)\n\n        throw err\n      }),\n    )\n  }\n\n  private generateKey(req: FastifyRequest) {\n    const { body, params, query = {}, headers, url } = req\n\n    const obj = { body, url, params, query } as any\n\n    const uuid = headers['x-uuid']\n    if (uuid) {\n      obj.uuid = uuid\n    }\n    else {\n      const ua = headers['user-agent']\n      const ip = getIp(req)\n\n      if (!ua && !ip)\n        return undefined\n\n      Object.assign(obj, { ua, ip })\n    }\n\n    return hashString(JSON.stringify(obj))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IdempotenceOption.html":{"url":"interfaces/IdempotenceOption.html","title":"interface - IdempotenceOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IdempotenceOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/idempotence.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disableGenerateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errorMessage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expired\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            generateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            handler\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            pendingMessage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disableGenerateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableGenerateKey:         boolean\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : false\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    仅读取 header 的 key，不自动生成\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorMessage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expired\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expired:         number\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 60\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    记录重复请求的时间\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        generateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        generateKey:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    如果 header 没有幂等 key，根据 request 生成 key，如何生成这个 key 的方法\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    如果重复请求的话，手动处理异常\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pendingMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pendingMessage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type {\n  CallHandler,\n  ExecutionContext,\n  NestInterceptor,\n} from '@nestjs/common'\n\nimport {\n  ConflictException,\n  Injectable,\n  SetMetadata,\n} from '@nestjs/common'\nimport { Reflector } from '@nestjs/core'\n\nimport { CacheService } from '@server/shared/cache/cache.service'\nimport { getIp } from '@server/utils/ip.util'\nimport { getRedisKey } from '@server/utils/redis.util'\n\nimport { hashString } from '@server/utils/tool.util'\nimport type { FastifyRequest } from 'fastify'\nimport { catchError, tap } from 'rxjs'\n\nimport { HTTP_IDEMPOTENCE_KEY, HTTP_IDEMPOTENCE_OPTIONS } from '../decorators/idempotence.decorator'\n\nconst IdempotenceHeaderKey = 'x-idempotence'\n\nexport interface IdempotenceOption {\n  errorMessage?: string\n  pendingMessage?: string\n\n  /**\n   * 如果重复请求的话，手动处理异常\n   */\n  handler?: (req: FastifyRequest) => any\n\n  /**\n   * 记录重复请求的时间\n   * @default 60\n   */\n  expired?: number\n\n  /**\n   * 如果 header 没有幂等 key，根据 request 生成 key，如何生成这个 key 的方法\n   */\n  generateKey?: (req: FastifyRequest) => string\n\n  /**\n   * 仅读取 header 的 key，不自动生成\n   * @default false\n   */\n  disableGenerateKey?: boolean\n}\n\n@Injectable()\nexport class IdempotenceInterceptor implements NestInterceptor {\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly cacheService: CacheService,\n  ) {}\n\n  async intercept(context: ExecutionContext, next: CallHandler) {\n    const request = context.switchToHttp().getRequest()\n\n    // skip Get 请求\n    if (request.method.toUpperCase() === 'GET')\n      return next.handle()\n\n    const handler = context.getHandler()\n    const options: IdempotenceOption | undefined = this.reflector.get(\n      HTTP_IDEMPOTENCE_OPTIONS,\n      handler,\n    )\n\n    if (!options)\n      return next.handle()\n\n    const {\n      errorMessage = '相同请求成功后在 60 秒内只能发送一次',\n      pendingMessage = '相同请求正在处理中...',\n      handler: errorHandler,\n      expired = 60,\n      disableGenerateKey = false,\n    } = options\n    const redis = this.cacheService.getClient()\n\n    const idempotence = request.headers[IdempotenceHeaderKey] as string\n    const key = disableGenerateKey\n      ? undefined\n      : options.generateKey\n        ? options.generateKey(request)\n        : this.generateKey(request)\n\n    const idempotenceKey\n      = !!(idempotence || key) && getRedisKey(`idempotence:${idempotence || key}`)\n\n    SetMetadata(HTTP_IDEMPOTENCE_KEY, idempotenceKey)(handler)\n\n    if (idempotenceKey) {\n      const resultValue: '0' | '1' | null = (await redis.get(\n        idempotenceKey,\n      )) as any\n      if (resultValue !== null) {\n        if (errorHandler)\n          return await errorHandler(request)\n\n        const message = {\n          1: errorMessage,\n          0: pendingMessage,\n        }[resultValue]\n        throw new ConflictException(message)\n      }\n      else {\n        await redis.set(idempotenceKey, '0', 'EX', expired)\n      }\n    }\n    return next.handle().pipe(\n      tap(async () => {\n        idempotenceKey && (await redis.set(idempotenceKey, '1', 'KEEPTTL'))\n      }),\n      catchError(async (err) => {\n        if (idempotenceKey)\n          await redis.del(idempotenceKey)\n\n        throw err\n      }),\n    )\n  }\n\n  private generateKey(req: FastifyRequest) {\n    const { body, params, query = {}, headers, url } = req\n\n    const obj = { body, url, params, query } as any\n\n    const uuid = headers['x-uuid']\n    if (uuid) {\n      obj.uuid = uuid\n    }\n    else {\n      const ua = headers['user-agent']\n      const ip = getIp(req)\n\n      if (!ua && !ip)\n        return undefined\n\n      Object.assign(obj, { ua, ip })\n    }\n\n    return hashString(JSON.stringify(obj))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageCaptcha.html":{"url":"classes/ImageCaptcha.html","title":"class - ImageCaptcha","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageCaptcha\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                image\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ImageCaptcha {\n  id: string\n  image: string\n}\n\nexport class LoginResult {\n  authToken: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageCaptchaDto.html":{"url":"classes/ImageCaptchaDto.html","title":"class - ImageCaptchaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageCaptchaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/captcha/captcha.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        createZodDto(z.object({\n  width: z.number().optional().default(100),\n  height: z.number().optional().default(50),\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport class ImageCaptchaDto extends createZodDto(z.object({\n  width: z.number().optional().default(100),\n  height: z.number().optional().default(50),\n})) {}\n\nexport class SendEmailCodeDto extends createZodDto(z.object({\n  email: z.string().email({ message: '邮箱格式不正确' }),\n})) {}\n\nexport class SendSmsCodeDto extends createZodDto(z.object({\n  phone: z.string().regex(/^1[3-9]\\d{9}$/, { message: '手机号格式不正确' }),\n})) {}\n\nexport class CheckCodeDto extends createZodDto(z.object({\n  identity: z.string(),\n  code: z.string(),\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImagesDto.html":{"url":"classes/ImagesDto.html","title":"class - ImagesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImagesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/image.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(ImagesSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const ImageSchema = z.object({\n  src: z.string(),\n  width: z.number().optional(),\n  height: z.number().optional(),\n})\n\nexport const ImagesSchema = z.array(ImageSchema)\n\nexport class ImagesDto extends createZodDto(ImagesSchema) {}\n\nexport type Image = z.infer\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InteractListener.html":{"url":"injectables/InteractListener.html","title":"injectable - InteractListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InteractListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/interact/interact.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handleCommentCreateEvent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                handleCommentLikeEvent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                handleNoteCollectAndUncollectEvent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                handleNoteLikeAndDislikeEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(interactQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/modules/interact/interact.listener.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        interactQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleCommentCreateEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCommentCreateEvent(event: CommentCreateEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(CommentEvents.CommentCreate)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/interact/interact.listener.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CommentCreateEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        handleCommentLikeEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCommentLikeEvent(event: CommentLikeEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(CommentEvents.CommentLike)@OnEvent(CommentEvents.CommentDislike)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/interact/interact.listener.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CommentLikeEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        handleNoteCollectAndUncollectEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNoteCollectAndUncollectEvent(event: NoteCollectEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(NoteEvents.NoteCollect)@OnEvent(NoteEvents.NoteUncollect)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/interact/interact.listener.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            NoteCollectEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        handleNoteLikeAndDislikeEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNoteLikeAndDislikeEvent(event: NoteLikeEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(NoteEvents.NoteDislike)@OnEvent(NoteEvents.NoteLike)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/interact/interact.listener.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            NoteLikeEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectQueue } from '@nestjs/bull'\nimport { Injectable } from '@nestjs/common'\n\nimport { OnEvent } from '@nestjs/event-emitter'\nimport { Queue } from 'bull'\n\nimport { CommentEvents } from '../comment/comment.constant'\nimport { CommentCreateEvent } from '../comment/events/comment-create.event'\nimport { CommentLikeEvent } from '../comment/events/comment-like.event'\nimport { NoteCollectEvent } from '../note/events/note-collect.event'\nimport { NoteLikeEvent } from '../note/events/note-like.event'\nimport { NoteEvents } from '../note/note.constant'\n\nimport { INTERACT_QUEUE, InteractType, QueueProcess } from './interact.constant'\n\nconst DELAY = 3_000\n\n@Injectable()\nexport class InteractListener {\n  constructor(\n    @InjectQueue(INTERACT_QUEUE) private interactQueue: Queue,\n  ) { }\n\n  @OnEvent(NoteEvents.NoteDislike)\n  @OnEvent(NoteEvents.NoteLike)\n  async handleNoteLikeAndDislikeEvent(event: NoteLikeEvent) {\n    const { note } = event\n\n    const itemType = InteractType.Note\n    const itemId = note.id\n\n    const jobId = `${itemType}-${itemId}-counting`\n    await this.interactQueue.add(\n      QueueProcess.UpdateItemCount,\n      {\n        itemType,\n        itemId,\n      },\n      {\n        delay: DELAY,\n        jobId,\n        removeOnComplete: true,\n        removeOnFail: true,\n      },\n    )\n  }\n\n  @OnEvent(NoteEvents.NoteCollect)\n  @OnEvent(NoteEvents.NoteUncollect)\n  async handleNoteCollectAndUncollectEvent(event: NoteCollectEvent) {\n    const { note } = event\n\n    const itemType = InteractType.Note\n    const itemId = note.id\n\n    const jobId = `${itemType}-${itemId}-counting`\n    await this.interactQueue.add(\n      QueueProcess.UpdateItemCount,\n      {\n        itemType,\n        itemId,\n      },\n      {\n        delay: DELAY,\n        jobId,\n        removeOnComplete: true,\n        removeOnFail: true,\n      },\n    )\n  }\n\n  @OnEvent(CommentEvents.CommentLike)\n  @OnEvent(CommentEvents.CommentDislike)\n  async handleCommentLikeEvent(event: CommentLikeEvent) {\n    const { comment } = event\n\n    const itemType = InteractType.Comment\n    const itemId = comment.id\n\n    const jobId = `${itemType}-${itemId}-counting`\n\n    await this.interactQueue.add(\n      QueueProcess.UpdateCommentCount,\n      {\n        itemType,\n        itemId,\n        refType: comment.refType,\n        refId: comment.refId,\n        parentId: comment.parentId,\n      },\n      {\n        delay: DELAY,\n        jobId,\n        removeOnComplete: true,\n        removeOnFail: true,\n      },\n    )\n  }\n\n  @OnEvent(CommentEvents.CommentCreate)\n  async handleCommentCreateEvent(event: CommentCreateEvent) {\n    const { comment } = event\n\n    const itemType = comment.refType\n    const itemId = comment.refId\n\n    const jobId = `${itemType}-${itemId}-counting`\n\n    // 更新子项数量\n    await this.interactQueue.add(\n      QueueProcess.UpdateItemCount,\n      {\n        itemType,\n        itemId,\n      },\n      {\n        delay: DELAY,\n        jobId,\n        removeOnComplete: true,\n        removeOnFail: true,\n      },\n    )\n\n    // 如果有父评论 则更新父评论数量\n    if (comment.parentId) {\n      const itemType = InteractType.Comment\n      const itemId = comment.parentId\n      const jobId = `${itemType}-${itemId}-counting`\n\n      await this.interactQueue.add(\n        QueueProcess.UpdateCommentCount,\n        {\n          itemType,\n          itemId,\n          refType: comment.refType,\n          refId: comment.refId,\n        },\n        {\n          delay: DELAY,\n          jobId,\n          removeOnComplete: true,\n          removeOnFail: true,\n        },\n      )\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InteractModule.html":{"url":"modules/InteractModule.html","title":"module - InteractModule","body":"\n                   \n\n\n\n\n    Modules\n    InteractModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InteractModule\n\n\n\ncluster_InteractModule_imports\n\n\n\ncluster_InteractModule_exports\n\n\n\ncluster_InteractModule_providers\n\n\n\n\nBullModule\n\nBullModule\n\n\n\nInteractModule\n\nInteractModule\n\nInteractModule -->\n\nBullModule->InteractModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nInteractModule -->\n\nUserModule->InteractModule\n\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\nAdminEventsGateway  -->\n\nInteractModule->AdminEventsGateway \n\n\n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\nWebEventsGateway  -->\n\nInteractModule->WebEventsGateway \n\n\n\n\n\nCountingService\n\nCountingService\n\nInteractModule -->\n\nCountingService->InteractModule\n\n\n\n\n\nFollowService\n\nFollowService\n\nInteractModule -->\n\nFollowService->InteractModule\n\n\n\n\n\nInteractListener\n\nInteractListener\n\nInteractModule -->\n\nInteractListener->InteractModule\n\n\n\n\n\nInteractTrpcRouter\n\nInteractTrpcRouter\n\nInteractModule -->\n\nInteractTrpcRouter->InteractModule\n\n\n\n\n\nLikeService\n\nLikeService\n\nInteractModule -->\n\nLikeService->InteractModule\n\n\n\n\n\nViewService\n\nViewService\n\nInteractModule -->\n\nViewService->InteractModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/interact/interact.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountingService\n                        \n                        \n                            FollowService\n                        \n                        \n                            InteractListener\n                        \n                        \n                            InteractTrpcRouter\n                        \n                        \n                            LikeService\n                        \n                        \n                            ViewService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BullModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bull'\nimport { Module, Provider } from '@nestjs/common'\n\nimport { UserModule } from '../user/user.module'\n\nimport { INTERACT_QUEUE } from './interact.constant'\nimport { InteractListener } from './interact.listener'\nimport { InteractProcessor } from './interact.processor'\nimport { InteractTrpcRouter } from './interact.trpc'\nimport { CountingService } from './services/counting.service'\nimport { FollowService } from './services/follow.service'\nimport { LikeService } from './services/like.service'\nimport { ViewService } from './services/view.service'\n\nconst providers: Provider[] = [\n  CountingService,\n  LikeService,\n  ViewService,\n  FollowService,\n  InteractTrpcRouter,\n  InteractListener,\n  InteractProcessor,\n]\n\n@Module({\n  imports: [\n    UserModule,\n    BullModule.registerQueue(\n      {\n        name: INTERACT_QUEUE,\n      },\n    ),\n  ],\n  providers,\n  exports: providers,\n})\nexport class InteractModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractPagerDto.html":{"url":"classes/InteractPagerDto.html","title":"class - InteractPagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractPagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/interact/interact.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(basePagerSchema.extend({\n  id: SnowflakeIdSchema,\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SnowflakeIdSchema } from '@server/common/dto/id.dto'\nimport { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { createZodDto } from 'nestjs-zod'\n\nexport class InteractPagerDto extends createZodDto(basePagerSchema.extend({\n  id: SnowflakeIdSchema,\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractProcessor.html":{"url":"classes/InteractProcessor.html","title":"class - InteractProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/interact/interact.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handleUpdateCommentCount\n                            \n                            \n                                    \n                                    Async\n                                handleUpdateItemCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(likeService: LikeService, countingService: CountingService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/interact/interact.processor.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        likeService\n                                                  \n                                                        \n                                                                        LikeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        countingService\n                                                  \n                                                        \n                                                                        CountingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(InteractProcessor.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/interact/interact.processor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleUpdateCommentCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdateCommentCount(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process({name: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/interact/interact.processor.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                            Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleUpdateItemCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdateItemCount(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process({name: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/interact/interact.processor.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                            Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Process, Processor } from '@nestjs/bull'\nimport { Logger } from '@nestjs/common'\nimport { Job } from 'bull'\n\nimport { INTERACT_QUEUE, InteractType, QueueProcess } from './interact.constant'\nimport { CountingService } from './services/counting.service'\nimport { LikeService } from './services/like.service'\n\nexport interface JobData {\n  itemType: InteractType\n  itemId: string\n\n  refType: InteractType\n  refId: string\n}\n\n@Processor(INTERACT_QUEUE)\nexport class InteractProcessor {\n  private readonly logger = new Logger(InteractProcessor.name)\n\n  constructor(\n    private readonly likeService: LikeService,\n    private readonly countingService: CountingService,\n  ) { }\n\n  @Process({ name: QueueProcess.UpdateItemCount })\n  async handleUpdateItemCount(job: Job) {\n    const { itemType, itemId } = job.data\n\n    const likeCountPromise = this.likeService.getItemlikedCount(itemType, itemId)\n    const collectedCountPromise = this.countingService.getItemCollectCount(itemId)\n    const commentCountPromise = this.countingService.getCommentCount(itemType, itemId)\n\n    const [likeCount, collectedCount, commentCount] = await Promise.all([\n      likeCountPromise,\n      collectedCountPromise,\n      commentCountPromise,\n    ])\n\n    await Promise.all([\n      this.countingService.updateCount(itemType, itemId, 'liked', likeCount),\n      this.countingService.updateCount(itemType, itemId, 'collect', collectedCount),\n      this.countingService.updateCount(itemType, itemId, 'comment', commentCount),\n    ])\n  }\n\n  @Process({ name: QueueProcess.UpdateCommentCount })\n  async handleUpdateCommentCount(job: Job) {\n    const { itemType, itemId, refType, refId } = job.data\n\n    const likeCountPromise = this.likeService.getItemlikedCount(itemType, itemId)\n    const commentCountPromise = this.countingService.getCommentCount(refType, refId, itemId)\n\n    const [likeCount, commentCount] = await Promise.all([\n      likeCountPromise,\n      commentCountPromise,\n    ])\n\n    await Promise.all([\n      this.countingService.updateCount(itemType, itemId, 'liked', likeCount),\n      this.countingService.updateCount(itemType, itemId, 'comment', commentCount),\n    ])\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InteractTrpcRouter.html":{"url":"injectables/InteractTrpcRouter.html","title":"injectable - InteractTrpcRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InteractTrpcRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/interact/interact.trpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createRouter\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(trpcService: TRPCService, followSerive: FollowService, userService: UserPublicService, countingService: CountingService, cacheService: CacheService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/interact/interact.trpc.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trpcService\n                                                  \n                                                        \n                                                                        TRPCService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followSerive\n                                                  \n                                                        \n                                                                        FollowService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserPublicService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        countingService\n                                                  \n                                                        \n                                                                        CountingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheService\n                                                  \n                                                        \n                                                                        CacheService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createRouter\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRouter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/interact.trpc.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/interact.trpc.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/interact/interact.trpc.ts:22\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common'\n\nimport { IdDto } from '@server/common/dto/id.dto'\nimport { PagerDto } from '@server/common/dto/pager.dto'\nimport { CacheService } from '@server/shared/cache/cache.service'\nimport { TRPCRouter } from '@server/shared/trpc/trpc.decorator'\nimport { defineTrpcRouter } from '@server/shared/trpc/trpc.helper'\nimport { TRPCService } from '@server/shared/trpc/trpc.service'\n\nimport { getRedisKey } from '@server/utils/redis.util'\n\nimport { UserPublicService } from '../user/user.public.service'\n\nimport { InteractState } from './interact'\nimport { InteractPagerDto } from './interact.dto'\nimport { CountingService } from './services/counting.service'\nimport { FollowService } from './services/follow.service'\n\n@TRPCRouter()\n@Injectable()\nexport class InteractTrpcRouter implements OnModuleInit {\n  private router: ReturnType\n\n  constructor(\n    private readonly trpcService: TRPCService,\n    private readonly followSerive: FollowService,\n    private readonly userService: UserPublicService,\n    private readonly countingService: CountingService,\n    private readonly cacheService: CacheService,\n  ) { }\n\n  onModuleInit() {\n    this.router = this.createRouter()\n  }\n\n  private createRouter() {\n    const procedureAuth = this.trpcService.procedureAuth\n    return defineTrpcRouter('interact', {\n      follow: procedureAuth\n        .input(IdDto.schema)\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id } = input\n\n          return this.followSerive.follow(id, user.id)\n        }),\n      unfollow: procedureAuth\n        .input(IdDto.schema)\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id } = input\n\n          return this.followSerive.unfollow(id, user.id)\n        }),\n      isFollowing: procedureAuth\n        .input(IdDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id } = input\n\n          return await this.followSerive.isUserFollowing(id, user.id)\n        }),\n      following: procedureAuth\n        .input(InteractPagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id, cursor, limit } = input\n\n          const { ids, meta } = await this.followSerive.getFollowingIds({ cursor, limit } as PagerDto, id)\n          const commomIds = await this.followSerive.getCommonFollowingIds(id, user.id)\n\n          const users = await this.userService.getUserByIds(ids)\n          // const usersNoteCount =\n\n          const items = users.map((user) => {\n            return {\n              ...user,\n              isFollowing: commomIds.includes(user.id),\n            }\n          })\n\n          return {\n            items,\n            meta,\n          }\n        }),\n      followers: procedureAuth\n        .input(InteractPagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id, cursor, limit } = input\n\n          const { ids, meta } = await this.followSerive.getFollowerIds(id, { cursor, limit } as PagerDto)\n          const commomIds = await this.followSerive.getCommonFollowerIds(id, user.id)\n\n          const users = await this.userService.getUserByIds(ids)\n\n          const items = users.map((user) => {\n            return {\n              ...user,\n              isFollowing: commomIds.includes(user.id),\n            }\n          })\n\n          return {\n            items,\n            meta,\n          }\n        }),\n      state: procedureAuth\n        .input(IdDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id } = input\n\n          const key = getRedisKey(`u:${id}:interact_state`)\n          const cache = await this.cacheService.get(key)\n          if (cache)\n            return cache\n\n          const isFollowingPromise = this.followSerive.isUserFollowing(id, user.id)\n          const followingCountPromise = this.followSerive.getFollowingCount(id)\n          const followerCountPromise = this.followSerive.getFollowerCount(id)\n          const likesCountPromise = this.countingService.getUserLikedCount(id)\n\n          const [isFollowing, followingCount, followerCount, likesCount] = await Promise.all([\n            isFollowingPromise,\n            followingCountPromise,\n            followerCountPromise,\n            likesCountPromise,\n          ])\n\n          const result: InteractState = {\n            followingCount,\n            followerCount,\n            likesCount,\n            isFollowing,\n          }\n\n          // await this.cacheService.set(key, result, 5 * 1000)\n          return result\n        }),\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JobData.html":{"url":"interfaces/JobData.html","title":"interface - JobData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JobData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/interact/interact.processor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemId\n                                        \n                                \n                                \n                                        \n                                            itemType\n                                        \n                                \n                                \n                                        \n                                            refId\n                                        \n                                \n                                \n                                        \n                                            refType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        itemType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemType:         InteractType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InteractType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refType:         InteractType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InteractType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Process, Processor } from '@nestjs/bull'\nimport { Logger } from '@nestjs/common'\nimport { Job } from 'bull'\n\nimport { INTERACT_QUEUE, InteractType, QueueProcess } from './interact.constant'\nimport { CountingService } from './services/counting.service'\nimport { LikeService } from './services/like.service'\n\nexport interface JobData {\n  itemType: InteractType\n  itemId: string\n\n  refType: InteractType\n  refId: string\n}\n\n@Processor(INTERACT_QUEUE)\nexport class InteractProcessor {\n  private readonly logger = new Logger(InteractProcessor.name)\n\n  constructor(\n    private readonly likeService: LikeService,\n    private readonly countingService: CountingService,\n  ) { }\n\n  @Process({ name: QueueProcess.UpdateItemCount })\n  async handleUpdateItemCount(job: Job) {\n    const { itemType, itemId } = job.data\n\n    const likeCountPromise = this.likeService.getItemlikedCount(itemType, itemId)\n    const collectedCountPromise = this.countingService.getItemCollectCount(itemId)\n    const commentCountPromise = this.countingService.getCommentCount(itemType, itemId)\n\n    const [likeCount, collectedCount, commentCount] = await Promise.all([\n      likeCountPromise,\n      collectedCountPromise,\n      commentCountPromise,\n    ])\n\n    await Promise.all([\n      this.countingService.updateCount(itemType, itemId, 'liked', likeCount),\n      this.countingService.updateCount(itemType, itemId, 'collect', collectedCount),\n      this.countingService.updateCount(itemType, itemId, 'comment', commentCount),\n    ])\n  }\n\n  @Process({ name: QueueProcess.UpdateCommentCount })\n  async handleUpdateCommentCount(job: Job) {\n    const { itemType, itemId, refType, refId } = job.data\n\n    const likeCountPromise = this.likeService.getItemlikedCount(itemType, itemId)\n    const commentCountPromise = this.countingService.getCommentCount(refType, refId, itemId)\n\n    const [likeCount, commentCount] = await Promise.all([\n      likeCountPromise,\n      commentCountPromise,\n    ])\n\n    await Promise.all([\n      this.countingService.updateCount(itemType, itemId, 'liked', likeCount),\n      this.countingService.updateCount(itemType, itemId, 'comment', commentCount),\n    ])\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(AuthStrategy.JWT)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, authService: AuthService, tokenService: TokenService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt-auth.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tokenService\n                                                  \n                                                        \n                                                                        TokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/jwt-auth.guard.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common'\nimport { Reflector } from '@nestjs/core'\nimport { AuthGuard } from '@nestjs/passport'\nimport { ErrorCode, ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { AuthService } from '@server/modules/auth/auth.service'\nimport { FastifyRequest } from 'fastify'\n\nimport { AuthStrategy, PUBLIC_KEY } from '../auth.constant'\nimport { TokenService } from '../services/token.service'\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(AuthStrategy.JWT) {\n  constructor(\n    private reflector: Reflector,\n    private authService: AuthService,\n    private tokenService: TokenService,\n  ) {\n    super()\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ])\n\n    const request = context.switchToHttp().getRequest()\n    // const response = context.switchToHttp().getResponse()\n\n    const Authorization = request.headers.authorization\n\n    let result: any = false\n    try {\n      result = await super.canActivate(context)\n    }\n    catch (e) {\n      // 需要后置判断 这样携带了 token 的用户就能够解析到 request.user\n      if (isPublic)\n        return true\n\n      if (!Authorization)\n        throw new UnauthorizedException('未登录')\n\n      const ok = await this.tokenService.verifyToken(Authorization)\n      if (!ok)\n        throw new UnauthorizedException(ErrorCode[ErrorCodeEnum.JWTInvalid])\n    }\n\n    return result\n  }\n\n  handleRequest(err, user, info) {\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user)\n      throw err || new UnauthorizedException()\n\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(Strategy, AuthStrategy.JWT)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(securityConfig: ISecurityConfig)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        securityConfig\n                                                  \n                                                        \n                                                                        ISecurityConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: IAuthUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { ISecurityConfig, SecurityConfig } from '@server/config'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\n\nimport { AuthStrategy } from '../auth.constant'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, AuthStrategy.JWT) {\n  constructor(\n    @Inject(SecurityConfig.KEY) private securityConfig: ISecurityConfig,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: securityConfig.jwtSecret,\n    })\n  }\n\n  async validate(payload: IAuthUser) {\n    return payload\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LikeService.html":{"url":"injectables/LikeService.html","title":"injectable - LikeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LikeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/interact/services/like.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                dislike\n                            \n                            \n                                    Async\n                                getItemLiked\n                            \n                            \n                                    Async\n                                getItemlikedCount\n                            \n                            \n                                    Async\n                                getUserLikedIds\n                            \n                            \n                                    Async\n                                like\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis)\n                    \n                \n                        \n                            \n                                Defined in src/modules/interact/services/like.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        dislike\n                        \n                    \n                \n            \n            \n                \n                        \n                    dislike(type: InteractType, id: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/like.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            InteractType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getItemLiked\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemLiked(type: InteractType, id: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/like.service.ts:79\n                        \n                    \n\n\n            \n                \n                        获取条目是否已点赞\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            InteractType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    目标类型 (如 note)\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    目标 id (如 商品id)\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getItemlikedCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemlikedCount(type: InteractType, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/like.service.ts:63\n                        \n                    \n\n\n            \n                \n                        获取条目已点赞数量\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            InteractType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    目标类型 (如 note)\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    目标 id (如 商品id)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserLikedIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserLikedIds(dto: PagerDto, type: InteractType, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/like.service.ts:89\n                        \n                    \n\n\n            \n                \n                        获取用户已点赞 [条目]\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            PagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            InteractType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    目标类型 (如 note)\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        like\n                        \n                    \n                \n            \n            \n                \n                        \n                    like(type: InteractType, id: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/like.service.ts:23\n                        \n                    \n\n\n            \n                \n                        点赞\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            InteractType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    目标类型\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    目标 id\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRedis } from '@liaoliaots/nestjs-redis'\nimport { Injectable } from '@nestjs/common'\n\nimport { PagerDto } from '@server/common/dto/pager.dto'\nimport { getRedisKey } from '@server/utils/redis.util'\nimport Redis from 'ioredis'\n\nimport { CursorPaginationMeta } from 'prisma-extension-pagination'\n\nimport { InteractType } from '../interact.constant'\n\n@Injectable()\nexport class LikeService {\n  constructor(@InjectRedis() private readonly redis: Redis) { }\n\n  /**\n   * 点赞\n   * @param type 目标类型\n   * @param id 目标 id\n   * @param userId\n   * @returns\n   */\n  async like(type: InteractType, id: string, userId: string) {\n    const liked = await this.redis.sismember(getRedisKey(`${type}:${id}:users`), userId)\n\n    if (liked)\n      return false\n\n    await this.redis.multi()\n      // 统计条目点赞总数 (用于方便获取点赞数)\n      .incr(getRedisKey(`${type}:${id}:likes`))\n      // 添加用户到点赞列表 (用于获取是否点赞)\n      .sadd(getRedisKey(`${type}:${id}:users`), userId)\n      // 添加条目到用户已点赞列表 (用于获取用户已点赞条目)\n      .sadd(getRedisKey(`u:${userId}:${type}:likes`), id)\n      .exec()\n\n    return true\n  }\n\n  async dislike(type: InteractType, id: string, userId: string) {\n    const liked = await this.redis.sismember(getRedisKey(`${type}:${id}:users`), userId)\n\n    if (liked) {\n      await this.redis.multi()\n        .decr(getRedisKey(`${type}:${id}:likes`))\n        .srem(getRedisKey(`${type}:${id}:users`), userId)\n        .srem(getRedisKey(`u:${userId}:${type}:likes`), id)\n        .exec()\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * 获取条目已点赞数量\n   * @param type 目标类型 (如 note)\n   * @param id 目标 id (如 商品id)\n   * @returns\n   */\n  async getItemlikedCount(type: InteractType, id: string) {\n    const count = await this.redis.get(getRedisKey(`${type}:${id}:likes`))\n\n    // 不考虑使用 scard, 因为 scard 会遍历整个集合, 会影响性能\n    // const count = await this.redis.scard(`u:${type}:${id}:likes`);\n\n    return count ? Number.parseInt(count, 10) : 0\n  }\n\n  /**\n   * 获取条目是否已点赞\n   * @param type 目标类型 (如 note)\n   * @param id 目标 id (如 商品id)\n   * @param userId\n   * @returns\n   */\n  async getItemLiked(type: InteractType, id: string, userId: string) {\n    return !!await this.redis.sismember(getRedisKey(`${type}:${id}:users`), userId)\n  }\n\n  /**\n   * 获取用户已点赞 [条目]\n   * @param type 目标类型 (如 note)\n   * @param userId\n   * @returns\n   */\n  async getUserLikedIds(dto: PagerDto, type: InteractType, userId: string) {\n    const { cursor, limit } = dto\n\n    const ids: string[] = []\n\n    if (cursor === '') {\n      return {\n        ids: [],\n        meta: {\n          hasNextPage: false,\n          hasPreviousPage: false,\n          startCursor: null,\n          endCursor: null,\n        },\n      }\n    }\n\n    const [endCursor, keys] = await this.redis.sscan(getRedisKey(`u:${userId}:${type}:likes`), cursor || '', 'COUNT', limit)\n    ids.push(...keys)\n\n    const meta: CursorPaginationMeta = {\n      hasNextPage: endCursor !== '0',\n      hasPreviousPage: false,\n      startCursor: cursor || '',\n      endCursor,\n    }\n    return { ids, meta }\n\n    // return this.redis.smembers(getRedisKey(`u:${userId}:${type}:likes`))\n  }\n\n  // /**\n  //  * 获取用户获赞数量\n  //  * @param type 目标类型 (如 note)\n  //  * @param ids 目标 ids\n  //  * @param userId\n  //  * @returns\n  //  * @todo\n  //  */\n  // async getUserLikesCount(type: InteractType, ids: string[], userId: string) {\n  //   // 根据传入的ids 获取总点赞数量, 使用 Promise 并行\n  //   const likesCounts = await Promise.all(\n  //     ids.map(id =>\n  //       this.redis.get(getRedisKey(`${type}:${id}:likes`)),\n  //     ),\n  //   )\n\n  //   const totalLikesCount = likesCounts.reduce((total, count) => {\n  //     // 确保 count 有值\n  //     if (count) {\n  //       // 将字符串类型的 count 转换为数字类型\n  //       total += Number.parseInt(count, 10)\n  //     }\n  //     return total\n  //   }, 0)\n  //   return totalLikesCount\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalGuard.html":{"url":"injectables/LocalGuard.html","title":"injectable - LocalGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(AuthStrategy.LOCAL)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(_context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/local.guard.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _context\n                                            \n                                                            ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\nimport { AuthStrategy } from '../auth.constant'\n\n@Injectable()\nexport class LocalGuard extends AuthGuard(AuthStrategy.LOCAL) {\n  async canActivate(_context: ExecutionContext) {\n    return true\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  AuthStrategy.LOCAL,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/local.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { Strategy } from 'passport-local'\n\nimport { AuthStrategy } from '../auth.constant'\nimport { AuthService } from '../auth.service'\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(\n  Strategy,\n  AuthStrategy.LOCAL,\n) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'credential',\n      passwordField: 'password',\n    })\n  }\n\n  async validate(username: string, password: string) {\n    const user = await this.authService.validateUser(username, password, 'account')\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nMyLogger \n\nMyLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nMyLogger  -->\n\nLoggerModule->MyLogger \n\n\n\n\n\nMyLogger\n\nMyLogger\n\nLoggerModule -->\n\nMyLogger->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MyLogger\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MyLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\n\nimport { MyLogger } from './logger.service'\n\n@Module({\n  providers: [MyLogger],\n  exports: [MyLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/logging.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LoggingInterceptor.name, { timestamp: false })\n                    \n                \n                    \n                        \n                                Defined in src/common/interceptors/logging.interceptor.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  NestInterceptor,\n} from '@nestjs/common'\nimport { Observable, tap } from 'rxjs'\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  private logger = new Logger(LoggingInterceptor.name, { timestamp: false })\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable {\n    const call$ = next.handle()\n    const request = context.switchToHttp().getRequest()\n    const content = `${request.method} -> ${request.url}`\n    this.logger.debug(`+++ 请求：${content}`)\n    const now = Date.now()\n\n    return call$.pipe(\n      tap(() =>\n        this.logger.debug(`--- 响应：${content}${` +${Date.now() - now}ms`}`),\n      ),\n    )\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(CredentialsSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'nestjs-zod/z'\n\nexport const LoginTypeEnum = z.enum(['account', 'email', 'mobile'])\n\nexport const CredentialsSchema = z.object({\n  username: z.string().min(4).max(255),\n  password: z.password().min(6).atLeastOne('digit'),\n  type: LoginTypeEnum,\n})\n\nexport class LoginDto extends createZodDto(CredentialsSchema) {}\n\nexport class RegisterDto extends createZodDto(CredentialsSchema.extend({\n  // ...\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResult.html":{"url":"classes/LoginResult.html","title":"class - LoginResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ImageCaptcha {\n  id: string\n  image: string\n}\n\nexport class LoginResult {\n  authToken: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResult-1.html":{"url":"classes/LoginResult-1.html","title":"class - LoginResult-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/captcha/captcha.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/captcha/captcha.model.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginResult {\n  authToken: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailerModule.html":{"url":"modules/MailerModule.html","title":"module - MailerModule","body":"\n                   \n\n\n\n\n    Modules\n    MailerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailerModule\n\n\n\ncluster_MailerModule_providers\n\n\n\ncluster_MailerModule_exports\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\n\n\nMailerModule\n\nMailerModule\n\nAdminEventsGateway  -->\n\nMailerModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nMailerModule->WebEventsGateway \n\n\n\n\n\nMailerService\n\nMailerService\n\nMailerModule -->\n\nMailerService->MailerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/helper/mailer/mailer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { join } from 'node:path'\n\nimport { Module, Provider } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { MailerModule as NestMailerModule } from '@nestjs-modules/mailer'\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter'\n\nimport { IAppConfig, IMailerConfig } from '@server/config'\n\nimport { MailerService } from './mailer.service'\n\nconst providers: Provider[] = [\n  MailerService,\n]\n\n@Module({\n  imports: [\n    NestMailerModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        transport: configService.get('mailer'),\n        defaults: {\n          from: {\n            name: configService.get('app')!.name,\n            address: configService.get('mailer')!.auth.user,\n          },\n        },\n        template: {\n          dir: join(__dirname, '..', '..', '..', '/assets/templates'),\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers,\n  exports: providers,\n})\nexport class MailerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailerService.html":{"url":"injectables/MailerService.html","title":"injectable - MailerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/helper/mailer/mailer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkCode\n                            \n                            \n                                    Async\n                                checkLimit\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                send\n                            \n                            \n                                    Async\n                                sendVerificationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appConfig: IAppConfig, redis: Redis, mailerService: NestMailerService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/helper/mailer/mailer.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appConfig\n                                                  \n                                                        \n                                                                        IAppConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                        NestMailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkCode(to, code)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/helper/mailer/mailer.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkLimit\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkLimit(to, ip)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/helper/mailer/mailer.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                        \n                    log(to: string, code: string, ip: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/helper/mailer/mailer.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                        \n                    send(to, subject, content: string, type: \"text\" | \"html\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/helper/mailer/mailer.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                subject\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"text\" | \"html\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'text'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendVerificationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendVerificationCode(to, code)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/helper/mailer/mailer.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                to\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                code\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    randomValue(4, '1234567890')\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MailerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/shared/helper/mailer/mailer.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectRedis } from '@liaoliaots/nestjs-redis'\nimport { Inject, Injectable, Logger } from '@nestjs/common'\n\nimport { MailerService as NestMailerService } from '@nestjs-modules/mailer'\n\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { AppConfig, IAppConfig } from '@server/config'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { randomValue } from '@server/utils/tool.util'\nimport dayjs from 'dayjs'\nimport Redis from 'ioredis'\n\n@Injectable()\nexport class MailerService {\n  private readonly logger = new Logger(MailerService.name)\n  constructor(\n    @Inject(AppConfig.KEY) private appConfig: IAppConfig,\n    @InjectRedis() private redis: Redis,\n    private mailerService: NestMailerService,\n  ) {}\n\n  async log(to: string, code: string, ip: string) {\n    const getRemainTime = () => {\n      const now = dayjs()\n      return now.endOf('day').diff(now, 'second')\n    }\n\n    await this.redis.set(`captcha:${to}`, code, 'EX', 60 * 5)\n\n    const limitCountOfDay = await this.redis.get(`captcha:${to}:limit-day`) || 0\n\n    await this.redis.set(`ip:${ip}:send:limit`, 1, 'EX', 60)\n    await this.redis.set(`captcha:${to}:limit`, 1, 'EX', 60)\n    await this.redis.set(\n      `captcha:${to}:send:limit-count-day`,\n      limitCountOfDay,\n      'EX',\n      getRemainTime(),\n    )\n  }\n\n  async checkCode(to, code) {\n    const ret = await this.redis.get(`captcha:${to}`)\n    if (ret !== code)\n      throw new BizException(ErrorCodeEnum.VerificationCodeError)\n\n    await this.redis.del(`captcha:${to}`)\n  }\n\n  async checkLimit(to, ip) {\n    const LIMIT_TIME = 5\n\n    // 1分钟最多接收1条\n    const limit = await this.redis.get(`captcha:${to}:limit`)\n    if (limit)\n      throw new BizException(ErrorCodeEnum.RequestTooFast)\n\n    // 1天一个邮箱最多接收5条\n    const limitCountOfDay: string | number = Number(await this.redis.get(`captcha:${to}:limit-day`)) || 0\n    if (limitCountOfDay > LIMIT_TIME) {\n      throw new BizException(\n        ErrorCodeEnum.MaximumFiveVerificationCodesPerDay,\n      )\n    }\n  }\n\n  async send(\n    to,\n    subject,\n    content: string,\n    type: 'text' | 'html' = 'text',\n  ): Promise {\n    if (type === 'text') {\n      return this.mailerService.sendMail({\n        to,\n        subject,\n        text: content,\n      })\n    }\n    else {\n      return this.mailerService.sendMail({\n        to,\n        subject,\n        html: content,\n      })\n    }\n  }\n\n  async sendVerificationCode(to, code = randomValue(4, '1234567890')) {\n    const subject = `[${this.appConfig.name}] 验证码`\n\n    try {\n      await this.mailerService.sendMail({\n        to,\n        subject,\n        template: './verification-code-zh',\n        context: {\n          code,\n        },\n      })\n    }\n    catch (error) {\n      this.logger.error(error)\n      throw new BizException(ErrorCodeEnum.VerificationCodeSendFail)\n    }\n\n    return {\n      to,\n      code,\n    }\n  }\n\n  // async sendUserConfirmation(user: User, token: string) {\n  //   const url = `example.com/auth/confirm?token=${token}`\n  //   await this.mailerService.sendMail({\n  //     to: user.email,\n  //     subject: 'Confirm your Email',\n  //     template: './confirmation',\n  //     context: {\n  //       name: user.name,\n  //       url,\n  //     },\n  //   })\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MyLogger.html":{"url":"injectables/MyLogger.html","title":"injectable - MyLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MyLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                winstonLogger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                    Protected\n                                initWinston\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    level\n                                \n                                \n                                    maxFiles\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/logger/logger.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, stack?: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                stack\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        initWinston\n                        \n                    \n                \n            \n            \n                \n                        \n                    initWinston()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: any, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/logger/logger.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        winstonLogger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WinstonLogger\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/logger/logger.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        level\n                    \n                \n\n                \n                    \n                        getlevel()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/logger/logger.service.ts:31\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        maxFiles\n                    \n                \n\n                \n                    \n                        getmaxFiles()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/logger/logger.service.ts:35\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ConsoleLogger, ConsoleLoggerOptions, Injectable } from '@nestjs/common'\n\nimport { ConfigService } from '@nestjs/config'\nimport type { Logger as WinstonLogger } from 'winston'\n\nimport { config, createLogger, format, transports } from 'winston'\n\nimport 'winston-daily-rotate-file'\n\nexport enum LogLevel {\n  ERROR = 'error',\n  WARN = 'warn',\n  INFO = 'info',\n  DEBUG = 'debug',\n  VERBOSE = 'verbose',\n}\n\n@Injectable()\nexport class MyLogger extends ConsoleLogger {\n  private winstonLogger: WinstonLogger\n\n  constructor(\n    context: string,\n    options: ConsoleLoggerOptions,\n    private configService: ConfigService,\n  ) {\n    super(context, options)\n    this.initWinston()\n  }\n\n  protected get level(): LogLevel {\n    return this.configService.get('app.logger.level') as LogLevel\n  }\n\n  protected get maxFiles(): number {\n    return this.configService.get('app.logger.maxFiles') as number\n  }\n\n  protected initWinston(): void {\n    this.winstonLogger = createLogger({\n      levels: config.npm.levels,\n      format: format.combine(\n        format.errors({ stack: true }),\n        format.timestamp(),\n        format.json(),\n      ),\n      transports: [\n        new transports.DailyRotateFile({\n          level: this.level,\n          filename: 'logs/app.%DATE%.log',\n          datePattern: 'YYYY-MM-DD',\n          maxFiles: this.maxFiles,\n          format: format.combine(format.timestamp(), format.json()),\n          auditFile: 'logs/.audit/app.json',\n        }),\n        new transports.DailyRotateFile({\n          level: LogLevel.ERROR,\n          filename: 'logs/app-error.%DATE%.log',\n          datePattern: 'YYYY-MM-DD',\n          maxFiles: this.maxFiles,\n          format: format.combine(format.timestamp(), format.json()),\n          auditFile: 'logs/.audit/app-error.json',\n        }),\n      ],\n    })\n\n    // if (isDev) {\n    //   this.winstonLogger.add(\n    //     new transports.Console({\n    //       level: this.level,\n    //       format: format.combine(\n    //         format.simple(),\n    //         format.colorize({ all: true }),\n    //       ),\n    //     }),\n    //   );\n    // }\n  }\n\n  verbose(message: any, context?: string): void {\n    super.verbose.apply(this, [message, context])\n\n    this.winstonLogger.log(LogLevel.VERBOSE, message, { context })\n  }\n\n  debug(message: any, context?: string): void {\n    super.debug.apply(this, [message, context])\n\n    this.winstonLogger.log(LogLevel.DEBUG, message, { context })\n  }\n\n  log(message: any, context?: string): void {\n    super.log.apply(this, [message, context])\n\n    this.winstonLogger.log(LogLevel.INFO, message, { context })\n  }\n\n  warn(message: any, context?: string): void {\n    super.warn.apply(this, [message, context])\n\n    this.winstonLogger.log(LogLevel.WARN, message)\n  }\n\n  error(message: any, stack?: string, context?: string): void {\n    super.error.apply(this, [message, stack, context])\n\n    const hasStack = !!context\n    this.winstonLogger.log(LogLevel.ERROR, {\n      context: hasStack ? context : stack,\n      message: hasStack ? new Error(message) : message,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NoteAbility.html":{"url":"injectables/NoteAbility.html","title":"injectable - NoteAbility","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NoteAbility\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.ability.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: IAuthUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.ability.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AbilityBuilder } from '@casl/ability'\nimport { createPrismaAbility } from '@casl/prisma'\nimport { Injectable } from '@nestjs/common'\n\nimport { Role } from '@server/modules/auth/auth.constant'\n\nimport { Action, AppAbility, BaseAbility } from '../casl/ability.class'\nimport { DefineAbility } from '../casl/ability.decorator'\n\n@DefineAbility('Note')\n@Injectable()\nexport class NoteAbility implements BaseAbility {\n  createForUser(user: IAuthUser) {\n    const { can, build } = new AbilityBuilder(createPrismaAbility)\n\n    if (user.role === Role.Admin)\n      can(Action.Manage, 'Note')\n\n    can(Action.Create, 'Note')\n    can(Action.Read, 'Note', { isPublished: true })\n    can(Action.Update, 'Note', { userId: user.id })\n    can(Action.Delete, 'Note', { userId: user.id })\n\n    return build()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteCollectEvent.html":{"url":"classes/NoteCollectEvent.html","title":"class - NoteCollectEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteCollectEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/events/note-collect.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                note\n                            \n                            \n                                senderId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/modules/note/events/note-collect.event.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        note\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Note\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/note/events/note-collect.event.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/note/events/note-collect.event.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Note } from '@youni/database'\n\nexport class NoteCollectEvent {\n  note: Note\n  senderId: string\n\n  public constructor(partial?: Partial) {\n    Object.assign(this, partial)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NoteController.html":{"url":"controllers/NoteController.html","title":"controller - NoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notes\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                batchDelete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                list\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        batchDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    batchDelete(dto: BatchDeleteDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/note/note.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            BatchDeleteDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: NoteDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Policy({model: 'Note', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/note/note.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            NoteDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Policy({model: 'Note', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/note/note.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Policy({model: 'Note', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/note/note.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(dto: NotePagerDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Policy({model: 'Note', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/note/note.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            NotePagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: IdDto, dto: NoteUpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@Policy({model: 'Note', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/note/note.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            NoteUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Put, Query, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { BatchDeleteDto } from '@server/common/dto/delete.dto'\nimport { IdDto } from '@server/common/dto/id.dto'\n\nimport { AuthUser } from '../auth/decorators/auth-user.decorator'\nimport { Action } from '../casl/ability.class'\nimport { Policy } from '../casl/policy.decortor'\nimport { PolicyGuard } from '../casl/policy.guard'\n\nimport { NoteDto, NotePagerDto, NoteUpdateDto } from './note.dto'\nimport { NoteService } from './note.service'\n\n@ApiTags('Business - 笔记模块')\n@UseGuards(PolicyGuard)\n@Controller('notes')\nexport class NoteController {\n  constructor(private readonly todoService: NoteService) { }\n\n  @Get()\n  @Policy({ model: 'Note', action: Action.Read })\n  async list(@Query() dto: NotePagerDto, @AuthUser() user: IAuthUser) {\n    return this.todoService.paginate(dto, user.id)\n  }\n\n  @Get(':id')\n  @Policy({ model: 'Note', action: Action.Read })\n  async findOne(@Param() { id }: IdDto) {\n    return this.todoService.findOne(id)\n  }\n\n  @Post()\n  @Policy({ model: 'Note', action: Action.Create })\n  async create(@Body() dto: NoteDto, @AuthUser() user: IAuthUser) {\n    await this.todoService.create(dto, user.id)\n  }\n\n  @Put(':id')\n  @Policy({ model: 'Note', action: Action.Update })\n  async update(@Param() { id }: IdDto, @Body() dto: NoteUpdateDto) {\n    await this.todoService.update(id, dto)\n  }\n\n  @Delete(':id')\n  @Policy({ model: 'Note', action: Action.Delete })\n  async delete(@Param() { id }: IdDto) {\n    await this.todoService.delete(id)\n  }\n\n  @Delete()\n  async batchDelete(@Body() dto: BatchDeleteDto, @AuthUser() user: IAuthUser) {\n    const { ids } = dto\n    await this.todoService.batchDelete(ids, user.id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteDto.html":{"url":"classes/NoteDto.html","title":"class - NoteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(NoteInputSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SnowflakeIdSchema } from '@server/common/dto/id.dto'\nimport { ImageSchema } from '@server/common/dto/image.dto'\nimport { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { defaultSchemaOmit } from '@server/utils/zod.util'\nimport { NoteOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const NoteInputSchema = NoteOptionalDefaultsSchema\n  .extend({\n    title: z.string().min(1, { message: '标题不能为空' }),\n    images: ImageSchema.array().min(1, { message: '至少需要一张图片' }),\n    publishTime: z.coerce.date().optional().nullable(),\n    tags: z.string().array().default([]),\n  })\n  .omit(defaultSchemaOmit)\n\nexport class NoteDto extends createZodDto(NoteInputSchema) { }\n\nexport class NoteUpdateDto extends createZodDto(NoteInputSchema.partial()) { }\n\nexport class NotePagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\nexport class UserNotePagerDto extends createZodDto(basePagerSchema.extend({\n  userId: SnowflakeIdSchema,\n})) { }\n\nexport class NoteSearchDto extends createZodDto(basePagerSchema.extend({\n  keyword: z.string().min(1, { message: '关键字不能为空' }),\n  sortBy: z.string().optional(),\n  sortOrder: z.string()\n    .or(z.enum(['asc', 'desc']))\n    .optional(),\n})) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteLikeEvent.html":{"url":"classes/NoteLikeEvent.html","title":"class - NoteLikeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteLikeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/events/note-like.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                note\n                            \n                            \n                                senderId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/modules/note/events/note-like.event.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        note\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Note\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/note/events/note-like.event.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/note/events/note-like.event.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Note } from '@youni/database'\n\nexport class NoteLikeEvent {\n  note: Note\n  senderId: string\n\n  public constructor(partial?: Partial) {\n    Object.assign(this, partial)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NoteListener.html":{"url":"injectables/NoteListener.html","title":"injectable - NoteListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NoteListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.listener.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(countingService: CountingService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/note/note.listener.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        countingService\n                                                  \n                                                        \n                                                                        CountingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\nimport { CountingService } from '../interact/services/counting.service'\n\n@Injectable()\nexport class NoteListener {\n  constructor(\n    private readonly countingService: CountingService,\n  ) { }\n\n  // @OnEvent(NoteEvents.NoteLike)\n  // async handleNoteLikedEvent(event: NoteLikeEvent) {\n  //   const { note } = event\n\n  //   // await this.countingService.updateLikeCount(InteractType.Note, note.id)\n\n  //   const job = await this.countingQueue.add('', { note }, {\n\n  //   })\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NoteModule.html":{"url":"modules/NoteModule.html","title":"module - NoteModule","body":"\n                   \n\n\n\n\n    Modules\n    NoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NoteModule\n\n\n\ncluster_NoteModule_imports\n\n\n\ncluster_NoteModule_exports\n\n\n\ncluster_NoteModule_providers\n\n\n\n\nCollectionModule\n\nCollectionModule\n\n\n\nNoteModule\n\nNoteModule\n\nNoteModule -->\n\nCollectionModule->NoteModule\n\n\n\n\n\nInteractModule\n\nInteractModule\n\nNoteModule -->\n\nInteractModule->NoteModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nNoteModule -->\n\nUserModule->NoteModule\n\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\nAdminEventsGateway  -->\n\nNoteModule->AdminEventsGateway \n\n\n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\nWebEventsGateway  -->\n\nNoteModule->WebEventsGateway \n\n\n\n\n\nNoteAbility\n\nNoteAbility\n\nNoteModule -->\n\nNoteAbility->NoteModule\n\n\n\n\n\nNoteListener\n\nNoteListener\n\nNoteModule -->\n\nNoteListener->NoteModule\n\n\n\n\n\nNotePublicService\n\nNotePublicService\n\nNoteModule -->\n\nNotePublicService->NoteModule\n\n\n\n\n\nNoteService\n\nNoteService\n\nNoteModule -->\n\nNoteService->NoteModule\n\n\n\n\n\nNoteTrpcRouter\n\nNoteTrpcRouter\n\nNoteModule -->\n\nNoteTrpcRouter->NoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/note/note.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NoteAbility\n                        \n                        \n                            NoteListener\n                        \n                        \n                            NotePublicService\n                        \n                        \n                            NoteService\n                        \n                        \n                            NoteTrpcRouter\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CollectionModule\n                        \n                        \n                            InteractModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Provider, forwardRef } from '@nestjs/common'\n\nimport { CollectionModule } from '../collection/collection.module'\nimport { CommentModule } from '../comment/comment.module'\nimport { HistoryModule } from '../history/history.module'\n\nimport { InteractModule } from '../interact/interact.module'\n\nimport { UserModule } from '../user/user.module'\n\nimport { NoteAbility } from './note.ability'\nimport { NoteController } from './note.controller'\nimport { NoteListener } from './note.listener'\nimport { NotePublicService } from './note.public.service'\nimport { NoteService } from './note.service'\nimport { NoteTrpcRouter } from './note.trpc'\n\nconst providers: Provider[] = [\n  NoteService,\n  NotePublicService,\n  NoteTrpcRouter,\n  NoteAbility,\n  NoteListener,\n]\n\n@Module({\n  imports: [\n    forwardRef(() => HistoryModule),\n    forwardRef(() => CommentModule),\n    InteractModule,\n    CollectionModule,\n    UserModule,\n  ],\n  controllers: [NoteController],\n  providers,\n  exports: [...providers],\n})\nexport class NoteModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotePagerDto.html":{"url":"classes/NotePagerDto.html","title":"class - NotePagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotePagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(basePagerSchema.extend({\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SnowflakeIdSchema } from '@server/common/dto/id.dto'\nimport { ImageSchema } from '@server/common/dto/image.dto'\nimport { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { defaultSchemaOmit } from '@server/utils/zod.util'\nimport { NoteOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const NoteInputSchema = NoteOptionalDefaultsSchema\n  .extend({\n    title: z.string().min(1, { message: '标题不能为空' }),\n    images: ImageSchema.array().min(1, { message: '至少需要一张图片' }),\n    publishTime: z.coerce.date().optional().nullable(),\n    tags: z.string().array().default([]),\n  })\n  .omit(defaultSchemaOmit)\n\nexport class NoteDto extends createZodDto(NoteInputSchema) { }\n\nexport class NoteUpdateDto extends createZodDto(NoteInputSchema.partial()) { }\n\nexport class NotePagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\nexport class UserNotePagerDto extends createZodDto(basePagerSchema.extend({\n  userId: SnowflakeIdSchema,\n})) { }\n\nexport class NoteSearchDto extends createZodDto(basePagerSchema.extend({\n  keyword: z.string().min(1, { message: '关键字不能为空' }),\n  sortBy: z.string().optional(),\n  sortOrder: z.string()\n    .or(z.enum(['asc', 'desc']))\n    .optional(),\n})) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotePublicService.html":{"url":"injectables/NotePublicService.html","title":"injectable - NotePublicService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotePublicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.public.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                appendInteractInfo\n                            \n                            \n                                    Async\n                                dislikeNote\n                            \n                            \n                                    Async\n                                followFeed\n                            \n                            \n                                    Async\n                                getAllNoteIdsByUserId\n                            \n                            \n                                    Async\n                                getNoteById\n                            \n                            \n                                    Async\n                                getNotesByCollectionId\n                            \n                            \n                                    Async\n                                getNotesByIds\n                            \n                            \n                                    Async\n                                getNotesByUserId\n                            \n                            \n                                    Async\n                                getUserLikedNotes\n                            \n                            \n                                    Async\n                                homeFeed\n                            \n                            \n                                    Async\n                                likeNote\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(likeService: LikeService, collectionService: CollectionService, followService: FollowService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/modules/note/note.public.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        likeService\n                                                  \n                                                        \n                                                                        LikeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        collectionService\n                                                  \n                                                        \n                                                                        CollectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followService\n                                                  \n                                                        \n                                                                        FollowService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        appendInteractInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    appendInteractInfo(items: Note | Note[], userId: string, includeCollected: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:194\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                        Note | Note[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                includeCollected\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        dislikeNote\n                        \n                    \n                \n            \n            \n                \n                        \n                    dislikeNote(itemId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:179\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        followFeed\n                        \n                    \n                \n            \n            \n                \n                        \n                    followFeed(dto: NotePagerDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            NotePagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllNoteIdsByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllNoteIdsByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:263\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNoteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNoteById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNotesByCollectionId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotesByCollectionId(dto: UserNotePagerDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:227\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UserNotePagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNotesByIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotesByIds(ids: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNotesByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotesByUserId(dto: UserNotePagerDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:208\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UserNotePagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserLikedNotes\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserLikedNotes(dto: UserNotePagerDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:253\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UserNotePagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        homeFeed\n                        \n                    \n                \n            \n            \n                \n                        \n                    homeFeed(dto: NotePagerDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            NotePagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        likeNote\n                        \n                    \n                \n            \n            \n                \n                        \n                    likeNote(itemId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                itemId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                        \n                    search(dto: NoteSearchDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.public.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            NoteSearchDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExtendedPrismaClient\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectPrismaClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/note/note.public.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\nimport { EventEmitter2 } from '@nestjs/event-emitter'\nimport { PagerDto } from '@server/common/dto/pager.dto'\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { resourceNotFoundWrapper } from '@server/utils/prisma.util'\n\nimport { Note } from '@youni/database'\n\nimport dayjs from 'dayjs'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '../../shared/database/prisma.extension'\nimport { CollectionService } from '../collection/collection.service'\nimport { InteractType } from '../interact/interact.constant'\nimport { FollowService } from '../interact/services/follow.service'\nimport { LikeService } from '../interact/services/like.service'\n\nimport { NoteLikeEvent } from './events/note-like.event'\nimport { NoteEvents, NoteSelect } from './note.constant'\nimport { NotePagerDto, NoteSearchDto, UserNotePagerDto } from './note.dto'\n\n@Injectable()\nexport class NotePublicService {\n  @InjectPrismaClient()\n  private readonly prisma: ExtendedPrismaClient\n\n  constructor(\n    private readonly likeService: LikeService,\n    private readonly collectionService: CollectionService,\n    private readonly followService: FollowService,\n    private readonly eventEmitter: EventEmitter2,\n  ) { }\n\n  async homeFeed(dto: NotePagerDto, userId: string) {\n    const { cursor, limit } = dto\n\n    const [items, meta] = await this.prisma.note.paginate({\n      where: {\n        isPublished: true,\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            nickname: true,\n            avatar: true,\n          },\n        },\n      },\n      orderBy: {\n        publishTime: 'desc',\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    return {\n      items,\n      meta,\n    }\n  }\n\n  async followFeed(dto: NotePagerDto, userId: string) {\n    const { cursor, limit } = dto\n\n    // 获取当前用户所有关注\n    const followIds = await this.followService.getAllFollowingIds(userId)\n\n    // 近 3 天前动态\n    const threeDaysAgo = dayjs().subtract(7, 'day').toDate()\n\n    const [items, meta] = await this.prisma.note.paginate({\n      where: {\n        isPublished: true,\n        publishTime: {\n          gte: threeDaysAgo,\n        },\n        userId: { in: followIds },\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            nickname: true,\n            avatar: true,\n          },\n        },\n      },\n      orderBy: {\n        publishTime: 'desc',\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    return {\n      items,\n      meta,\n    }\n  }\n\n  async search(dto: NoteSearchDto, userId: string) {\n    const { keyword, cursor, limit, sortBy = 'createdAt', sortOrder = 'desc' } = dto\n\n    const [items, meta] = await this.prisma.note.paginate({\n      where: {\n        OR: [{\n          title: {\n            contains: keyword,\n          },\n        }],\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            nickname: true,\n            avatar: true,\n          },\n        },\n      },\n      orderBy: {\n        [sortBy]: sortOrder,\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    return {\n      items,\n      meta,\n    }\n  }\n\n  async getNoteById(id: string) {\n    return await this.prisma.note.findUniqueOrThrow({\n      where: {\n        id,\n        isPublished: true,\n      },\n      select: {\n        ...NoteSelect,\n      },\n    }).catch(resourceNotFoundWrapper(\n      new BizException(ErrorCodeEnum.NoteNotFound),\n    ))\n  }\n\n  async getNotesByIds(ids: string[]) {\n    return await this.prisma.note.findMany({\n      where: {\n        id: { in: ids },\n      },\n      select: {\n        ...NoteSelect,\n      },\n    })\n  }\n\n  async likeNote(itemId: string, userId: string) {\n    const note = await this.getNoteById(itemId)\n\n    const ok = await this.likeService.like(InteractType.Note, note.id, userId)\n\n    if (ok) {\n      this.eventEmitter.emit(NoteEvents.NoteLike, new NoteLikeEvent({\n        note: note as unknown as Note,\n        senderId: userId,\n      }))\n    }\n\n    return true\n  }\n\n  async dislikeNote(itemId: string, userId: string) {\n    const note = await this.getNoteById(itemId)\n\n    const ok = await this.likeService.dislike(InteractType.Note, note.id, userId)\n\n    if (ok) {\n      this.eventEmitter.emit(NoteEvents.NoteDislike, new NoteLikeEvent({\n        note: note as unknown as Note,\n        senderId: userId,\n      }))\n    }\n\n    return true\n  }\n\n  async appendInteractInfo(items: Note | Note[], userId: string, includeCollected: boolean = false) {\n    if (!Array.isArray(items))\n      items = [items]\n\n    const likedList = await Promise.all(items.map(item => this.likeService.getItemLiked(InteractType.Note, item.id, userId)))\n    const collectedList = includeCollected ? await Promise.all(items.map(item => this.collectionService.isItemInCollection(item.id, userId))) : []\n\n    items.forEach((item, index) => {\n      item.interact.liked = likedList[index]\n      if (includeCollected)\n        item.interact.collected = collectedList[index]\n    })\n  }\n\n  async getNotesByUserId(dto: UserNotePagerDto) {\n    const { cursor, limit, userId } = dto\n\n    const [items, meta] = await this.prisma.note.paginate({\n      where: {\n        userId,\n        isPublished: true,\n      },\n      select: {\n        ...NoteSelect,\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    return { items, meta }\n  }\n\n  async getNotesByCollectionId(dto: UserNotePagerDto) {\n    const { cursor, limit, userId } = dto\n\n    const defaultCollection = await this.collectionService.getDefaultCollection(userId)\n\n    const [items, meta] = await this.prisma.note.paginate({\n      where: {\n        collections: {\n          some: {\n            id: defaultCollection.id,\n            userId,\n          },\n        },\n        isPublished: true,\n      },\n      select: {\n        ...NoteSelect,\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    return { items, meta }\n  }\n\n  async getUserLikedNotes(dto: UserNotePagerDto) {\n    const { cursor, limit, userId } = dto\n\n    const { ids, meta } = await this.likeService.getUserLikedIds({ cursor, limit } as PagerDto, InteractType.Note, userId)\n\n    const items = await this.getNotesByIds(ids)\n\n    return { items, meta }\n  }\n\n  async getAllNoteIdsByUserId(userId: string) {\n    const items = await this.prisma.note.findMany({\n      where: {\n        userId,\n      },\n      select: {\n        id: true,\n      },\n    })\n\n    return items.map(item => item.id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteSearchDto.html":{"url":"classes/NoteSearchDto.html","title":"class - NoteSearchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteSearchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        createZodDto(basePagerSchema.extend({\n  keyword: z.string().min(1, { message: '关键字不能为空' }),\n  sortBy: z.string().optional(),\n  sortOrder: z.string()\n    .or(z.enum(['asc', 'desc']))\n    .optional(),\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SnowflakeIdSchema } from '@server/common/dto/id.dto'\nimport { ImageSchema } from '@server/common/dto/image.dto'\nimport { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { defaultSchemaOmit } from '@server/utils/zod.util'\nimport { NoteOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const NoteInputSchema = NoteOptionalDefaultsSchema\n  .extend({\n    title: z.string().min(1, { message: '标题不能为空' }),\n    images: ImageSchema.array().min(1, { message: '至少需要一张图片' }),\n    publishTime: z.coerce.date().optional().nullable(),\n    tags: z.string().array().default([]),\n  })\n  .omit(defaultSchemaOmit)\n\nexport class NoteDto extends createZodDto(NoteInputSchema) { }\n\nexport class NoteUpdateDto extends createZodDto(NoteInputSchema.partial()) { }\n\nexport class NotePagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\nexport class UserNotePagerDto extends createZodDto(basePagerSchema.extend({\n  userId: SnowflakeIdSchema,\n})) { }\n\nexport class NoteSearchDto extends createZodDto(basePagerSchema.extend({\n  keyword: z.string().min(1, { message: '关键字不能为空' }),\n  sortBy: z.string().optional(),\n  sortOrder: z.string()\n    .or(z.enum(['asc', 'desc']))\n    .optional(),\n})) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NoteService.html":{"url":"injectables/NoteService.html","title":"injectable - NoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                batchDelete\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        batchDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    batchDelete(ids: string[], userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: NoteDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            NoteDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(dto: NotePagerDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            NotePagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: NoteUpdateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            NoteUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExtendedPrismaClient\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectPrismaClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/note/note.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { snowflake } from '@server/shared/database/snowflake.util'\nimport { resourceNotFoundWrapper } from '@server/utils/prisma.util'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '../../shared/database/prisma.extension'\n\nimport { NoteDto, NotePagerDto, NoteUpdateDto } from './note.dto'\n\n@Injectable()\nexport class NoteService {\n  @InjectPrismaClient()\n  private prisma: ExtendedPrismaClient\n\n  async paginate(dto: NotePagerDto, userId: string) {\n    const { cursor, limit } = dto\n\n    const [items, meta] = await this.prisma.note.paginate({\n      where: {\n        userId,\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    return {\n      items,\n      meta,\n    }\n  }\n\n  async findOne(id: string) {\n    const note = await this.prisma.note.findUniqueOrThrow({\n      where: {\n        id,\n      },\n      include: {\n        tags: {\n          select: {\n            name: true,\n            type: true,\n          },\n        },\n        user: {\n          select: {\n            id: true,\n            nickname: true,\n            avatar: true,\n          },\n        },\n      },\n    }).catch(resourceNotFoundWrapper(\n      new BizException(ErrorCodeEnum.NoteNotFound),\n    ))\n\n    return note\n  }\n\n  async create(dto: NoteDto, userId: string) {\n    const { images, tags, ...data } = dto\n\n    // await this.prisma.noteTag.createMany({\n    //   data: tags.map(tag => ({\n    //     name: tag,\n    //     type: 'topic',\n    //   })),\n    //   skipDuplicates: true,\n    // })\n\n    return this.prisma.note.create({\n      data: {\n        ...data,\n        userId,\n        images,\n        cover: images![0],\n        publishTime: new Date(),\n        tags: {\n          connectOrCreate: tags.map(tag => ({\n            where: {\n              name: tag,\n            },\n            create: {\n              id: snowflake.nextId(),\n              name: tag,\n              type: 'topic',\n            },\n          })),\n        },\n      },\n    })\n  }\n\n  async update(id: string, dto: NoteUpdateDto) {\n    const { images, tags, ...data } = dto\n\n    return this.prisma.note.update({\n      where: { id },\n      data: {\n        ...data,\n        images,\n        cover: images![0],\n        publishTime: new Date(),\n        ...(tags && {\n          tags: {\n            connectOrCreate: tags.map(tag => ({\n              where: {\n                name: tag,\n              },\n              create: {\n                name: tag,\n                type: 'topic',\n              },\n            })),\n          },\n        }),\n      },\n    })\n  }\n\n  async delete(id: string) {\n    return this.prisma.note.delete({\n      where: {\n        id,\n      },\n    })\n  }\n\n  async batchDelete(ids: string[], userId: string) {\n    const items = await this.prisma.note.deleteMany({\n      where: {\n        id: { in: ids },\n        userId,\n      },\n    })\n\n    return items\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteTagDto.html":{"url":"classes/NoteTagDto.html","title":"class - NoteTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note-tag/note-tag.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(NoteTagInputSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { NoteTagOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const NoteTagInputSchema = NoteTagOptionalDefaultsSchema.pick({\n  name: true,\n  type: true,\n})\n\nexport class NoteTagDto extends createZodDto(NoteTagInputSchema) {}\n\nexport class NoteTagUpdateDto extends createZodDto(NoteTagInputSchema.partial()) {}\n\nexport class NoteTagPagerDto extends createZodDto(basePagerSchema.extend({\n  sortBy: z.enum(['createdAt', 'updateAt']).optional(),\n  // select: z.array(NoteTagSchema.keyof()).optional(),\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NoteTagModule.html":{"url":"modules/NoteTagModule.html","title":"module - NoteTagModule","body":"\n                   \n\n\n\n\n    Modules\n    NoteTagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NoteTagModule\n\n\n\ncluster_NoteTagModule_exports\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\n\n\nNoteTagModule\n\nNoteTagModule\n\nAdminEventsGateway  -->\n\nNoteTagModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nNoteTagModule->WebEventsGateway \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/note-tag/note-tag.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Provider } from '@nestjs/common'\n\nconst providers: Provider[] = [\n\n]\n\n@Module({\n  imports: [\n  ],\n  controllers: [],\n  providers,\n  exports: [...providers],\n})\nexport class NoteTagModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteTagPagerDto.html":{"url":"classes/NoteTagPagerDto.html","title":"class - NoteTagPagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteTagPagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note-tag/note-tag.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        createZodDto(basePagerSchema.extend({\n  sortBy: z.enum(['createdAt', 'updateAt']).optional(),\n  // select: z.array(NoteTagSchema.keyof()).optional(),\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { NoteTagOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const NoteTagInputSchema = NoteTagOptionalDefaultsSchema.pick({\n  name: true,\n  type: true,\n})\n\nexport class NoteTagDto extends createZodDto(NoteTagInputSchema) {}\n\nexport class NoteTagUpdateDto extends createZodDto(NoteTagInputSchema.partial()) {}\n\nexport class NoteTagPagerDto extends createZodDto(basePagerSchema.extend({\n  sortBy: z.enum(['createdAt', 'updateAt']).optional(),\n  // select: z.array(NoteTagSchema.keyof()).optional(),\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NoteTagService.html":{"url":"injectables/NoteTagService.html","title":"injectable - NoteTagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NoteTagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note-tag/note-tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: NoteTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note-tag/note-tag.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            NoteTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note-tag/note-tag.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note-tag/note-tag.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(undefined: NoteTagPagerDto, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note-tag/note-tag.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            NoteTagPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExtendedPrismaClient\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectPrismaClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/note-tag/note-tag.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '@server/shared/database/prisma.extension'\n\nimport { NoteTagDto, NoteTagPagerDto } from './note-tag.dto'\n\n@Injectable()\nexport class NoteTagService {\n  @InjectPrismaClient()\n  private prisma: ExtendedPrismaClient\n\n  async paginate({\n    page,\n    limit,\n  }: NoteTagPagerDto, userId?: string) {\n    const [items, meta] = await this.prisma.noteTag.paginate({\n      where: {\n      },\n    }).withPages({ page, limit, includePageCount: true })\n\n    return {\n      items,\n      meta,\n    }\n  }\n\n  async findOne(id: string) {\n    return this.prisma.noteTag.findUniqueOrThrow({\n      where: {\n        id,\n      },\n    })\n  }\n\n  async create(dto: NoteTagDto) {\n    const { ...data } = dto\n    return this.prisma.noteTag.create({\n      data: {\n        ...data,\n      },\n    })\n  }\n\n  async delete(id: string) {\n    return this.prisma.noteTag.delete({\n      where: {\n        id,\n      },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NoteTagTrpcRouter.html":{"url":"injectables/NoteTagTrpcRouter.html","title":"injectable - NoteTagTrpcRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NoteTagTrpcRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note-tag/note-tag.trpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createRouter\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(trpcService: TRPCService, noteTagService: NoteTagService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/note-tag/note-tag.trpc.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trpcService\n                                                  \n                                                        \n                                                                        TRPCService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        noteTagService\n                                                  \n                                                        \n                                                                        NoteTagService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createRouter\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRouter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note-tag/note-tag.trpc.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note-tag/note-tag.trpc.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/note-tag/note-tag.trpc.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common'\n\nimport { IdDto } from '@server/common/dto/id.dto'\nimport { TRPCRouter } from '@server/shared/trpc/trpc.decorator'\nimport { defineTrpcRouter } from '@server/shared/trpc/trpc.helper'\nimport { TRPCService } from '@server/shared/trpc/trpc.service'\nimport { z } from 'zod'\n\nimport { Action } from '../casl/ability.class'\n\nimport { NoteTagInputSchema, NoteTagPagerDto } from './note-tag.dto'\nimport { NoteTagService } from './note-tag.service'\n\n@TRPCRouter()\n@Injectable()\nexport class NoteTagTrpcRouter implements OnModuleInit {\n  private router: ReturnType\n\n  constructor(\n    private readonly trpcService: TRPCService,\n    private readonly noteTagService: NoteTagService,\n  ) { }\n\n  onModuleInit() {\n    this.router = this.createRouter()\n  }\n\n  private createRouter() {\n    const procedureAuth = this.trpcService.procedureAuth\n    return defineTrpcRouter('noteTag', {\n      list: procedureAuth\n        .input(NoteTagPagerDto.schema)\n        .meta({ model: 'NoteTag', action: Action.Read })\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          return this.noteTagService.paginate(input, user.id)\n        }),\n      byId: procedureAuth\n        .input(IdDto.schema)\n        .meta({ model: 'NoteTag', action: Action.Read })\n        .query(async (opt) => {\n          const { input } = opt\n          const { id } = input\n\n          return this.noteTagService.findOne(id)\n        }),\n      create: procedureAuth\n        .input(NoteTagInputSchema)\n        .meta({ model: 'NoteTag', action: Action.Create })\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          return this.noteTagService.create(input, user.id)\n        }),\n      delete: procedureAuth\n        .input(IdDto.schema)\n        .meta({ model: 'NoteTag', action: Action.Delete })\n        .mutation(async (opt) => {\n          const { input } = opt\n          const { id } = input\n\n          return this.noteTagService.delete(id)\n        }),\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteTagUpdateDto.html":{"url":"classes/NoteTagUpdateDto.html","title":"class - NoteTagUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteTagUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note-tag/note-tag.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(NoteTagInputSchema.partial())\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { NoteTagOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const NoteTagInputSchema = NoteTagOptionalDefaultsSchema.pick({\n  name: true,\n  type: true,\n})\n\nexport class NoteTagDto extends createZodDto(NoteTagInputSchema) {}\n\nexport class NoteTagUpdateDto extends createZodDto(NoteTagInputSchema.partial()) {}\n\nexport class NoteTagPagerDto extends createZodDto(basePagerSchema.extend({\n  sortBy: z.enum(['createdAt', 'updateAt']).optional(),\n  // select: z.array(NoteTagSchema.keyof()).optional(),\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NoteTrpcRouter.html":{"url":"injectables/NoteTrpcRouter.html","title":"injectable - NoteTrpcRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NoteTrpcRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.trpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createRouter\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(trpcService: TRPCService, noteService: NoteService, notePublicService: NotePublicService, historyService: HistoryService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/note/note.trpc.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trpcService\n                                                  \n                                                        \n                                                                        TRPCService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        noteService\n                                                  \n                                                        \n                                                                        NoteService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notePublicService\n                                                  \n                                                        \n                                                                        NotePublicService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        historyService\n                                                  \n                                                        \n                                                                        HistoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createRouter\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRouter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.trpc.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/note/note.trpc.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/note/note.trpc.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common'\n\nimport { BatchDeleteDto } from '@server/common/dto/delete.dto'\nimport { IdDto } from '@server/common/dto/id.dto'\nimport { TRPCRouter } from '@server/shared/trpc/trpc.decorator'\nimport { defineTrpcRouter } from '@server/shared/trpc/trpc.helper'\nimport { TRPCService } from '@server/shared/trpc/trpc.service'\nimport { scheduleManager } from '@server/utils/schedule.util'\nimport { Note } from '@youni/database'\nimport { z } from 'zod'\n\nimport { Action } from '../casl/ability.class'\n\nimport { HistoryService } from '../history/history.service'\n\nimport { NoteDto, NoteInputSchema, NotePagerDto, NoteSearchDto, UserNotePagerDto } from './note.dto'\nimport { NotePublicService } from './note.public.service'\nimport { NoteService } from './note.service'\n\n@TRPCRouter()\n@Injectable()\nexport class NoteTrpcRouter implements OnModuleInit {\n  private router: ReturnType\n\n  constructor(\n    private readonly trpcService: TRPCService,\n    private readonly noteService: NoteService,\n    private readonly notePublicService: NotePublicService,\n    private readonly historyService: HistoryService,\n  ) { }\n\n  onModuleInit() {\n    this.router = this.createRouter()\n  }\n\n  private createRouter() {\n    const procedureAuth = this.trpcService.procedureAuth\n    return defineTrpcRouter('note', {\n      homeFeed: procedureAuth\n        .input(NotePagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          const { items, meta } = await this.notePublicService.homeFeed(input, user.id)\n\n          await this.notePublicService.appendInteractInfo(items as unknown as Note[], user.id)\n\n          return {\n            items,\n            meta,\n          }\n        }),\n      followFeed: procedureAuth\n        .input(NotePagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          const { items, meta } = await this.notePublicService.followFeed(input, user.id)\n\n          await this.notePublicService.appendInteractInfo(items as unknown as Note[], user.id, true)\n\n          return {\n            items,\n            meta,\n          }\n        }),\n      byId: procedureAuth\n        .input(IdDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id } = input\n\n          const note = await this.notePublicService.getNoteById(id)\n\n          if (note) {\n            scheduleManager.schedule(async () => {\n              await this.historyService.create(note.id, user.id)\n            })\n          }\n\n          await this.notePublicService.appendInteractInfo(note as unknown as Note, user.id, true)\n\n          return note\n        }),\n      search: procedureAuth\n        .input(NoteSearchDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { keyword } = input\n\n          const { items, meta } = await this.notePublicService.search(input, user.id)\n\n          await this.notePublicService.appendInteractInfo(items as unknown as Note[], user.id)\n\n          return {\n            items,\n            meta,\n          }\n        }),\n      userNotes: procedureAuth\n        .input(UserNotePagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          const { items, meta } = await this.notePublicService.getNotesByUserId(input)\n\n          await this.notePublicService.appendInteractInfo(items as unknown as Note[], user.id)\n\n          return {\n            items,\n            meta,\n          }\n        }),\n      userCollectNotes: procedureAuth\n        .input(UserNotePagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          // TODO: setting 判断用户设置是否允许查看\n          const { items, meta } = await this.notePublicService.getNotesByCollectionId(input)\n\n          await this.notePublicService.appendInteractInfo(items as unknown as Note[], user.id)\n\n          return {\n            items,\n            meta,\n          }\n        }),\n      userLikedNotes: procedureAuth\n        .input(UserNotePagerDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          // TODO: setting 判断用户设置是否允许查看\n          const { items, meta } = await this.notePublicService.getUserLikedNotes(input)\n\n          await this.notePublicService.appendInteractInfo(items as unknown as Note[], user.id)\n\n          return {\n            items,\n            meta,\n          }\n        }),\n      like: procedureAuth\n        .input(IdDto.schema)\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id } = input\n\n          return this.notePublicService.likeNote(id, user.id)\n        }),\n      dislike: procedureAuth\n        .input(IdDto.schema)\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id } = input\n\n          return this.notePublicService.dislikeNote(id, user.id)\n        }),\n      list: procedureAuth\n        .input(NotePagerDto.schema)\n        .meta({ model: 'Note', action: Action.Read })\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          return this.noteService.paginate(input, user.id)\n        }),\n      create: procedureAuth\n        .input(NoteDto.schema)\n        .meta({ model: 'Note', action: Action.Create })\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          return this.noteService.create(input, user.id)\n        }),\n      update: procedureAuth\n        .input(NoteInputSchema.extend({ id: z.string() }))\n        .meta({ model: 'Note', action: Action.Update })\n        .mutation(async (opt) => {\n          const { input } = opt\n          const { id, ...data } = input\n\n          return this.noteService.update(id, data)\n        }),\n      delete: procedureAuth\n        .input(IdDto.schema)\n        .meta({ model: 'Note', action: Action.Delete })\n        .mutation(async (opt) => {\n          const { input } = opt\n          const { id } = input\n\n          return this.noteService.delete(id)\n        }),\n      batchDelete: procedureAuth\n        .input(BatchDeleteDto.schema)\n        .meta({ model: 'Note', action: Action.Delete })\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { ids } = input\n\n          return this.noteService.batchDelete(ids, user.id)\n        }),\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteUpdateDto.html":{"url":"classes/NoteUpdateDto.html","title":"class - NoteUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(NoteInputSchema.partial())\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SnowflakeIdSchema } from '@server/common/dto/id.dto'\nimport { ImageSchema } from '@server/common/dto/image.dto'\nimport { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { defaultSchemaOmit } from '@server/utils/zod.util'\nimport { NoteOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const NoteInputSchema = NoteOptionalDefaultsSchema\n  .extend({\n    title: z.string().min(1, { message: '标题不能为空' }),\n    images: ImageSchema.array().min(1, { message: '至少需要一张图片' }),\n    publishTime: z.coerce.date().optional().nullable(),\n    tags: z.string().array().default([]),\n  })\n  .omit(defaultSchemaOmit)\n\nexport class NoteDto extends createZodDto(NoteInputSchema) { }\n\nexport class NoteUpdateDto extends createZodDto(NoteInputSchema.partial()) { }\n\nexport class NotePagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\nexport class UserNotePagerDto extends createZodDto(basePagerSchema.extend({\n  userId: SnowflakeIdSchema,\n})) { }\n\nexport class NoteSearchDto extends createZodDto(basePagerSchema.extend({\n  keyword: z.string().min(1, { message: '关键字不能为空' }),\n  sortBy: z.string().optional(),\n  sortOrder: z.string()\n    .or(z.enum(['asc', 'desc']))\n    .optional(),\n})) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotifactionTrpcRouter.html":{"url":"injectables/NotifactionTrpcRouter.html","title":"injectable - NotifactionTrpcRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotifactionTrpcRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.trpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createRouter\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(trpcService: TRPCService, notificationService: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/notification/notification.trpc.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trpcService\n                                                  \n                                                        \n                                                                        TRPCService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createRouter\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRouter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/notification/notification.trpc.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/notification/notification.trpc.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/notification.trpc.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common'\n\nimport { TRPCRouter } from '@server/shared/trpc/trpc.decorator'\nimport { defineTrpcRouter } from '@server/shared/trpc/trpc.helper'\nimport { TRPCService } from '@server/shared/trpc/trpc.service'\n\nimport { NotificationPagerSchema } from './notification.dto'\nimport { NotificationService } from './notification.service'\n\n@TRPCRouter()\n@Injectable()\nexport class NotifactionTrpcRouter implements OnModuleInit {\n  private router: ReturnType\n\n  constructor(\n    private readonly trpcService: TRPCService,\n    private readonly notificationService: NotificationService,\n  ) { }\n\n  onModuleInit() {\n    this.router = this.createRouter()\n  }\n\n  private createRouter() {\n    const procedureAuth = this.trpcService.procedureAuth\n    return defineTrpcRouter('notification', {\n      message: procedureAuth\n        .input(NotificationPagerSchema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          return await this.notificationService.paginate(input, user.id)\n        }),\n      count: procedureAuth.query(async (opt) => {\n        const { input, ctx: { user } } = opt\n\n        return await this.notificationService.count(user.id)\n      }),\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                count\n                            \n                            \n                                    \n                                    \n                                    Async\n                                list\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        count\n                        \n                    \n                \n            \n            \n                \n                        \n                    count(user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('count')@ApiOperation({summary: '获取通知数量'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/notification/notification.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(user: IAuthUser, dto: NotificationPagerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: '获取通知列表'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/notification/notification.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            NotificationPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Query,\n} from '@nestjs/common'\nimport { ApiOperation, ApiTags } from '@nestjs/swagger'\n\nimport { AuthUser } from '../auth/decorators/auth-user.decorator'\n\nimport { NotificationPagerDto } from './notification.dto'\nimport { NotificationService } from './notification.service'\n\n@ApiTags('Business - 通知模块')\n@Controller('notification')\nexport class NotificationController {\n  constructor(private readonly notificationService: NotificationService) { }\n\n  @Get()\n  @ApiOperation({ summary: '获取通知列表' })\n  async list(@AuthUser() user: IAuthUser, @Query() dto: NotificationPagerDto) {\n    return this.notificationService.paginate(dto, user.id)\n  }\n\n  @Get('count')\n  @ApiOperation({ summary: '获取通知数量' })\n  async count(@AuthUser() user: IAuthUser) {\n    return await this.notificationService.count(user.id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationListener.html":{"url":"injectables/NotificationListener.html","title":"injectable - NotificationListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handleCommentCreateEvent\n                            \n                            \n                                    \n                                    Async\n                                handleCommentLikeEvent\n                            \n                            \n                                    \n                                    Async\n                                handleNoteLikeEvent\n                            \n                            \n                                    \n                                    Async\n                                handleUserFollowEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationService: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/notification/notification.listener.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleCommentCreateEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCommentCreateEvent(event: CommentCreateEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(CommentEvents.CommentCreate)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/notification/notification.listener.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CommentCreateEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleCommentLikeEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCommentLikeEvent(event: NoteLikeEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(CommentEvents.CommentLike)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/notification/notification.listener.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            NoteLikeEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleNoteLikeEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNoteLikeEvent(event: NoteLikeEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(NoteEvents.NoteLike)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/notification/notification.listener.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            NoteLikeEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleUserFollowEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUserFollowEvent(event: UserFollowEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent(InteractEvents.UserFollow)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/notification/notification.listener.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            UserFollowEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { OnEvent } from '@nestjs/event-emitter'\n\nimport { NotificationAction, NotificationSourceType } from '@youni/database'\n\nimport { CommentEvents } from '../comment/comment.constant'\nimport { CommentCreateEvent } from '../comment/events/comment-create.event'\nimport { UserFollowEvent } from '../interact/events/user-follow.event'\nimport { InteractEvents } from '../interact/interact.constant'\nimport { NoteLikeEvent } from '../note/events/note-like.event'\nimport { NoteEvents } from '../note/note.constant'\n\nimport { NotificationService } from './notification.service'\n\n@Injectable()\nexport class NotificationListener {\n  constructor(\n    private readonly notificationService: NotificationService,\n  ) { }\n\n  @OnEvent(NoteEvents.NoteLike)\n  async handleNoteLikeEvent(event: NoteLikeEvent) {\n    const { note, senderId } = event\n\n    // 喜欢了你的笔记\n    await this.notificationService.create({\n      action: NotificationAction.Like,\n      content: '',\n      sourceId: note.id,\n      sourceType: NotificationSourceType.Note,\n      source: {\n        title: note.title,\n        image: note.cover,\n      },\n      senderId,\n      recipientId: note.userId,\n    })\n  }\n\n  // @OnEvent(NoteEvents.NoteCollect)\n  // async handleNoteCollectEvent(event: NoteCollectEvent) {\n  //   const { note, senderId } = event\n\n  //   // 收藏了你的评论\n  //   await this.notificationService.create({\n  //     action: NotificationAction.Collect,\n  //     content: '',\n  //     sourceId: note.id,\n  //     sourceType: NotificationSourceType.Note,\n  //     senderId,\n  //     recipientId: note.userId,\n  //   })\n  // }\n\n  @OnEvent(CommentEvents.CommentLike)\n  async handleCommentLikeEvent(event: NoteLikeEvent) {\n    const { note, senderId } = event\n\n    // 喜欢了你的评论\n    await this.notificationService.create({\n      action: NotificationAction.Like,\n      content: '',\n      sourceId: note.id,\n      sourceType: NotificationSourceType.Note,\n      source: {\n        id: note.id,\n        type: NotificationSourceType.Note,\n      },\n      senderId,\n      recipientId: note.userId,\n    })\n  }\n\n  @OnEvent(CommentEvents.CommentCreate)\n  async handleCommentCreateEvent(event: CommentCreateEvent) {\n    const { source, comment, recipientId, senderId } = event\n\n    // 评论了评论\n    if (comment.parentId) {\n      await this.notificationService.create({\n        action: NotificationAction.Comment,\n        content: comment.content,\n        sourceId: comment.id,\n        sourceType: NotificationSourceType.Comment,\n        source: {\n          title: source.title,\n          image: source.cover,\n        },\n        senderId,\n        recipientId,\n      })\n      return\n    }\n\n    // 评论了笔记\n    await this.notificationService.create({\n      action: NotificationAction.Comment,\n      content: comment.content,\n      sourceId: source.id,\n      sourceType: NotificationSourceType.Note,\n      source: {\n        title: source.title,\n        image: source.cover,\n      },\n      senderId,\n      recipientId,\n    })\n  }\n\n  @OnEvent(InteractEvents.UserFollow)\n  async handleUserFollowEvent(event: UserFollowEvent) {\n    const { targetId, userId } = event\n\n    // xx 关注了你\n    await this.notificationService.create({\n      action: NotificationAction.Follow,\n      content: '',\n      sourceId: targetId,\n      sourceType: NotificationSourceType.User,\n      source: {},\n      senderId: userId,\n      recipientId: targetId,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationModule.html":{"url":"modules/NotificationModule.html","title":"module - NotificationModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_imports\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nNotificationModule\n\nNotificationModule\n\nNotificationModule -->\n\nUserModule->NotificationModule\n\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\nAdminEventsGateway  -->\n\nNotificationModule->AdminEventsGateway \n\n\n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\nWebEventsGateway  -->\n\nNotificationModule->WebEventsGateway \n\n\n\n\n\nNotifactionTrpcRouter\n\nNotifactionTrpcRouter\n\nNotificationModule -->\n\nNotifactionTrpcRouter->NotificationModule\n\n\n\n\n\nNotificationListener\n\nNotificationListener\n\nNotificationModule -->\n\nNotificationListener->NotificationModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/notification/notification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotifactionTrpcRouter\n                        \n                        \n                            NotificationListener\n                        \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Provider } from '@nestjs/common'\n\nimport { UserModule } from '../user/user.module'\n\nimport { NotificationController } from './notification.controller'\nimport { NotificationListener } from './notification.listener'\nimport { NotificationService } from './notification.service'\nimport { NotifactionTrpcRouter } from './notification.trpc'\n\nconst providers: Provider[] = [\n  NotificationService,\n  NotifactionTrpcRouter,\n  NotificationListener,\n]\n\n@Module({\n  imports: [\n    UserModule,\n  ],\n  controllers: [NotificationController],\n  providers,\n  exports: [...providers],\n})\nexport class NotificationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationPagerDto.html":{"url":"classes/NotificationPagerDto.html","title":"class - NotificationPagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationPagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(NotificationPagerSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { NotificationAction } from '@youni/database'\nimport { NotificationSchema } from '@youni/database/zod'\n\nimport { createZodDto } from 'nestjs-zod'\n\nimport { z } from 'zod'\n\nexport const NotificationInputSchema = NotificationSchema.pick({\n  action: true,\n  content: true,\n  sourceId: true,\n  sourceType: true,\n  source: true,\n  senderId: true,\n  recipientId: true,\n}).extend({\n  content: z.string().optional().default(''),\n})\n\nexport class CreateNotificationDto extends createZodDto(NotificationInputSchema) {\n\n}\n\nexport const NotificationPagerSchema = basePagerSchema.extend({\n  action: z.nativeEnum(NotificationAction),\n})\n\nexport class NotificationPagerDto extends createZodDto(NotificationPagerSchema) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                paginate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        count\n                        \n                    \n                \n            \n            \n                \n                        \n                    count(recipientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/notification/notification.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recipientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/notification/notification.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(dto: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/notification/notification.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(dto: NotificationPagerDto, recipientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/notification/notification.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            NotificationPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                recipientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExtendedPrismaClient\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectPrismaClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/notification.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '@server/shared/database/prisma.extension'\n\nimport { NotificationAction, NotificationSourceType } from '@youni/database'\n\nimport { UserSelect } from '../user/user.constant'\n\nimport { CreateNotificationDto, NotificationPagerDto } from './notification.dto'\n\n@Injectable()\nexport class NotificationService {\n  @InjectPrismaClient()\n  private readonly prisma: ExtendedPrismaClient\n\n  async paginate(dto: NotificationPagerDto, recipientId: string) {\n    const { cursor, limit, action } = dto\n\n    const [items, meta] = await this.prisma.notification.paginate({\n      where: {\n        action,\n        recipientId,\n      },\n      select: {\n        id: true,\n        action: true,\n        content: true,\n        sourceId: true,\n        sourceType: true,\n        source: true,\n        status: true,\n        createdAt: true,\n        sender: {\n          select: UserSelect,\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    }).withCursor({\n      limit,\n      after: cursor,\n    })\n\n    await this.prisma.notification.updateMany({\n      where: {\n        id: { in: items.filter(item => item.status === 0).map(item => item.id) },\n      },\n      data: {\n        status: 1,\n      },\n    })\n\n    return {\n      items,\n      meta,\n    }\n  }\n\n  async create(dto: CreateNotificationDto) {\n    const { content, action, sourceId, sourceType, source, senderId, recipientId } = dto\n\n    if (senderId === recipientId)\n      return\n\n    // TODO: use unique key to find\n    const exists = await this.prisma.notification.findFirst({\n      where: {\n        content,\n        action,\n        sourceId,\n        sourceType,\n        senderId,\n        recipientId,\n      },\n    })\n\n    if (exists)\n      return exists\n\n    return await this.prisma.notification.create({\n      data: {\n        content,\n        action,\n        sourceId,\n        sourceType,\n        source,\n        senderId,\n        recipientId,\n      },\n\n    })\n  }\n\n  async delete(dto: { sourceId: string, sourceType: NotificationSourceType, action: NotificationAction, senderId: string, recipientId: string }) {\n    const { sourceId, sourceType, action, senderId, recipientId } = dto\n\n    const notification = await this.prisma.notification.findFirst({\n      where: {\n        sourceId,\n        sourceType,\n        action,\n        senderId,\n        recipientId,\n      },\n    })\n\n    if (!notification)\n      return\n\n    return await this.prisma.notification.delete({\n      where: {\n        id: notification.id,\n      },\n    })\n  }\n\n  async count(recipientId: string) {\n    const actions: NotificationAction[] = ['Like', 'Follow', 'Comment']\n\n    let total = 0\n    const results = await Promise.all(\n      actions.map(async (action) => {\n        const result = await this.prisma.notification.aggregate({\n          where: {\n            recipientId,\n            action,\n            status: 0,\n          },\n          _count: true,\n        })\n        total += result._count\n        return { action, _count: result._count }\n      }),\n    )\n\n    const count = results.reduce((obj, item) => {\n      const key = item.action.toLocaleLowerCase()\n      obj[key] = item._count\n      return obj\n    }, {}) as { like: number, follow: number, comment: number }\n\n    return {\n      count,\n      total,\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PagerDto.html":{"url":"classes/PagerDto.html","title":"class - PagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/pager.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(basePagerSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nimport { SnowflakeIdSchema } from './id.dto'\n\nexport const DEFAULT_LIMIT = 10\n\nexport const basePagerSchema = z.object({\n  limit: z.coerce.number().int().min(1).max(50).optional().default(DEFAULT_LIMIT),\n  page: z.coerce.number().int().min(1).optional().default(1),\n  sortBy: z.string().optional(),\n  sortOrder: z.string()\n    .or(z.enum(['asc', 'desc']))\n    .optional(),\n\n  cursor: SnowflakeIdSchema\n    .or(z.null())\n    .or(z.boolean())\n    .transform(val => val === null || val === false || val === true ? '' : val)\n    .optional(),\n})\n\nexport class PagerDto extends createZodDto(basePagerSchema) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pipes/parse-int.pipe.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n} from '@nestjs/common'\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  transform(value: string, metadata: ArgumentMetadata): number {\n    const val = Number.parseInt(value, 10)\n\n    if (Number.isNaN(val))\n      throw new BadRequestException('id validation failed')\n\n    return val\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordUpdateDto.html":{"url":"classes/PasswordUpdateDto.html","title":"class - PasswordUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/password.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(z.object({\n  oldPassword: strongPasswordSchema,\n  newPassword: strongPasswordSchema,\n}).refine(data => data.oldPassword !== data.newPassword, {\n  message: '新密码不能与旧密码相同',\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const strongPasswordSchema = z.string().refine((value) => {\n  const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d\\W_]{6,}$/\n  return strongPasswordRegex.test(value)\n}, { message: '密码必须包含大小写字母和数字，且长度不能小于6位' })\n\nexport class PasswordUpdateDto extends createZodDto(z.object({\n  oldPassword: strongPasswordSchema,\n  newPassword: strongPasswordSchema,\n}).refine(data => data.oldPassword !== data.newPassword, {\n  message: '新密码不能与旧密码相同',\n})) {}\n\nexport class UserPasswordDto extends createZodDto(z.object({\n  id: z.string(),\n  password: strongPasswordSchema,\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PolicyGuard.html":{"url":"guards/PolicyGuard.html","title":"guard - PolicyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PolicyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/casl/policy.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, abilityService: AbilityService, prisma: ExtendedPrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/modules/casl/policy.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        abilityService\n                                                  \n                                                        \n                                                                        AbilityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        ExtendedPrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/casl/policy.guard.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { subject } from '@casl/ability'\nimport { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common'\nimport { Reflector } from '@nestjs/core'\nimport { getRequestItemId } from '@server/helper/get-request-item-id.helper'\nimport { ExtendedPrismaClient, InjectPrismaClient } from '@server/shared/database/prisma.extension'\n\nimport { FastifyRequest } from 'fastify'\n\nimport { AbilityService } from './casl.service'\nimport { CHECK_POLICY_KEY, PolicyObject } from './policy.decortor'\n\n@Injectable()\nexport class PolicyGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private abilityService: AbilityService,\n    @InjectPrismaClient()\n    private readonly prisma: ExtendedPrismaClient,\n  ) { }\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest()\n\n    const { user } = context.switchToHttp().getRequest()\n\n    if (!user)\n      throw new UnauthorizedException()\n\n    const policy = this.reflector.getAllAndOverride(CHECK_POLICY_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ])\n\n    // 使用了 PolicyGuard 但没未其定义 policy 则不允许通过\n    if (!policy)\n      return false\n\n    const { action, model } = policy\n\n    const ability = this.abilityService.abilityMap[model].createForUser(user)\n\n    // 获取请求资源的的 id\n    const id = getRequestItemId(request)\n\n    // 如果 id 存在，则检查具体资源\n    if (id) {\n      const item = await this.prisma[model].findUniqueOrThrow({\n        where: { id },\n      })\n\n      return ability.can(action, subject(model, item))\n    }\n\n    return ability.can(action, model)\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaClientExceptionFilter.html":{"url":"classes/PrismaClientExceptionFilter.html","title":"class - PrismaClientExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaClientExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/prisma-client-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                PrismaClientExceptionFilter catches Prisma.PrismaClientKnownRequestError exceptions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                errorCodesStatusMapping\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                catchClientKnownRequestError\n                            \n                            \n                                    Private\n                                exceptionShortMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(applicationRef?: HttpServer, errorCodesStatusMapping: ErrorCodesStatusMapping | null)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/prisma-client-exception.filter.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        applicationRef\n                                                  \n                                                        \n                                                                    HttpServer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        errorCodesStatusMapping\n                                                  \n                                                        \n                                                                        ErrorCodesStatusMapping | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorCodesStatusMapping\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorCodesStatusMapping\n\n                    \n                \n                \n                    \n                        Default value : {\n    P2000: HttpStatus.BAD_REQUEST,\n    P2002: HttpStatus.CONFLICT,\n    P2025: HttpStatus.NOT_FOUND,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/prisma-client-exception.filter.ts:30\n                        \n                    \n\n            \n                \n                    default error codes mapping\nError codes definition for Prisma Client (Query Engine)\nSee https://www.prisma.io/docs/reference/api-reference/error-reference#prisma-client-query-engine\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/prisma-client-exception.filter.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Prisma.PrismaClientKnownRequestError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        catchClientKnownRequestError\n                        \n                    \n                \n            \n            \n                \n                        \n                    catchClientKnownRequestError(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/prisma-client-exception.filter.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        Prisma.PrismaClientKnownRequestError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        exceptionShortMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    exceptionShortMessage(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/prisma-client-exception.filter.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ContextType,\n  HttpException,\n  HttpServer,\n  HttpStatus,\n} from '@nestjs/common'\nimport { APP_FILTER, BaseExceptionFilter, HttpAdapterHost } from '@nestjs/core'\nimport { Prisma } from '@youni/database'\n\nexport declare type GqlContextType = 'graphql' | ContextType\n\nexport interface ErrorCodesStatusMapping {\n  [key: string]: number\n}\n\n/**\n * {@link PrismaClientExceptionFilter} catches {@link Prisma.PrismaClientKnownRequestError} exceptions.\n */\n@Catch(Prisma?.PrismaClientKnownRequestError)\nexport class PrismaClientExceptionFilter extends BaseExceptionFilter {\n  /**\n   * default error codes mapping\n   *\n   * Error codes definition for Prisma Client (Query Engine)\n   * @see https://www.prisma.io/docs/reference/api-reference/error-reference#prisma-client-query-engine\n   */\n  private errorCodesStatusMapping: ErrorCodesStatusMapping = {\n    P2000: HttpStatus.BAD_REQUEST,\n    P2002: HttpStatus.CONFLICT,\n    P2025: HttpStatus.NOT_FOUND,\n  }\n\n  /**\n   * @param applicationRef\n   * @param errorCodesStatusMapping\n   */\n  constructor(\n    applicationRef?: HttpServer,\n    errorCodesStatusMapping: ErrorCodesStatusMapping | null = null,\n  ) {\n    super(applicationRef)\n\n    // use custom error codes mapping (overwrite)\n    //\n    // @example:\n    //\n    //   const { httpAdapter } = app.get(HttpAdapterHost);\n    //   app.useGlobalFilters(new PrismaClientExceptionFilter(httpAdapter, {\n    //     P2022: HttpStatus.BAD_REQUEST,\n    //   }));\n    //\n    if (errorCodesStatusMapping) {\n      this.errorCodesStatusMapping = Object.assign(\n        this.errorCodesStatusMapping,\n        errorCodesStatusMapping,\n      )\n    }\n  }\n\n  /**\n   * @param exception\n   * @param host\n   * @returns\n   */\n  catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n    return this.catchClientKnownRequestError(exception, host)\n  }\n\n  private catchClientKnownRequestError(\n    exception: Prisma.PrismaClientKnownRequestError,\n    host: ArgumentsHost,\n  ) {\n    const statusCode = this.errorCodesStatusMapping[exception.code]\n    const message = `[${exception.code}]: ${this.exceptionShortMessage(\n      exception.message,\n    )}`\n\n    if (host.getType() === 'http') {\n      if (!Object.keys(this.errorCodesStatusMapping).includes(exception.code))\n        return super.catch(exception, host)\n\n      return super.catch(\n        new HttpException({ statusCode, message }, statusCode),\n        host,\n      )\n    }\n    else if (host.getType() === 'graphql') {\n      // for graphql requests\n      if (!Object.keys(this.errorCodesStatusMapping).includes(exception.code))\n        return exception\n\n      return new HttpException({ statusCode, message }, statusCode)\n    }\n  }\n\n  private exceptionShortMessage(message: string): string {\n    const shortMessage = message.substring(message.indexOf('→'))\n    return shortMessage\n      .substring(shortMessage.indexOf('\\n'))\n      .replace(/\\n/g, '')\n      .trim()\n  }\n}\n\nexport function providePrismaClientExceptionFilter(\n  errorCodesStatusMapping?: ErrorCodesStatusMapping,\n) {\n  return {\n    provide: APP_FILTER,\n    useFactory: ({ httpAdapter }: HttpAdapterHost) => {\n      return new PrismaClientExceptionFilter(\n        httpAdapter,\n        errorCodesStatusMapping,\n      )\n    },\n    inject: [HttpAdapterHost],\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RedisIoAdapter.html":{"url":"classes/RedisIoAdapter.html","title":"class - RedisIoAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RedisIoAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/adapters/socket.adapter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IoAdapter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createIOServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(app: INestApplication)\n                    \n                \n                        \n                            \n                                Defined in src/common/adapters/socket.adapter.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        app\n                                                  \n                                                        \n                                                                    INestApplication\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createIOServer\n                        \n                    \n                \n            \n            \n                \ncreateIOServer(port: number, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/adapters/socket.adapter.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                port\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { INestApplication } from '@nestjs/common'\nimport { IoAdapter } from '@nestjs/platform-socket.io'\nimport { REDIS_PUBSUB } from '@server/shared/redis/redis.constant'\nimport { createAdapter } from '@socket.io/redis-adapter'\n\nexport const RedisIoAdapterKey = 'm-shop-socket'\n\nexport class RedisIoAdapter extends IoAdapter {\n  constructor(private readonly app: INestApplication) {\n    super(app)\n  }\n\n  createIOServer(port: number, options?: any) {\n    const server = super.createIOServer(port, options)\n\n    const { pubClient, subClient } = this.app.get(REDIS_PUBSUB)\n\n    const redisAdapter = createAdapter(pubClient, subClient, {\n      key: RedisIoAdapterKey,\n      requestsTimeout: 10000,\n    })\n    server.adapter(redisAdapter)\n    return server\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_RedisModule_exports\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\n\n\nRedisModule\n\nRedisModule\n\nAdminEventsGateway  -->\n\nRedisModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nRedisModule->WebEventsGateway \n\n\n\n\n\nRedisPubSubService\n\nRedisPubSubService\n\nRedisModule -->\n\nRedisPubSubService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisPubSubService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { RedisModule as NestRedisModule } from '@liaoliaots/nestjs-redis'\nimport { Global, Module, Provider } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\n\nimport { IRedisConfig } from '@server/config'\nimport { RedisOptions } from 'ioredis'\n\nimport { RedisSubPub } from './redis-subpub'\nimport { REDIS_PUBSUB } from './redis.constant'\nimport { RedisPubSubService } from './subpub.service'\n\nconst providers: Provider[] = [\n  {\n    provide: REDIS_PUBSUB,\n    useFactory: (configService: ConfigService) => {\n      const redisOptions: RedisOptions = configService.get('redis')!\n      return new RedisSubPub(redisOptions)\n    },\n    inject: [ConfigService],\n  },\n  RedisPubSubService,\n]\n\n@Global()\n@Module({\n  imports: [\n    NestRedisModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        readyLog: true,\n        config: configService.get('redis'),\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers,\n  exports: [...providers],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisPubSubService.html":{"url":"injectables/RedisPubSubService.html","title":"injectable - RedisPubSubService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisPubSubService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/redis/subpub.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                publish\n                            \n                            \n                                    Public\n                                    Async\n                                subscribe\n                            \n                            \n                                    Public\n                                    Async\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisSubPub: RedisSubPub)\n                    \n                \n                        \n                            \n                                Defined in src/shared/redis/subpub.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisSubPub\n                                                  \n                                                        \n                                                                        RedisSubPub\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        publish\n                        \n                    \n                \n            \n            \n                \n                        \n                    publish(event: string, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/redis/subpub.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(event: string, callback: (data: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/redis/subpub.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsubscribe(event: string, callback: (data: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/redis/subpub.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\n\nimport { RedisSubPub } from './redis-subpub'\nimport { REDIS_PUBSUB } from './redis.constant'\n\n@Injectable()\nexport class RedisPubSubService {\n  constructor(@Inject(REDIS_PUBSUB) private readonly redisSubPub: RedisSubPub) {}\n\n  public async publish(event: string, data: any) {\n    return this.redisSubPub.publish(event, data)\n  }\n\n  public async subscribe(event: string, callback: (data: any) => void) {\n    return this.redisSubPub.subscribe(event, callback)\n  }\n\n  public async unsubscribe(event: string, callback: (data: any) => void) {\n    return this.redisSubPub.unsubscribe(event, callback)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RedisSubPub.html":{"url":"classes/RedisSubPub.html","title":"class - RedisSubPub","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RedisSubPub\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/redis/redis-subpub.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                ctc\n                            \n                            \n                                    Public\n                                pubClient\n                            \n                            \n                                    Public\n                                subClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Public\n                                    Async\n                                publish\n                            \n                            \n                                    Public\n                                    Async\n                                subscribe\n                            \n                            \n                                    Public\n                                    Async\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisConfig: RedisOptions, channelPrefix: string)\n                    \n                \n                        \n                            \n                                Defined in src/shared/redis/redis-subpub.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisConfig\n                                                  \n                                                        \n                                                                    RedisOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelPrefix\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ctc\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap void>()\n                    \n                \n                    \n                        \n                                Defined in src/shared/redis/redis-subpub.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        pubClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/redis/redis-subpub.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        subClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/redis/redis-subpub.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/redis/redis-subpub.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        publish\n                        \n                    \n                \n            \n            \n                \n                        \n                    publish(event: string, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/redis/redis-subpub.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(event: string, callback: (data: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/redis/redis-subpub.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsubscribe(event: string, callback: (data: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/redis/redis-subpub.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common'\nimport IORedis from 'ioredis'\nimport type { Redis, RedisOptions } from 'ioredis'\n\nexport class RedisSubPub {\n  public pubClient: Redis\n  public subClient: Redis\n  constructor(\n    private redisConfig: RedisOptions,\n    private channelPrefix: string = 'm-shop-channel#',\n  ) {\n    this.init()\n  }\n\n  public init() {\n    const redisOptions: RedisOptions = {\n      host: this.redisConfig.host,\n      port: this.redisConfig.port,\n    }\n\n    if (this.redisConfig.password)\n      redisOptions.password = this.redisConfig.password\n\n    const pubClient = new IORedis(redisOptions)\n    const subClient = pubClient.duplicate()\n    this.pubClient = pubClient\n    this.subClient = subClient\n  }\n\n  public async publish(event: string, data: any) {\n    const channel = this.channelPrefix + event\n    const _data = JSON.stringify(data)\n    if (event !== 'log')\n      Logger.debug(`发布事件：${channel}  void>()\n\n  public async subscribe(event: string, callback: (data: any) => void) {\n    const myChannel = this.channelPrefix + event\n    this.subClient.subscribe(myChannel)\n\n    const cb = (channel, message) => {\n      if (channel === myChannel) {\n        if (event !== 'log')\n          Logger.debug(`接收事件：${channel} -> ${message}`, RedisSubPub.name)\n\n        callback(JSON.parse(message))\n      }\n    }\n\n    this.ctc.set(callback, cb)\n    this.subClient.on('message', cb)\n  }\n\n  public async unsubscribe(event: string, callback: (data: any) => void) {\n    const channel = this.channelPrefix + event\n    this.subClient.unsubscribe(channel)\n    const cb = this.ctc.get(callback)\n    if (cb) {\n      this.subClient.off('message', cb)\n\n      this.ctc.delete(callback)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(CredentialsSchema.extend({\n  // ...\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'nestjs-zod/z'\n\nexport const LoginTypeEnum = z.enum(['account', 'email', 'mobile'])\n\nexport const CredentialsSchema = z.object({\n  username: z.string().min(4).max(255),\n  password: z.password().min(6).atLeastOne('digit'),\n  type: LoginTypeEnum,\n})\n\nexport class LoginDto extends createZodDto(CredentialsSchema) {}\n\nexport class RegisterDto extends createZodDto(CredentialsSchema.extend({\n  // ...\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResOp.html":{"url":"classes/ResOp.html","title":"class - ResOp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResOp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/model/response.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                    Optional\n                                data\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                ok\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: IBaseResponse)\n                    \n                \n                        \n                            \n                                Defined in src/common/model/response.model.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        IBaseResponse\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', default: RESPONSE_SUCCESS_CODE})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/model/response.model.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/model/response.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', default: RESPONSE_SUCCESS_MSG})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/model/response.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ok\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/model/response.model.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\n\nimport {\n  RESPONSE_SUCCESS_CODE,\n  RESPONSE_SUCCESS_MSG,\n} from '@server/constants/response.constant'\n\nexport interface IBaseResponse {\n  ok?: boolean\n  code?: number\n  message?: string\n  data?: T\n}\n\nexport class ResOp {\n  @ApiProperty({ type: 'boolean', default: true })\n  ok: boolean\n\n  @ApiProperty({ type: 'number', default: RESPONSE_SUCCESS_CODE })\n  code: number\n\n  @ApiProperty({ type: 'string', default: RESPONSE_SUCCESS_MSG })\n  message: string\n\n  @ApiProperty({ type: 'object' })\n  data?: T\n\n  constructor({\n    code,\n    message,\n    ok,\n    data,\n  }: IBaseResponse) {\n    this.code = code ?? RESPONSE_SUCCESS_CODE\n    this.message = message ?? RESPONSE_SUCCESS_MSG\n    this.ok = ok ?? true\n\n    if (data)\n      this.data = data\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/account.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(z.object({\n  password: strongPasswordSchema,\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { strongPasswordSchema } from '@server/modules/user/dto/password.dto'\nimport { UserSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport class UpdateProfileDto extends createZodDto(\n  UserSchema.pick({\n    nickname: true,\n    avatar: true,\n    phone: true,\n  }).partial(),\n) {}\n\nexport class ResetPasswordDto extends createZodDto(z.object({\n  password: strongPasswordSchema,\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendEmailCodeDto.html":{"url":"classes/SendEmailCodeDto.html","title":"class - SendEmailCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendEmailCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/captcha/captcha.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        createZodDto(z.object({\n  email: z.string().email({ message: '邮箱格式不正确' }),\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport class ImageCaptchaDto extends createZodDto(z.object({\n  width: z.number().optional().default(100),\n  height: z.number().optional().default(50),\n})) {}\n\nexport class SendEmailCodeDto extends createZodDto(z.object({\n  email: z.string().email({ message: '邮箱格式不正确' }),\n})) {}\n\nexport class SendSmsCodeDto extends createZodDto(z.object({\n  phone: z.string().regex(/^1[3-9]\\d{9}$/, { message: '手机号格式不正确' }),\n})) {}\n\nexport class CheckCodeDto extends createZodDto(z.object({\n  identity: z.string(),\n  code: z.string(),\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendSmsCodeDto.html":{"url":"classes/SendSmsCodeDto.html","title":"class - SendSmsCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendSmsCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/captcha/captcha.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        createZodDto(z.object({\n  phone: z.string().regex(/^1[3-9]\\d{9}$/, { message: '手机号格式不正确' }),\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport class ImageCaptchaDto extends createZodDto(z.object({\n  width: z.number().optional().default(100),\n  height: z.number().optional().default(50),\n})) {}\n\nexport class SendEmailCodeDto extends createZodDto(z.object({\n  email: z.string().email({ message: '邮箱格式不正确' }),\n})) {}\n\nexport class SendSmsCodeDto extends createZodDto(z.object({\n  phone: z.string().regex(/^1[3-9]\\d{9}$/, { message: '手机号格式不正确' }),\n})) {}\n\nexport class CheckCodeDto extends createZodDto(z.object({\n  identity: z.string(),\n  code: z.string(),\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Snowflake.html":{"url":"classes/Snowflake.html","title":"class - Snowflake","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Snowflake\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/database/snowflake.util.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                datacenterId\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                datacenterIdBits\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                datacenterIdShift\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                epoch\n                            \n                            \n                                    Private\n                                lastTimestamp\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                maxDatacenterId\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                maxSequence\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                maxWorkerId\n                            \n                            \n                                    Private\n                                sequence\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                sequenceBits\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                timestampLeftShift\n                            \n                            \n                                    Private\n                                workerId\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                workerIdBits\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                workerIdShift\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                nextId\n                            \n                            \n                                    Private\n                                tilNextMillis\n                            \n                            \n                                    Private\n                                timeGen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(workerId, datacenterId)\n                    \n                \n                        \n                            \n                                Defined in src/shared/database/snowflake.util.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        workerId\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        datacenterId\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        datacenterId\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        datacenterIdBits\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 5n\n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        datacenterIdShift\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Snowflake.sequenceBits + Snowflake.workerIdBits\n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        epoch\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 1704067200000n\n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        lastTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : -1n\n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        maxDatacenterId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (1n \n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        maxSequence\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (1n \n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        maxWorkerId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (1n \n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sequence\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 0n\n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        sequenceBits\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 12n\n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        timestampLeftShift\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Snowflake.sequenceBits + Snowflake.workerIdBits + Snowflake.datacenterIdBits\n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        workerId\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        workerIdBits\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 5n\n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        workerIdShift\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Snowflake.sequenceBits\n                    \n                \n                    \n                        \n                                Defined in src/shared/database/snowflake.util.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        nextId\n                        \n                    \n                \n            \n            \n                \n                        \n                    nextId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/database/snowflake.util.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        tilNextMillis\n                        \n                    \n                \n            \n            \n                \n                        \n                    tilNextMillis(lastTimestamp)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/database/snowflake.util.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                lastTimestamp\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        timeGen\n                        \n                    \n                \n            \n            \n                \n                        \n                    timeGen()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/database/snowflake.util.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import os from 'node:os'\n\nclass Snowflake {\n  private static readonly epoch = 1704067200000n // 自定义起始时间（以毫秒为单位）\n  private static readonly workerIdBits = 5n\n  private static readonly datacenterIdBits = 5n\n  private static readonly sequenceBits = 12n\n\n  private static readonly maxWorkerId = (1n  Snowflake.maxWorkerId || workerId  Snowflake.maxDatacenterId || datacenterId  Number.parseInt(part, 10))\n  const ipNumber\n    = (ipParts[0] > 5) & 0x1F // 取接下来的 5 位\n\n  return [workerId, datacenterId]\n}\n\n// 使用这个函数来初始化 Snowflake\nconst [workerId, datacenterId] = getWorkerAndDatacenterId()\n\nexport const snowflake = new Snowflake(BigInt(workerId), BigInt(datacenterId))\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SocketModule.html":{"url":"modules/SocketModule.html","title":"module - SocketModule","body":"\n                   \n\n\n\n\n    Modules\n    SocketModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SocketModule\n\n\n\ncluster_SocketModule_imports\n\n\n\ncluster_SocketModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nSocketModule\n\nSocketModule\n\nSocketModule -->\n\nAuthModule->SocketModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nSocketModule -->\n\nUserModule->SocketModule\n\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\nAdminEventsGateway  -->\n\nSocketModule->AdminEventsGateway \n\n\n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\nWebEventsGateway  -->\n\nSocketModule->WebEventsGateway \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/socket/socket.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module, Provider } from '@nestjs/common'\n\nimport { UserModule } from '@server/modules/user/user.module'\n\nimport { AuthModule } from '../modules/auth/auth.module'\n\nimport { AdminEventsGateway } from './events/admin.gateway'\nimport { WebEventsGateway } from './events/web.gateway'\n\nconst providers: Provider[] = [AdminEventsGateway, WebEventsGateway]\n\n@Global()\n@Module({\n  imports: [UserModule, AuthModule],\n  providers,\n  exports: [...providers],\n})\nexport class SocketModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubCommentPagerDto.html":{"url":"classes/SubCommentPagerDto.html","title":"class - SubCommentPagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubCommentPagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/comment/comment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(CommentPagerSchema.extend({\n  rootId: SnowflakeIdSchema,\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SnowflakeIdSchema } from '@server/common/dto/id.dto'\nimport { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { CommentSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nimport { CommentRefType } from './comment.constant'\n\nexport const CreateCommentInputSchema = CommentSchema.pick({\n  content: true,\n}).extend({\n  parentId: SnowflakeIdSchema.optional().nullable(),\n  itemId: SnowflakeIdSchema,\n  itemType: z.nativeEnum(CommentRefType),\n})\n\nexport class CreateCommentDto extends createZodDto(CreateCommentInputSchema) { }\n\nexport const CommentPagerSchema = basePagerSchema.extend({\n  itemId: SnowflakeIdSchema,\n  itemType: z.nativeEnum(CommentRefType),\n})\n\nexport class CommentPagerDto extends createZodDto(CommentPagerSchema) { }\n\nexport class SubCommentPagerDto extends createZodDto(CommentPagerSchema.extend({\n  rootId: SnowflakeIdSchema,\n})) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TA.html":{"url":"interfaces/TA.html","title":"interface - TA","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TA\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/trpc/trpc.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            router\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        router\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        router:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { nextTick } from 'node:process'\n\nimport { subject } from '@casl/ability'\nimport { Injectable, Logger, OnModuleInit } from '@nestjs/common'\nimport { DiscoveryService, Reflector } from '@nestjs/core'\nimport { NestFastifyApplication } from '@nestjs/platform-fastify'\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { AuthService } from '@server/modules/auth/auth.service'\nimport { AbilityService } from '@server/modules/casl/casl.service'\nimport { fastifyRequestHandler } from '@trpc/server/adapters/fastify'\nimport { FastifyReply, FastifyRequest } from 'fastify'\nimport { getFastifyPlugin } from 'trpc-playground/handlers/fastify'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '../database/prisma.extension'\n\nimport { TRPC_ROUTER } from './trpc.constant'\nimport { createContext } from './trpc.context'\nimport { trpc } from './trpc.instance'\nimport { TRPCRouters } from './trpc.routes'\n\ninterface TA {\n  router: any\n}\n\ntype ExtractRouterType = T['router']\n\ntype MapToRouterType = {\n  [K in keyof T]: ExtractRouterType\n}\n\ntype Routers = MapToRouterType\n\n@Injectable()\nexport class TRPCService implements OnModuleInit {\n  constructor(\n    private readonly discovery: DiscoveryService,\n    private readonly reflector: Reflector,\n    private readonly authService: AuthService,\n    private readonly abilityService: AbilityService,\n    @InjectPrismaClient()\n    private readonly prisma: ExtendedPrismaClient,\n  ) {\n    this.logger = new Logger('TRPCService')\n\n    this._procedureAuth = trpc.procedure\n      // auth middleware\n      .use(\n        trpc.middleware(async (opts) => {\n          const authorization = opts.ctx.req.headers?.authorization\n          if (!authorization)\n            throw new BizException(ErrorCodeEnum.AuthFail)\n\n          const result = await authService.validateToken(authorization)\n          if (!result)\n            throw new BizException(ErrorCodeEnum.JWTInvalid)\n\n          opts.ctx.user = result\n\n          return opts.next()\n        }),\n      )\n      // police middleware\n      .use(trpc.middleware(async (opts) => {\n        const { rawInput, ctx: { user }, meta } = opts\n\n        if (meta) {\n          const { action, model } = meta\n          const ability = this.abilityService.abilityMap[model].createForUser(user)\n\n          const id = (rawInput as { id: string }).id\n\n          if (id) {\n            const item = await this.prisma[model].findUniqueOrThrow({\n              where: { id },\n            })\n\n            const result = ability.can(action, subject(model, item))\n            if (!result)\n              throw new BizException(ErrorCodeEnum.ResourceNotFound)\n          }\n\n          const result = ability.can(action, model)\n          if (!result)\n            throw new BizException(ErrorCodeEnum.NoPermission)\n        }\n\n        return opts.next()\n      }))\n  }\n\n  public get trpc() {\n    return trpc\n  }\n\n  public get t() {\n    return trpc\n  }\n\n  private _procedureAuth: typeof trpc.procedure\n\n  public get procedureAuth() {\n    return this._procedureAuth\n  }\n\n  public get procedure() {\n    return trpc.procedure\n  }\n\n  public get createCaller() {\n    return trpc.createCallerFactory(this.appRouter)\n  }\n\n  caller: ReturnType\n\n  onModuleInit() {\n    this.createAppRouter()\n  }\n\n  private logger: Logger\n  appRouter: ReturnType\n\n  private createAppRouter() {\n    const providers = this.discovery.getProviders()\n    const routers = providers\n      .filter((provider) => {\n        try {\n          return this.reflector.get(TRPC_ROUTER, provider.metatype)\n        }\n        catch {\n          return false\n        }\n      })\n      .map(({ instance }) => instance.router)\n      .filter((router) => {\n        if (!router)\n          this.logger.warn('missing router.')\n\n        return !!router\n      })\n\n    const appRouter = trpc.mergeRouters(...(routers as any as Routers))\n    this.appRouter = appRouter\n    return appRouter\n  }\n\n  applyMiddleware(_app: NestFastifyApplication) {\n    _app.getHttpAdapter().all(`/api/trpc/:path`, async (req, res) => {\n      const path = (req.params as any).path\n      await fastifyRequestHandler({\n\n        router: this.appRouter,\n        createContext,\n        req: req as unknown as FastifyRequest,\n        res: res as unknown as FastifyReply,\n        path,\n        onError: (opts) => {\n          const { error, type, path, input, ctx, req } = opts\n\n          this.logger.error(`Error in tRPC handler on path '${path}: ${error.message}`, error.stack)\n        },\n      })\n    })\n\n    nextTick(async () => {\n      _app.register(\n        await getFastifyPlugin({\n          router: this.appRouter,\n          trpcApiEndpoint: '/api/trpc',\n          playgroundEndpoint: '/api/trpc-playground',\n        }) as any,\n        { prefix: '/api/trpc-playground' },\n      )\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TRPCModule.html":{"url":"modules/TRPCModule.html","title":"module - TRPCModule","body":"\n                   \n\n\n\n\n    Modules\n    TRPCModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TRPCModule\n\n\n\ncluster_TRPCModule_providers\n\n\n\ncluster_TRPCModule_exports\n\n\n\n\nTRPCService \n\nTRPCService \n\n\n\nTRPCModule\n\nTRPCModule\n\nTRPCService  -->\n\nTRPCModule->TRPCService \n\n\n\n\n\nTRPCService\n\nTRPCService\n\nTRPCModule -->\n\nTRPCService->TRPCModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/trpc/trpc.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TRPCService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TRPCService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common'\nimport { DiscoveryModule } from '@nestjs/core'\n\nimport { TRPCService } from './trpc.service'\n\n@Module({\n  imports: [DiscoveryModule],\n  exports: [TRPCService],\n  providers: [TRPCService],\n})\n@Global()\nexport class TRPCModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TRPCService.html":{"url":"injectables/TRPCService.html","title":"injectable - TRPCService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TRPCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/trpc/trpc.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _procedureAuth\n                            \n                            \n                                appRouter\n                            \n                            \n                                caller\n                            \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyMiddleware\n                            \n                            \n                                    Private\n                                createAppRouter\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    trpc\n                                \n                                \n                                    t\n                                \n                                \n                                    procedureAuth\n                                \n                                \n                                    procedure\n                                \n                                \n                                    createCaller\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discovery: DiscoveryService, reflector: Reflector, authService: AuthService, abilityService: AbilityService, prisma: ExtendedPrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/shared/trpc/trpc.service.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discovery\n                                                  \n                                                        \n                                                                    DiscoveryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        abilityService\n                                                  \n                                                        \n                                                                        AbilityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        ExtendedPrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyMiddleware\n                        \n                    \n                \n            \n            \n                \napplyMiddleware(_app: NestFastifyApplication)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/trpc/trpc.service.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _app\n                                            \n                                                        NestFastifyApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createAppRouter\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAppRouter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/trpc/trpc.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/trpc/trpc.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _procedureAuth\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/shared/trpc/trpc.service.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        appRouter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/trpc/trpc.service.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        caller\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/trpc/trpc.service.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/trpc/trpc.service.ts:120\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        trpc\n                    \n                \n\n                \n                    \n                        gettrpc()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/trpc/trpc.service.ts:92\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        t\n                    \n                \n\n                \n                    \n                        gett()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/trpc/trpc.service.ts:96\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        procedureAuth\n                    \n                \n\n                \n                    \n                        getprocedureAuth()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/trpc/trpc.service.ts:102\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        procedure\n                    \n                \n\n                \n                    \n                        getprocedure()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/trpc/trpc.service.ts:106\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        createCaller\n                    \n                \n\n                \n                    \n                        getcreateCaller()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/trpc/trpc.service.ts:110\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { nextTick } from 'node:process'\n\nimport { subject } from '@casl/ability'\nimport { Injectable, Logger, OnModuleInit } from '@nestjs/common'\nimport { DiscoveryService, Reflector } from '@nestjs/core'\nimport { NestFastifyApplication } from '@nestjs/platform-fastify'\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\nimport { AuthService } from '@server/modules/auth/auth.service'\nimport { AbilityService } from '@server/modules/casl/casl.service'\nimport { fastifyRequestHandler } from '@trpc/server/adapters/fastify'\nimport { FastifyReply, FastifyRequest } from 'fastify'\nimport { getFastifyPlugin } from 'trpc-playground/handlers/fastify'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '../database/prisma.extension'\n\nimport { TRPC_ROUTER } from './trpc.constant'\nimport { createContext } from './trpc.context'\nimport { trpc } from './trpc.instance'\nimport { TRPCRouters } from './trpc.routes'\n\ninterface TA {\n  router: any\n}\n\ntype ExtractRouterType = T['router']\n\ntype MapToRouterType = {\n  [K in keyof T]: ExtractRouterType\n}\n\ntype Routers = MapToRouterType\n\n@Injectable()\nexport class TRPCService implements OnModuleInit {\n  constructor(\n    private readonly discovery: DiscoveryService,\n    private readonly reflector: Reflector,\n    private readonly authService: AuthService,\n    private readonly abilityService: AbilityService,\n    @InjectPrismaClient()\n    private readonly prisma: ExtendedPrismaClient,\n  ) {\n    this.logger = new Logger('TRPCService')\n\n    this._procedureAuth = trpc.procedure\n      // auth middleware\n      .use(\n        trpc.middleware(async (opts) => {\n          const authorization = opts.ctx.req.headers?.authorization\n          if (!authorization)\n            throw new BizException(ErrorCodeEnum.AuthFail)\n\n          const result = await authService.validateToken(authorization)\n          if (!result)\n            throw new BizException(ErrorCodeEnum.JWTInvalid)\n\n          opts.ctx.user = result\n\n          return opts.next()\n        }),\n      )\n      // police middleware\n      .use(trpc.middleware(async (opts) => {\n        const { rawInput, ctx: { user }, meta } = opts\n\n        if (meta) {\n          const { action, model } = meta\n          const ability = this.abilityService.abilityMap[model].createForUser(user)\n\n          const id = (rawInput as { id: string }).id\n\n          if (id) {\n            const item = await this.prisma[model].findUniqueOrThrow({\n              where: { id },\n            })\n\n            const result = ability.can(action, subject(model, item))\n            if (!result)\n              throw new BizException(ErrorCodeEnum.ResourceNotFound)\n          }\n\n          const result = ability.can(action, model)\n          if (!result)\n            throw new BizException(ErrorCodeEnum.NoPermission)\n        }\n\n        return opts.next()\n      }))\n  }\n\n  public get trpc() {\n    return trpc\n  }\n\n  public get t() {\n    return trpc\n  }\n\n  private _procedureAuth: typeof trpc.procedure\n\n  public get procedureAuth() {\n    return this._procedureAuth\n  }\n\n  public get procedure() {\n    return trpc.procedure\n  }\n\n  public get createCaller() {\n    return trpc.createCallerFactory(this.appRouter)\n  }\n\n  caller: ReturnType\n\n  onModuleInit() {\n    this.createAppRouter()\n  }\n\n  private logger: Logger\n  appRouter: ReturnType\n\n  private createAppRouter() {\n    const providers = this.discovery.getProviders()\n    const routers = providers\n      .filter((provider) => {\n        try {\n          return this.reflector.get(TRPC_ROUTER, provider.metatype)\n        }\n        catch {\n          return false\n        }\n      })\n      .map(({ instance }) => instance.router)\n      .filter((router) => {\n        if (!router)\n          this.logger.warn('missing router.')\n\n        return !!router\n      })\n\n    const appRouter = trpc.mergeRouters(...(routers as any as Routers))\n    this.appRouter = appRouter\n    return appRouter\n  }\n\n  applyMiddleware(_app: NestFastifyApplication) {\n    _app.getHttpAdapter().all(`/api/trpc/:path`, async (req, res) => {\n      const path = (req.params as any).path\n      await fastifyRequestHandler({\n\n        router: this.appRouter,\n        createContext,\n        req: req as unknown as FastifyRequest,\n        res: res as unknown as FastifyReply,\n        path,\n        onError: (opts) => {\n          const { error, type, path, input, ctx, req } = opts\n\n          this.logger.error(`Error in tRPC handler on path '${path}: ${error.message}`, error.stack)\n        },\n      })\n    })\n\n    nextTick(async () => {\n      _app.register(\n        await getFastifyPlugin({\n          router: this.appRouter,\n          trpcApiEndpoint: '/api/trpc',\n          playgroundEndpoint: '/api/trpc-playground',\n        }) as any,\n        { prefix: '/api/trpc-playground' },\n      )\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(time: number)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/timeout.interceptor.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        time\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/timeout.interceptor.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  RequestTimeoutException,\n} from '@nestjs/common'\nimport { Observable, TimeoutError, throwError } from 'rxjs'\nimport { catchError, timeout } from 'rxjs/operators'\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  constructor(private readonly time: number = 10000) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      timeout(this.time),\n      catchError((err) => {\n        if (err instanceof TimeoutError)\n          return throwError(new RequestTimeoutException('请求超时'))\n\n        return throwError(err)\n      }),\n    )\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodoAbility.html":{"url":"injectables/TodoAbility.html","title":"injectable - TodoAbility","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodoAbility\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todo/todo.ability.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: IAuthUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todo/todo.ability.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AbilityBuilder } from '@casl/ability'\nimport { createPrismaAbility } from '@casl/prisma'\nimport { Injectable } from '@nestjs/common'\n\nimport { Role } from '@server/modules/auth/auth.constant'\n\nimport { Action, AppAbility, BaseAbility } from '../casl/ability.class'\nimport { DefineAbility } from '../casl/ability.decorator'\n\n@DefineAbility('Todo')\n@Injectable()\nexport class TodoAbility implements BaseAbility {\n  createForUser(user: IAuthUser) {\n    const { can, build } = new AbilityBuilder(createPrismaAbility)\n\n    if (user.role === Role.Admin)\n      can(Action.Manage, 'Todo')\n\n    if (user.role === Role.User) {\n      can(Action.Create, 'Todo')\n      can(Action.Read, 'Todo', { userId: user.id })\n      can(Action.Update, 'Todo', { userId: user.id })\n      can(Action.Delete, 'Todo', { userId: user.id })\n    }\n\n    return build()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TodoController.html":{"url":"controllers/TodoController.html","title":"controller - TodoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TodoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todo/todo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                batchDelete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                list\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        batchDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    batchDelete(dto: BatchDeleteDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todo/todo.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            BatchDeleteDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: TodoDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Policy({model: 'Todo', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todo/todo.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            TodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Policy({model: 'Todo', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todo/todo.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Policy({model: 'Todo', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todo/todo.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(dto: TodoPagerDto, user: IAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Policy({model: 'Todo', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todo/todo.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            TodoPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: IdDto, dto: TodoUpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@Policy({model: 'Todo', action: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/todo/todo.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            TodoUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Put, Query, UseGuards } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\nimport { BatchDeleteDto } from '@server/common/dto/delete.dto'\n\nimport { IdDto } from '@server/common/dto/id.dto'\n\nimport { AuthUser } from '../auth/decorators/auth-user.decorator'\n\nimport { Action } from '../casl/ability.class'\nimport { Policy } from '../casl/policy.decortor'\nimport { PolicyGuard } from '../casl/policy.guard'\n\nimport { TodoDto, TodoPagerDto, TodoUpdateDto } from './todo.dto'\nimport { TodoService } from './todo.service'\n\n@ApiTags('Business - Todo模块')\n@UseGuards(PolicyGuard)\n@Controller('todos')\nexport class TodoController {\n  constructor(private readonly todoService: TodoService) { }\n\n  @Get()\n  @Policy({ model: 'Todo', action: Action.Read })\n  async list(@Query() dto: TodoPagerDto, @AuthUser() user: IAuthUser) {\n    return this.todoService.paginate(dto, user.id)\n  }\n\n  @Get(':id')\n  @Policy({ model: 'Todo', action: Action.Read })\n  async findOne(@Param() { id }: IdDto) {\n    return this.todoService.findOne(id)\n  }\n\n  @Post()\n  @Policy({ model: 'Todo', action: Action.Create })\n  async create(@Body() dto: TodoDto, @AuthUser() user: IAuthUser) {\n    await this.todoService.create(dto, user.id)\n  }\n\n  @Put(':id')\n  @Policy({ model: 'Todo', action: Action.Update })\n  async update(@Param() { id }: IdDto, @Body() dto: TodoUpdateDto) {\n    await this.todoService.update(id, dto)\n  }\n\n  @Delete(':id')\n  @Policy({ model: 'Todo', action: Action.Delete })\n  async delete(@Param() { id }: IdDto) {\n    await this.todoService.delete(id)\n  }\n\n  @Delete()\n  async batchDelete(@Body() dto: BatchDeleteDto, @AuthUser() user: IAuthUser) {\n    const { ids } = dto\n    await this.todoService.batchDelete(ids, user.id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoDto.html":{"url":"classes/TodoDto.html","title":"class - TodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todo/todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(TodoInputSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { TodoOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const TodoInputSchema = TodoOptionalDefaultsSchema.pick({\n  value: true,\n  status: true,\n})\n\nexport class TodoDto extends createZodDto(TodoInputSchema) {}\n\nexport class TodoUpdateDto extends createZodDto(TodoInputSchema.partial()) {}\n\nexport class TodoPagerDto extends createZodDto(basePagerSchema.extend({\n  sortBy: z.enum(['createdAt', 'updateAt']).optional(),\n  // select: z.array(TodoSchema.keyof()).optional(),\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TodoModule.html":{"url":"modules/TodoModule.html","title":"module - TodoModule","body":"\n                   \n\n\n\n\n    Modules\n    TodoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TodoModule\n\n\n\ncluster_TodoModule_providers\n\n\n\ncluster_TodoModule_exports\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\n\n\nTodoModule\n\nTodoModule\n\nAdminEventsGateway  -->\n\nTodoModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nTodoModule->WebEventsGateway \n\n\n\n\n\nTodoAbility\n\nTodoAbility\n\nTodoModule -->\n\nTodoAbility->TodoModule\n\n\n\n\n\nTodoService\n\nTodoService\n\nTodoModule -->\n\nTodoService->TodoModule\n\n\n\n\n\nTodoTrpcRouter\n\nTodoTrpcRouter\n\nTodoModule -->\n\nTodoTrpcRouter->TodoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/todo/todo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TodoAbility\n                        \n                        \n                            TodoService\n                        \n                        \n                            TodoTrpcRouter\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TodoController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Provider } from '@nestjs/common'\n\nimport { TodoAbility } from './todo.ability'\nimport { TodoController } from './todo.controller'\nimport { TodoService } from './todo.service'\nimport { TodoTrpcRouter } from './todo.trpc'\n\nconst providers: Provider[] = [TodoService, TodoTrpcRouter, TodoAbility]\n\n@Module({\n  controllers: [TodoController],\n  providers,\n  exports: [...providers],\n})\nexport class TodoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoPagerDto.html":{"url":"classes/TodoPagerDto.html","title":"class - TodoPagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoPagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todo/todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        createZodDto(basePagerSchema.extend({\n  sortBy: z.enum(['createdAt', 'updateAt']).optional(),\n  // select: z.array(TodoSchema.keyof()).optional(),\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { TodoOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const TodoInputSchema = TodoOptionalDefaultsSchema.pick({\n  value: true,\n  status: true,\n})\n\nexport class TodoDto extends createZodDto(TodoInputSchema) {}\n\nexport class TodoUpdateDto extends createZodDto(TodoInputSchema.partial()) {}\n\nexport class TodoPagerDto extends createZodDto(basePagerSchema.extend({\n  sortBy: z.enum(['createdAt', 'updateAt']).optional(),\n  // select: z.array(TodoSchema.keyof()).optional(),\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodoService.html":{"url":"injectables/TodoService.html","title":"injectable - TodoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todo/todo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                batchDelete\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        batchDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    batchDelete(ids: string[], userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todo/todo.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: TodoDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todo/todo.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            TodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todo/todo.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todo/todo.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(undefined: TodoPagerDto, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todo/todo.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            TodoPagerDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: TodoUpdateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todo/todo.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            TodoUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExtendedPrismaClient\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectPrismaClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/todo/todo.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '../../shared/database/prisma.extension'\n\nimport { TodoDto, TodoPagerDto, TodoUpdateDto } from './todo.dto'\n\n@Injectable()\nexport class TodoService {\n  @InjectPrismaClient()\n  private prisma: ExtendedPrismaClient\n\n  async paginate({\n    page,\n    limit,\n  }: TodoPagerDto, userId?: string) {\n    const [items, meta] = await this.prisma.todo.paginate({\n      where: {\n        ...(userId && { userId }),\n      },\n    }).withPages({ page, limit, includePageCount: true })\n\n    return {\n      items,\n      meta,\n    }\n  }\n\n  async findOne(id: string) {\n    return this.prisma.todo.findUniqueOrThrow({\n      where: {\n        id,\n      },\n    })\n  }\n\n  async create(dto: TodoDto, userId: string) {\n    const { ...data } = dto\n    return this.prisma.todo.create({\n      data: {\n        ...data,\n        userId,\n      },\n    })\n  }\n\n  async update(id: string, dto: TodoUpdateDto) {\n    return this.prisma.todo.update({\n      where: { id },\n      data: {\n        ...dto,\n      },\n    })\n  }\n\n  async delete(id: string) {\n    return this.prisma.todo.delete({\n      where: {\n        id,\n      },\n    })\n  }\n\n  async batchDelete(ids: string[], userId: string) {\n    const items = await this.prisma.todo.deleteMany({\n      where: {\n        id: { in: ids },\n        userId,\n      },\n    })\n\n    return items\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodoTrpcRouter.html":{"url":"injectables/TodoTrpcRouter.html","title":"injectable - TodoTrpcRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodoTrpcRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todo/todo.trpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createRouter\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(trpcService: TRPCService, todoService: TodoService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/todo/todo.trpc.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trpcService\n                                                  \n                                                        \n                                                                        TRPCService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        todoService\n                                                  \n                                                        \n                                                                        TodoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createRouter\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRouter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todo/todo.trpc.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/todo/todo.trpc.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/todo/todo.trpc.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common'\n\nimport { BatchDeleteDto } from '@server/common/dto/delete.dto'\nimport { IdDto } from '@server/common/dto/id.dto'\nimport { TRPCRouter } from '@server/shared/trpc/trpc.decorator'\nimport { defineTrpcRouter } from '@server/shared/trpc/trpc.helper'\nimport { TRPCService } from '@server/shared/trpc/trpc.service'\nimport { z } from 'zod'\n\nimport { Action } from '../casl/ability.class'\n\nimport { TodoInputSchema, TodoPagerDto } from './todo.dto'\nimport { TodoService } from './todo.service'\n\n@TRPCRouter()\n@Injectable()\nexport class TodoTrpcRouter implements OnModuleInit {\n  private router: ReturnType\n\n  constructor(\n    private readonly trpcService: TRPCService,\n    private readonly todoService: TodoService,\n  ) { }\n\n  onModuleInit() {\n    this.router = this.createRouter()\n  }\n\n  private createRouter() {\n    const procedureAuth = this.trpcService.procedureAuth\n    return defineTrpcRouter('todo', {\n      list: procedureAuth\n        .input(TodoPagerDto.schema)\n        .meta({ model: 'Todo', action: Action.Read })\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          return this.todoService.paginate(input, user.id)\n        }),\n      byId: procedureAuth\n        .input(IdDto.schema)\n        .meta({ model: 'Todo', action: Action.Read })\n        .query(async (opt) => {\n          const { input } = opt\n          const { id } = input\n\n          return this.todoService.findOne(id)\n        }),\n      create: procedureAuth\n        .input(TodoInputSchema)\n        .meta({ model: 'Todo', action: Action.Create })\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n\n          return this.todoService.create(input, user.id)\n        }),\n      update: procedureAuth\n        .input(TodoInputSchema.extend({ id: z.string() }))\n        .meta({ model: 'Todo', action: Action.Update })\n        .mutation(async (opt) => {\n          const { input } = opt\n          const { id, ...data } = input\n\n          return this.todoService.update(id, data)\n        }),\n      delete: procedureAuth\n        .input(IdDto.schema)\n        .meta({ model: 'Todo', action: Action.Delete })\n        .mutation(async (opt) => {\n          const { input } = opt\n          const { id } = input\n\n          return this.todoService.delete(id)\n        }),\n      batchDelete: procedureAuth\n        .input(BatchDeleteDto.schema)\n        .meta({ model: 'Todo', action: Action.Delete })\n        .mutation(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { ids } = input\n\n          return this.todoService.batchDelete(ids, user.id)\n        }),\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoUpdateDto.html":{"url":"classes/TodoUpdateDto.html","title":"class - TodoUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/todo/todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(TodoInputSchema.partial())\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { TodoOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const TodoInputSchema = TodoOptionalDefaultsSchema.pick({\n  value: true,\n  status: true,\n})\n\nexport class TodoDto extends createZodDto(TodoInputSchema) {}\n\nexport class TodoUpdateDto extends createZodDto(TodoInputSchema.partial()) {}\n\nexport class TodoPagerDto extends createZodDto(basePagerSchema.extend({\n  sortBy: z.enum(['createdAt', 'updateAt']).optional(),\n  // select: z.array(TodoSchema.keyof()).optional(),\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenService.html":{"url":"injectables/TokenService.html","title":"injectable - TokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/services/token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                isTokenInRedis\n                            \n                            \n                                    Async\n                                removeToken\n                            \n                            \n                                    Async\n                                revokeAll\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/services/token.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: IAuthUser, otherInfo?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/token.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                otherInfo\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isTokenInRedis\n                        \n                    \n                \n            \n            \n                \n                        \n                    isTokenInRedis(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/token.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/token.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/token.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/services/token.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRedis } from '@liaoliaots/nestjs-redis'\nimport { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\n\nimport { RedisKeys } from '@server/constants/cache.constant'\n\nimport { ErrorCode, ErrorCodeEnum } from '@server/constants/error-code.constant'\n\nimport { getRedisKey } from '@server/utils/redis.util'\nimport { Redis } from 'ioredis'\n\n@Injectable()\nexport class TokenService {\n  constructor(\n    @InjectRedis()\n    private readonly redis: Redis,\n\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async generateToken(payload: IAuthUser, otherInfo?: any) {\n    const token = this.jwtService.sign(payload)\n\n    // store in redis\n    await this.redis.hset(\n      getRedisKey(RedisKeys.JWTStore),\n      payload.id,\n      JSON.stringify({\n        token,\n        date: new Date().toISOString(),\n        ...otherInfo,\n      }),\n    )\n\n    return token\n  }\n\n  async isTokenInRedis(userId: string) {\n    if (!userId)\n      return false\n    const key = getRedisKey(RedisKeys.JWTStore)\n    const has = await this.redis.hexists(key, userId)\n    return !!has\n  }\n\n  async removeToken(userId: string) {\n    const key = getRedisKey(RedisKeys.JWTStore)\n\n    await this.redis.hdel(\n      key,\n      userId,\n    )\n  }\n\n  async revokeAll() {\n    const key = getRedisKey(RedisKeys.JWTStore)\n    await this.redis.del(key)\n  }\n\n  async verifyToken(token: string) {\n    const jwt = token.replace(/[Bb]earer /, '')\n\n    if (!isJWT(jwt))\n      throw new UnauthorizedException(ErrorCode[ErrorCodeEnum.JWTInvalid])\n\n    try {\n      const result = this.jwtService.verify(jwt) as IAuthUser\n      if (!result)\n        return false\n\n      const has = await this.isTokenInRedis(result.id)\n      if (!has)\n        return false\n\n      return result\n    }\n    catch (error) {\n      return false\n    }\n  }\n}\n\nfunction isJWT(token: string): boolean {\n  const parts = token.split('.')\n  return (\n    parts.length === 3\n    && /^[a-zA-Z0-9_-]+$/.test(parts[0])\n    && /^[a-zA-Z0-9_-]+$/.test(parts[1])\n    && /^[a-zA-Z0-9_-]+$/.test(parts[2])\n  )\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                统一处理返回接口结果\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/transform.interceptor.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/transform.interceptor.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        serialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    serialize(obj: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/transform.interceptor.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common'\nimport { Reflector } from '@nestjs/core'\nimport { ResOp } from '@server/common/model/response.model'\nimport { isObjectLike, omit } from 'lodash'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport snakecaseKeys from 'snakecase-keys'\n\nimport { BYPASS_KEY } from '../decorators/bypass.decorator'\nimport { OMIT_RESPONSE_PROTECT_KEY } from '../decorators/protect-keys.decorator'\n\n/**\n * 统一处理返回接口结果\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor {\n  constructor(private readonly reflector: Reflector) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable {\n    if (!context.switchToHttp().getRequest())\n      return next.handle()\n\n    const handler = context.getHandler()\n\n    const bypass = this.reflector.get(\n      BYPASS_KEY,\n      handler,\n    )\n\n    if (bypass)\n      return next.handle()\n\n    const omitKeys = this.reflector.getAllAndOverride(\n      OMIT_RESPONSE_PROTECT_KEY,\n      [handler, context.getClass()],\n    )\n\n    return next.handle().pipe(\n      map((data) => {\n        // if (typeof data === 'undefined') {\n        //   context.switchToHttp().getResponse().status(HttpStatus.NO_CONTENT);\n        //   return data;\n        // }\n\n        if (Array.isArray(omitKeys))\n          data = omit(data, omitKeys)\n\n        // data = this.serialize(data)\n\n        return new ResOp({\n          data,\n        })\n      }),\n    )\n  }\n\n  private serialize(obj: any) {\n    if (!isObjectLike(obj))\n      return obj\n\n    return snakecaseKeys(obj, { deep: true })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/account.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        createZodDto(\n  UserSchema.pick({\n    nickname: true,\n    avatar: true,\n    phone: true,\n  }).partial(),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { strongPasswordSchema } from '@server/modules/user/dto/password.dto'\nimport { UserSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport class UpdateProfileDto extends createZodDto(\n  UserSchema.pick({\n    nickname: true,\n    avatar: true,\n    phone: true,\n  }).partial(),\n) {}\n\nexport class ResetPasswordDto extends createZodDto(z.object({\n  password: strongPasswordSchema,\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserAbility.html":{"url":"injectables/UserAbility.html","title":"injectable - UserAbility","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserAbility\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.ability.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: IAuthUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.ability.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IAuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AbilityBuilder } from '@casl/ability'\nimport { createPrismaAbility } from '@casl/prisma'\nimport { Injectable } from '@nestjs/common'\n\nimport { Role } from '@server/modules/auth/auth.constant'\n\nimport { Action, AppAbility, BaseAbility } from '../casl/ability.class'\nimport { DefineAbility } from '../casl/ability.decorator'\n\n@DefineAbility('User')\n@Injectable()\nexport class UserAbility implements BaseAbility {\n  createForUser(user: IAuthUser) {\n    const { can, build } = new AbilityBuilder(createPrismaAbility)\n\n    if (user.role === Role.Admin)\n      can(Action.Manage, 'User')\n\n    return build()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                list\n                            \n                            \n                                    \n                                    \n                                    Async\n                                password\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: '新增用户'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: '删除用户'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: '查询用户'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                        \n                    list(dto: UserQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: '获取用户列表'})@Policy({action: undefined, model: 'User'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        password\n                        \n                    \n                \n            \n            \n                \n                        \n                    password(dto: UserPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/password')@ApiOperation({summary: '更改用户密码'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UserPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: IdDto, dto: UserUpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: '更新用户'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Put, Query, UseGuards } from '@nestjs/common'\nimport { ApiOperation, ApiTags } from '@nestjs/swagger'\n\nimport { ApiSecurityAuth } from '@server/common/decorators/swagger.decorator'\nimport { IdDto } from '@server/common/dto/id.dto'\n\nimport { Action } from '../casl/ability.class'\nimport { Policy } from '../casl/policy.decortor'\nimport { PolicyGuard } from '../casl/policy.guard'\n\nimport { UserPasswordDto } from './dto/password.dto'\nimport { UserDto, UserQueryDto, UserUpdateDto } from './dto/user.dto'\nimport { UserService } from './user.service'\n\n@ApiTags('System - 用户模块')\n@ApiSecurityAuth()\n@UseGuards(PolicyGuard)\n@Controller('users')\nexport class UserController {\n  constructor(\n    private readonly userService: UserService,\n  ) {}\n\n  @Get()\n  @ApiOperation({ summary: '获取用户列表' })\n  @Policy({ action: Action.Read, model: 'User' })\n  async list(@Query() dto: UserQueryDto) {\n    return this.userService.paginate(dto)\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: '查询用户' })\n  async getUserById(@Param() { id }: IdDto) {\n    return this.userService.getUserById(id)\n  }\n\n  @Post()\n  @ApiOperation({ summary: '新增用户' })\n  async create(@Body() dto: UserDto) {\n    await this.userService.create(dto)\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: '更新用户' })\n  async update(@Param() { id }: IdDto, @Body() dto: UserUpdateDto) {\n    await this.userService.update(id, dto)\n    // await this.menuService.refreshPerms(id)\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: '删除用户' })\n  async delete(@Param() { id }: IdDto) {\n    await this.userService.delete([id])\n  }\n\n  @Post(':id/password')\n  @ApiOperation({ summary: '更改用户密码' })\n  async password(@Body() dto: UserPasswordDto) {\n    await this.userService.forceUpdatePassword(dto.id, dto.password)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(UserInputSchema)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { UserOptionalDefaultsSchema } from '@youni/database/zod'\n\nimport { createZodDto } from 'nestjs-zod'\n\nimport { z } from 'zod'\n\nconst UserInputSchema = UserOptionalDefaultsSchema.extend({\n  phone: z.string().optional(),\n  remark: z.string().optional(),\n  desc: z.string().optional(),\n\n})\n\nexport class UserDto extends createZodDto(UserInputSchema) {}\n\nexport class UserUpdateDto extends createZodDto(UserInputSchema.partial()) {}\n\nexport class UserQueryDto extends createZodDto(\n  basePagerSchema\n    .extend({\n      keyword: z.string().optional(),\n      status: z.number().optional(),\n    }),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserFollowEvent.html":{"url":"classes/UserFollowEvent.html","title":"class - UserFollowEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserFollowEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/interact/events/user-follow.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                targetId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/modules/interact/events/user-follow.event.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/interact/events/user-follow.event.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/interact/events/user-follow.event.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserFollowEvent {\n  targetId: string\n  userId: string\n\n  public constructor(partial?: Partial) {\n    Object.assign(this, partial)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\n\n\nUserModule\n\nUserModule\n\nAdminEventsGateway  -->\n\nUserModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nUserModule->WebEventsGateway \n\n\n\n\n\nUserAbility\n\nUserAbility\n\nUserModule -->\n\nUserAbility->UserModule\n\n\n\n\n\nUserPublicService\n\nUserPublicService\n\nUserModule -->\n\nUserPublicService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserTrpcRouter\n\nUserTrpcRouter\n\nUserModule -->\n\nUserTrpcRouter->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserAbility\n                        \n                        \n                            UserPublicService\n                        \n                        \n                            UserService\n                        \n                        \n                            UserTrpcRouter\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminEventsGateway\n                        \n                        \n                            WebEventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Provider } from '@nestjs/common'\n\nimport { UserAbility } from './user.ability'\nimport { UserController } from './user.controller'\nimport { UserPublicService } from './user.public.service'\nimport { UserService } from './user.service'\nimport { UserTrpcRouter } from './user.trpc'\n\nconst providers: Provider[] = [\n  UserService,\n  UserPublicService,\n  UserTrpcRouter,\n  UserAbility,\n]\n\n@Module({\n  controllers: [UserController],\n  providers,\n  exports: providers,\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotePagerDto.html":{"url":"classes/UserNotePagerDto.html","title":"class - UserNotePagerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotePagerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/note/note.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(basePagerSchema.extend({\n  userId: SnowflakeIdSchema,\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SnowflakeIdSchema } from '@server/common/dto/id.dto'\nimport { ImageSchema } from '@server/common/dto/image.dto'\nimport { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { defaultSchemaOmit } from '@server/utils/zod.util'\nimport { NoteOptionalDefaultsSchema } from '@youni/database/zod'\nimport { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const NoteInputSchema = NoteOptionalDefaultsSchema\n  .extend({\n    title: z.string().min(1, { message: '标题不能为空' }),\n    images: ImageSchema.array().min(1, { message: '至少需要一张图片' }),\n    publishTime: z.coerce.date().optional().nullable(),\n    tags: z.string().array().default([]),\n  })\n  .omit(defaultSchemaOmit)\n\nexport class NoteDto extends createZodDto(NoteInputSchema) { }\n\nexport class NoteUpdateDto extends createZodDto(NoteInputSchema.partial()) { }\n\nexport class NotePagerDto extends createZodDto(basePagerSchema.extend({\n})) { }\n\nexport class UserNotePagerDto extends createZodDto(basePagerSchema.extend({\n  userId: SnowflakeIdSchema,\n})) { }\n\nexport class NoteSearchDto extends createZodDto(basePagerSchema.extend({\n  keyword: z.string().min(1, { message: '关键字不能为空' }),\n  sortBy: z.string().optional(),\n  sortOrder: z.string()\n    .or(z.enum(['asc', 'desc']))\n    .optional(),\n})) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPasswordDto.html":{"url":"classes/UserPasswordDto.html","title":"class - UserPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/password.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(z.object({\n  id: z.string(),\n  password: strongPasswordSchema,\n}))\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { createZodDto } from 'nestjs-zod'\nimport { z } from 'zod'\n\nexport const strongPasswordSchema = z.string().refine((value) => {\n  const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d\\W_]{6,}$/\n  return strongPasswordRegex.test(value)\n}, { message: '密码必须包含大小写字母和数字，且长度不能小于6位' })\n\nexport class PasswordUpdateDto extends createZodDto(z.object({\n  oldPassword: strongPasswordSchema,\n  newPassword: strongPasswordSchema,\n}).refine(data => data.oldPassword !== data.newPassword, {\n  message: '新密码不能与旧密码相同',\n})) {}\n\nexport class UserPasswordDto extends createZodDto(z.object({\n  id: z.string(),\n  password: strongPasswordSchema,\n})) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserPublicService.html":{"url":"injectables/UserPublicService.html","title":"injectable - UserPublicService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserPublicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.public.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUserByIds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis, prisma: ExtendedPrismaClient)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.public.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        ExtendedPrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.public.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserByIds\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByIds(ids: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.public.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ids\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRedis } from '@liaoliaots/nestjs-redis'\nimport { Injectable } from '@nestjs/common'\n\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '@server/shared/database/prisma.extension'\n\nimport { resourceNotFoundWrapper } from '@server/utils/prisma.util'\nimport Redis from 'ioredis'\n\nimport { UserSelect } from './user.constant'\n\n@Injectable()\nexport class UserPublicService {\n  constructor(\n    @InjectRedis()\n    private readonly redis: Redis,\n    @InjectPrismaClient()\n    private readonly prisma: ExtendedPrismaClient,\n\n  ) { }\n\n  async getUserById(id: string) {\n    return await this.prisma.user.findUniqueOrThrow({\n      where: {\n        id,\n      },\n      select: {\n        ...UserSelect,\n        gender: true,\n        yoId: true,\n      },\n    }).catch(resourceNotFoundWrapper(\n      new BizException(ErrorCodeEnum.UserNotFound),\n    ))\n  }\n\n  async getUserByIds(ids: string[]) {\n    return await this.prisma.user.findMany({\n      where: {\n        id: { in: ids },\n      },\n      select: {\n        ...UserSelect,\n      },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        createZodDto(\n  basePagerSchema\n    .extend({\n      keyword: z.string().optional(),\n      status: z.number().optional(),\n    }),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { UserOptionalDefaultsSchema } from '@youni/database/zod'\n\nimport { createZodDto } from 'nestjs-zod'\n\nimport { z } from 'zod'\n\nconst UserInputSchema = UserOptionalDefaultsSchema.extend({\n  phone: z.string().optional(),\n  remark: z.string().optional(),\n  desc: z.string().optional(),\n\n})\n\nexport class UserDto extends createZodDto(UserInputSchema) {}\n\nexport class UserUpdateDto extends createZodDto(UserInputSchema.partial()) {}\n\nexport class UserQueryDto extends createZodDto(\n  basePagerSchema\n    .extend({\n      keyword: z.string().optional(),\n      status: z.number().optional(),\n    }),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                forceUpdatePassword\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis, prisma: ExtendedPrismaClient, appConfig: IAppConfig)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        ExtendedPrismaClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appConfig\n                                                  \n                                                        \n                                                                        IAppConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined: UserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            UserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(userIds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forceUpdatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forceUpdatePassword(userId: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginate(dto: UserQueryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(undefined: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, undefined: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(userId: string, dto: PasswordUpdateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            PasswordUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(userId: string, info: UpdateProfileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            UpdateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRedis } from '@liaoliaots/nestjs-redis'\nimport { Inject, Injectable } from '@nestjs/common'\n\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { AppConfig, IAppConfig } from '@server/config'\nimport { ErrorCodeEnum } from '@server/constants/error-code.constant'\n\nimport { RegisterDto } from '@server/modules/auth/auth.dto'\n\nimport { ExtendedPrismaClient, InjectPrismaClient } from '@server/shared/database/prisma.extension'\n\nimport { resourceNotFoundWrapper } from '@server/utils/prisma.util'\nimport { compareSync, hashSync } from 'bcrypt'\nimport Redis from 'ioredis'\nimport { isEmpty } from 'lodash'\n\nimport { Role } from '../auth/auth.constant'\nimport { UpdateProfileDto } from '../auth/dtos/account.dto'\n\nimport { PasswordUpdateDto } from './dto/password.dto'\nimport { UserDto, UserQueryDto } from './dto/user.dto'\nimport { UserProfileSelect } from './user.constant'\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRedis()\n    private readonly redis: Redis,\n    @InjectPrismaClient()\n    private readonly prisma: ExtendedPrismaClient,\n    @Inject(AppConfig.KEY) private readonly appConfig: IAppConfig,\n  ) { }\n\n  async getUserById(id: string) {\n    return await this.prisma.user.findUniqueOrThrow({ where: { id } })\n      .catch(resourceNotFoundWrapper(new BizException(ErrorCodeEnum.UserNotFound)))\n  }\n\n  async getUserByUsername(username: string) {\n    return await this.prisma.user.findUnique({ where: { username } })\n  }\n\n  async getUserByEmail(email: string) {\n    return await this.prisma.user.findUnique({ where: { email } })\n  }\n\n  async getProfile(userId: string) {\n    return await this.prisma.user\n      .findUniqueOrThrow({\n        select: {\n          ...UserProfileSelect,\n        },\n        where: {\n          id: userId,\n        },\n      })\n      .catch(resourceNotFoundWrapper(new BizException(ErrorCodeEnum.UserNotFound)))\n  }\n\n  async updateProfile(userId: string, info: UpdateProfileDto) {\n    const user = await this.prisma.user.update({\n      where: { id: userId },\n      data: {\n        ...(info.nickname && { nickname: info.nickname }),\n        ...(info.avatar && { avatar: info.avatar }),\n        ...(info.phone && { phone: info.phone }),\n      },\n    })\n\n    return user\n  }\n\n  async updatePassword(userId: string, dto: PasswordUpdateDto): Promise {\n    const { oldPassword, newPassword } = dto\n    const user = await this.getUserById(userId)\n\n    const isSamePassword = compareSync(oldPassword, user.password)\n\n    // 原密码不一致，不允许更改\n    if (!isSamePassword)\n      throw new BizException(ErrorCodeEnum.PasswordMismatch)\n\n    await this.prisma.user.update({\n      where: { id: userId },\n      data: {\n        password: hashSync(newPassword, 10),\n      },\n    })\n  }\n\n  async forceUpdatePassword(userId: string, password: string): Promise {\n    const user = await this.getUserById(userId)\n\n    await this.prisma.user.update({\n      where: { id: userId },\n      data: {\n        password: hashSync(password, 10),\n      },\n    })\n  }\n\n  async create({\n    username,\n    password,\n    ...data\n  }: UserDto) {\n    const exist = await this.prisma.user.findFirst({ where: { username } })\n    if (!isEmpty(exist))\n      return exist\n\n    const user = await this.prisma.user.create({\n      data: {\n        username,\n        password: hashSync(password, 10),\n        ...data,\n        role: Role.User,\n      },\n    })\n\n    return user\n  }\n\n  async update(\n    id: string,\n    { password, status, ...data }: Partial,\n  ) {\n    await this.prisma.$transaction(async (tx) => {\n      if (password)\n        await this.forceUpdatePassword(id, password)\n\n      await tx.user.update({\n        where: { id },\n        data: {\n          ...data,\n          status,\n        },\n      })\n    })\n  }\n\n  async delete(userIds: string[]): Promise {\n    await this.prisma.user.deleteMany({\n      where: {\n        id: { in: userIds },\n        role: { not: Role.Admin },\n      },\n    })\n  }\n\n  async paginate(dto: UserQueryDto) {\n    const {\n      page,\n      limit,\n      keyword,\n      status,\n    } = dto\n\n    return await this.prisma.user.paginate({\n      where: {\n        ...(keyword && { username: { contains: keyword } }),\n        ...(keyword && { nickname: { contains: keyword } }),\n        ...(keyword && { email: { contains: keyword } }),\n        ...(status && { status }),\n      },\n    }).withPages({\n      page,\n      limit,\n      includePageCount: true,\n    })\n  }\n\n  async register({ username, type, ...data }: RegisterDto) {\n    const exists = await this.prisma.user.exists({\n      where: { username },\n    })\n\n    if (exists)\n      throw new BizException('系统用户已存在')\n\n    return await this.prisma.$transaction(async (tx) => {\n      const password = hashSync(data.password, 10)\n\n      const avatar = `${this.appConfig.baseUrl}/static/avatar/default.png`\n      const nickname = username\n\n      const user = await tx.user.create({\n        data: {\n          ...data,\n          username,\n          password,\n          nickname,\n          avatar,\n          status: 1,\n          role: Role.User,\n        },\n      })\n\n      return user\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserTrpcRouter.html":{"url":"injectables/UserTrpcRouter.html","title":"injectable - UserTrpcRouter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserTrpcRouter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.trpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createRouter\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(trpcService: TRPCService, userService: UserService, userPublicService: UserPublicService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.trpc.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trpcService\n                                                  \n                                                        \n                                                                        TRPCService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userPublicService\n                                                  \n                                                        \n                                                                        UserPublicService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createRouter\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRouter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.trpc.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.trpc.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/user/user.trpc.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common'\n\nimport { IdDto } from '@server/common/dto/id.dto'\nimport { TRPCRouter } from '@server/shared/trpc/trpc.decorator'\nimport { defineTrpcRouter } from '@server/shared/trpc/trpc.helper'\nimport { TRPCService } from '@server/shared/trpc/trpc.service'\n\nimport { UserPublicService } from './user.public.service'\nimport { UserService } from './user.service'\n\n@TRPCRouter()\n@Injectable()\nexport class UserTrpcRouter implements OnModuleInit {\n  private router: ReturnType\n\n  constructor(\n    private readonly trpcService: TRPCService,\n    private readonly userService: UserService,\n    private readonly userPublicService: UserPublicService,\n  ) { }\n\n  onModuleInit() {\n    this.router = this.createRouter()\n  }\n\n  private createRouter() {\n    const procedureAuth = this.trpcService.procedureAuth\n    return defineTrpcRouter('user', {\n      byId: procedureAuth\n        .input(IdDto.schema)\n        .query(async (opt) => {\n          const { input, ctx: { user } } = opt\n          const { id } = input\n\n          return await this.userPublicService.getUserById(id)\n        }),\n      profile: procedureAuth.query(async (opt) => {\n        const { ctx: { user } } = opt\n\n        return await this.userService.getProfile(user.id)\n      }),\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserUpdateDto.html":{"url":"classes/UserUpdateDto.html","title":"class - UserUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            createZodDto(UserInputSchema.partial())\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { basePagerSchema } from '@server/common/dto/pager.dto'\nimport { UserOptionalDefaultsSchema } from '@youni/database/zod'\n\nimport { createZodDto } from 'nestjs-zod'\n\nimport { z } from 'zod'\n\nconst UserInputSchema = UserOptionalDefaultsSchema.extend({\n  phone: z.string().optional(),\n  remark: z.string().optional(),\n  desc: z.string().optional(),\n\n})\n\nexport class UserDto extends createZodDto(UserInputSchema) {}\n\nexport class UserUpdateDto extends createZodDto(UserInputSchema.partial()) {}\n\nexport class UserQueryDto extends createZodDto(\n  basePagerSchema\n    .extend({\n      keyword: z.string().optional(),\n      status: z.number().optional(),\n    }),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ViewService.html":{"url":"injectables/ViewService.html","title":"injectable - ViewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ViewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/interact/services/view.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addView\n                            \n                            \n                                    Async\n                                countViews\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: Redis)\n                    \n                \n                        \n                            \n                                Defined in src/modules/interact/services/view.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addView\n                        \n                    \n                \n            \n            \n                \n                        \n                    addView(type: InteractType, itemId: number, uid: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/view.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            InteractType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                itemId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                uid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        countViews\n                        \n                    \n                \n            \n            \n                \n                        \n                    countViews(type: InteractType, itemId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/interact/services/view.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            InteractType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                itemId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRedis } from '@liaoliaots/nestjs-redis'\nimport { Injectable } from '@nestjs/common'\nimport { getRedisKey } from '@server/utils/redis.util'\nimport Redis from 'ioredis'\n\nimport { InteractType } from '../interact.constant'\n\n@Injectable()\nexport class ViewService {\n  constructor(@InjectRedis() private redis: Redis) {}\n\n  async addView(type: InteractType, itemId: number, uid: number): Promise {\n    await this.redis.pfadd(getRedisKey(`${type}:${itemId}:views`), uid)\n  }\n\n  async countViews(type: InteractType, itemId: number): Promise {\n    return +await this.redis.pfcount(getRedisKey(`${type}:${itemId}:views`))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebEventsGateway.html":{"url":"classes/WebEventsGateway.html","title":"class - WebEventsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebEventsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/socket/events/web.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Protected\n                                _server\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    server\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, tokenService: TokenService, cacheService: CacheService)\n                    \n                \n                        \n                            \n                                Defined in src/socket/events/web.gateway.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tokenService\n                                                  \n                                                        \n                                                                        TokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheService\n                                                  \n                                                        \n                                                                        CacheService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        _server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/socket/events/web.gateway.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        server\n                    \n                \n\n                \n                    \n                        getserver()\n                    \n                \n                            \n                                \n                                    Defined in src/socket/events/web.gateway.ts:32\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt'\nimport {\n  GatewayMetadata,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets'\n\nimport { TokenService } from '@server/modules/auth/services/token.service'\nimport { CacheService } from '@server/shared/cache/cache.service'\nimport { Server } from 'socket.io'\n\nimport { createAuthGateway } from '../shared/auth.gateway'\n\nconst AuthGateway = createAuthGateway({ namespace: 'web' })\n@WebSocketGateway({ namespace: 'web' })\nexport class WebEventsGateway\n  extends AuthGateway\n  implements OnGatewayConnection, OnGatewayDisconnect {\n  constructor(\n    protected readonly jwtService: JwtService,\n    protected readonly tokenService: TokenService,\n    private readonly cacheService: CacheService,\n  ) {\n    super(jwtService, tokenService, cacheService)\n  }\n\n  @WebSocketServer()\n  protected _server: Server\n\n  get server() {\n    return this._server\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^6.5.0\n        \n            @casl/prisma : ^1.4.1\n        \n            @fastify/cookie : ^9.1.0\n        \n            @fastify/multipart : ^8.0.0\n        \n            @fastify/static : ^6.12.0\n        \n            @liaoliaots/nestjs-redis : ^9.0.5\n        \n            @nestjs-modules/mailer : ^1.9.1\n        \n            @nestjs/axios : ^3.0.1\n        \n            @nestjs/bull : ^10.0.1\n        \n            @nestjs/cache-manager : ^2.1.1\n        \n            @nestjs/common : ^10.3.1\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.3.1\n        \n            @nestjs/event-emitter : ^2.0.3\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-fastify : ^10.3.1\n        \n            @nestjs/platform-socket.io : ^10.3.1\n        \n            @nestjs/schedule : ^4.0.0\n        \n            @nestjs/swagger : ^7.1.15\n        \n            @nestjs/terminus : ^10.1.1\n        \n            @nestjs/throttler : ^5.0.1\n        \n            @nestjs/websockets : ^10.3.1\n        \n            @socket.io/redis-adapter : ^8.2.1\n        \n            @socket.io/redis-emitter : ^5.1.0\n        \n            @trpc/server : 10.45.1\n        \n            @types/lodash : ^4.14.201\n        \n            @youni/database : workspace:*\n        \n            axios : ^1.6.1\n        \n            bcrypt : ^5.1.1\n        \n            bull : ^4.11.4\n        \n            cache-manager : ^5.2.4\n        \n            cache-manager-ioredis-yet : ^1.2.2\n        \n            chalk : ^5.3.0\n        \n            cron : ^3.1.6\n        \n            cron-parser : ^4.9.0\n        \n            crypto-js : ^4.2.0\n        \n            dayjs : ^1.11.10\n        \n            dotenv : 16.3.1\n        \n            dotenv-expand : ^10.0.0\n        \n            fastify : ^4.24.3\n        \n            fastify-multer : ^2.0.3\n        \n            handlebars : ^4.7.8\n        \n            helmet : ^7.1.0\n        \n            ioredis : ^5.3.2\n        \n            lodash : ^4.17.21\n        \n            mysql : ^2.18.1\n        \n            nanoid : ^3.3.6\n        \n            nestjs-prisma : ^0.22.0\n        \n            nestjs-zod : 3.0.0\n        \n            nodemailer : ^6.9.7\n        \n            passport : ^0.6.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pluralize : ^8.0.0\n        \n            prisma-extension-pagination : ^0.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^5.0.5\n        \n            rxjs : ^7.8.1\n        \n            snakecase-keys : ^5.5.0\n        \n            socket.io : ^4.7.2\n        \n            stacktrace-js : ^2.0.2\n        \n            svg-captcha : ^1.4.0\n        \n            systeminformation : ^5.21.16\n        \n            trpc-playground : ^1.0.4\n        \n            ua-parser-js : ^1.0.37\n        \n            unplugin-swc : ^1.4.4\n        \n            winston : ^3.11.0\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zod : 3.22.4\n        \n            zx-cjs : 7.0.7-0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (src/.../ability.class.ts)\n                        \n                        \n                            BusinessEvents   (src/.../business-event.constant.ts)\n                        \n                        \n                            CommentEvents   (src/.../comment.constant.ts)\n                        \n                        \n                            CommentRefType   (src/.../comment.constant.ts)\n                        \n                        \n                            ContentTypeEnum   (src/.../response.constant.ts)\n                        \n                        \n                            ErrorCodeEnum   (src/.../error-code.constant.ts)\n                        \n                        \n                            EventBusEvents   (src/.../event-bus.constant.ts)\n                        \n                        \n                            FileTypeEnum   (src/.../file.constant.ts)\n                        \n                        \n                            InteractEvents   (src/.../interact.constant.ts)\n                        \n                        \n                            InteractType   (src/.../interact.constant.ts)\n                        \n                        \n                            LogLevel   (src/.../logger.service.ts)\n                        \n                        \n                            NoteEvents   (src/.../note.constant.ts)\n                        \n                        \n                            NoteType   (src/.../note.constant.ts)\n                        \n                        \n                            QueueProcess   (src/.../interact.constant.ts)\n                        \n                        \n                            RedisKeys   (src/.../cache.constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/casl/ability.class.ts\n    \n        \n            \n                \n                    \n                        \n                        Action\n                    \n                \n                        \n                            \n                                 Manage\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Read\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    src/socket/business-event.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        BusinessEvents\n                    \n                \n                        \n                            \n                                 GATEWAY_CONNECT\n                            \n                        \n                        \n                            \n                                Value : GATEWAY_CONNECT\n                            \n                        \n                        \n                            \n                                 GATEWAY_DISCONNECT\n                            \n                        \n                        \n                            \n                                Value : GATEWAY_DISCONNECT\n                            \n                        \n                        \n                            \n                                 AUTH_FAILED\n                            \n                        \n                        \n                            \n                                Value : AUTH_FAILED\n                            \n                        \n                        \n                            \n                                 USER_ONLINE\n                            \n                        \n                        \n                            \n                                Value : USER_ONLINE\n                            \n                        \n                        \n                            \n                                 USER_OFFLINE\n                            \n                        \n                        \n                            \n                                Value : USER_OFFLINE\n                            \n                        \n                        \n                            \n                                 USER_KICK\n                            \n                        \n                        \n                            \n                                Value : USER_KICK\n                            \n                        \n                        \n                            \n                                 CHAT_MESSAGE\n                            \n                        \n                        \n                            \n                                Value : CHAT_MESSAGE\n                            \n                        \n            \n        \n\n    src/modules/comment/comment.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        CommentEvents\n                    \n                \n                        \n                            \n                                 CommentLike\n                            \n                        \n                        \n                            \n                                Value : comment.like\n                            \n                        \n                        \n                            \n                                 CommentDislike\n                            \n                        \n                        \n                            \n                                Value : comment.dislike\n                            \n                        \n                        \n                            \n                                 CommentCreate\n                            \n                        \n                        \n                            \n                                Value : comment.create\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        CommentRefType\n                    \n                \n                        \n                            \n                                 Note\n                            \n                        \n                        \n                            \n                                Value : Note\n                            \n                        \n            \n        \n\n    src/constants/response.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        ContentTypeEnum\n                    \n                \n                        \n                            \n                                 JSON\n                            \n                        \n                        \n                            \n                                Value : application/json;charset=UTF-8\n                            \n                        \n                        \n                            \n                                 FORM_URLENCODED\n                            \n                        \n                        \n                            \n                                Value : application/x-www-form-urlencoded;charset=UTF-8\n                            \n                        \n                        \n                            \n                                 FORM_DATA\n                            \n                        \n                        \n                            \n                                Value : multipart/form-data;charset=UTF-8\n                            \n                        \n            \n        \n\n    src/constants/error-code.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        ErrorCodeEnum\n                    \n                \n                        \n                            \n                                 Default\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 ServerError\n                            \n                        \n                        \n                            \n                                Value : 500\n                            \n                        \n                        \n                            \n                                 JWTInvalid\n                            \n                        \n                        \n                            \n                                Value : 1103\n                            \n                        \n                        \n                            \n                                 AuthFail\n                            \n                        \n                        \n                            \n                                Value : 1000\n                            \n                        \n                        \n                            \n                                 NoPermission\n                            \n                        \n                        \n                            \n                                Value : 1001\n                            \n                        \n                        \n                            \n                                 ResourceNotFound\n                            \n                        \n                        \n                            \n                                Value : 1102\n                            \n                        \n                        \n                            \n                                 RequestTooFast\n                            \n                        \n                        \n                            \n                                Value : 1200\n                            \n                        \n                        \n                            \n                                 UserNotFound\n                            \n                        \n                        \n                            \n                                Value : 2001\n                            \n                        \n                        \n                            \n                                 UserExist\n                            \n                        \n                        \n                            \n                                Value : 2002\n                            \n                        \n                        \n                            \n                                 PasswordMismatch\n                            \n                        \n                        \n                            \n                                Value : 2003\n                            \n                        \n                        \n                            \n                                 VerificationCodeError\n                            \n                        \n                        \n                            \n                                Value : 3000\n                            \n                        \n                        \n                            \n                                 VerificationCodeSendFail\n                            \n                        \n                        \n                            \n                                Value : 3001\n                            \n                        \n                        \n                            \n                                 MaximumFiveVerificationCodesPerDay\n                            \n                        \n                        \n                            \n                                Value : 3002\n                            \n                        \n                        \n                            \n                                 NoteNotFound\n                            \n                        \n                        \n                            \n                                Value : 4001\n                            \n                        \n                        \n                            \n                                 CommentNotFound\n                            \n                        \n                        \n                            \n                                Value : 4002\n                            \n                        \n                        \n                            \n                                 NoUserFollowing\n                            \n                        \n                        \n                            \n                                Value : 5001\n                            \n                        \n            \n        \n\n    src/constants/event-bus.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        EventBusEvents\n                    \n                \n                        \n                            \n                                 EmailInit\n                            \n                        \n                        \n                            \n                                Value : email.init\n                            \n                        \n                        \n                            \n                                 TokenExpired\n                            \n                        \n                        \n                            \n                                Value : token.expired\n                            \n                        \n                        \n                            \n                                 SystemException\n                            \n                        \n                        \n                            \n                                Value : system.exception\n                            \n                        \n                        \n                            \n                                 ConfigChanged\n                            \n                        \n                        \n                            \n                                Value : config.changed\n                            \n                        \n            \n        \n\n    src/modules/file/file.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        FileTypeEnum\n                    \n                \n                        \n                            \n                                 icon\n                            \n                        \n                        \n                            \n                                Value : icon\n                            \n                        \n                        \n                            \n                                 photo\n                            \n                        \n                        \n                            \n                                Value : photo\n                            \n                        \n                        \n                            \n                                 file\n                            \n                        \n                        \n                            \n                                Value : file\n                            \n                        \n                        \n                            \n                                 avatar\n                            \n                        \n                        \n                            \n                                Value : avatar\n                            \n                        \n                        \n                            \n                                 video\n                            \n                        \n                        \n                            \n                                Value : video\n                            \n                        \n            \n        \n\n    src/modules/interact/interact.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        InteractEvents\n                    \n                \n                        \n                            \n                                 UserFollow\n                            \n                        \n                        \n                            \n                                Value : user.follow\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        InteractType\n                    \n                \n                        \n                            \n                                 Note\n                            \n                        \n                        \n                            \n                                Value : Note\n                            \n                        \n                        \n                            \n                                 Comment\n                            \n                        \n                        \n                            \n                                Value : Comment\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        QueueProcess\n                    \n                \n                        \n                            \n                                 UpdateItemCount\n                            \n                        \n                        \n                            \n                                Value : UpdateItemCount\n                            \n                        \n                        \n                            \n                                 UpdateCommentCount\n                            \n                        \n                        \n                            \n                                Value : UpdateCommentCount\n                            \n                        \n            \n        \n\n    src/shared/logger/logger.service.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                Value : warn\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                Value : info\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                Value : debug\n                            \n                        \n                        \n                            \n                                 VERBOSE\n                            \n                        \n                        \n                            \n                                Value : verbose\n                            \n                        \n            \n        \n\n    src/modules/note/note.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        NoteEvents\n                    \n                \n                        \n                            \n                                 NoteLike\n                            \n                        \n                        \n                            \n                                Value : note.like\n                            \n                        \n                        \n                            \n                                 NoteDislike\n                            \n                        \n                        \n                            \n                                Value : note.dislike\n                            \n                        \n                        \n                            \n                                 NoteCollect\n                            \n                        \n                        \n                            \n                                Value : note.collect\n                            \n                        \n                        \n                            \n                                 NoteUncollect\n                            \n                        \n                        \n                            \n                                Value : note.uncollect\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        NoteType\n                    \n                \n                        \n                            \n                                 Follow\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n                        \n                            \n                                 Recommend\n                            \n                        \n                        \n                            \n                                Value : recommend\n                            \n                        \n                        \n                            \n                                 Video\n                            \n                        \n                        \n                            \n                                Value : Video\n                            \n                        \n                        \n                            \n                                 Activity\n                            \n                        \n                        \n                            \n                                Value : activity\n                            \n                        \n                        \n                            \n                                 News\n                            \n                        \n                        \n                            \n                                Value : news\n                            \n                        \n            \n        \n\n    src/constants/cache.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        RedisKeys\n                    \n                \n                        \n                            \n                                 JWTStore\n                            \n                        \n                        \n                            \n                                Value : jwt_store\n                            \n                        \n                        \n                            \n                                 CaptchaStore\n                            \n                        \n                        \n                            \n                                Value : captcha_store\n                            \n                        \n                        \n                            \n                                 CacheGet\n                            \n                        \n                        \n                            \n                                Value : cache_get\n                            \n                        \n                        \n                            \n                                 AccessIp\n                            \n                        \n                        \n                            \n                                Value : access_ip\n                            \n                        \n                        \n                            \n                                 Like\n                            \n                        \n                        \n                            \n                                Value : like\n                            \n                        \n                        \n                            \n                                 View\n                            \n                        \n                        \n                            \n                                Value : view\n                            \n                        \n                        \n                            \n                                 Order\n                            \n                        \n                        \n                            \n                                Value : order\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CacheModule\n\n\n\ncluster_CacheModule_exports\n\n\n\ncluster_CacheModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CollectionModule\n\n\n\ncluster_CollectionModule_providers\n\n\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\ncluster_FileModule\n\n\n\ncluster_FileModule_providers\n\n\n\ncluster_HelperModule\n\n\n\ncluster_HelperModule_imports\n\n\n\ncluster_HelperModule_exports\n\n\n\ncluster_HelperModule_providers\n\n\n\ncluster_HistoryModule\n\n\n\ncluster_HistoryModule_providers\n\n\n\ncluster_InteractModule\n\n\n\ncluster_InteractModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_MailerModule\n\n\n\ncluster_MailerModule_providers\n\n\n\ncluster_NoteModule\n\n\n\ncluster_NoteModule_providers\n\n\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_TodoModule\n\n\n\ncluster_TodoModule_providers\n\n\n\ncluster_TRPCModule\n\n\n\ncluster_TRPCModule_exports\n\n\n\ncluster_TRPCModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nSocketModule\n\nSocketModule\n\nSocketModule -->\n\nAuthModule->SocketModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAdminEventsGateway \n\nAdminEventsGateway \n\nAdminEventsGateway  -->\n\nAuthModule->AdminEventsGateway \n\n\n\n\n\nWebEventsGateway \n\nWebEventsGateway \n\nWebEventsGateway  -->\n\nAuthModule->WebEventsGateway \n\n\n\n\n\nBullModule\n\nBullModule\n\n\n\nInteractModule\n\nInteractModule\n\nInteractModule -->\n\nBullModule->InteractModule\n\n\n\nAppModule -->\n\nBullModule->AppModule\n\n\n\n\n\nCacheModule\n\nCacheModule\n\nAppModule -->\n\nCacheModule->AppModule\n\n\n\n\n\nCacheService \n\nCacheService \n\nCacheService  -->\n\nCacheModule->CacheService \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nAbilityService \n\nAbilityService \n\nAbilityService  -->\n\nCaslModule->AbilityService \n\n\n\n\n\nCollectionModule\n\nCollectionModule\n\n\n\nNoteModule\n\nNoteModule\n\nNoteModule -->\n\nCollectionModule->NoteModule\n\n\n\nAppModule -->\n\nCollectionModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nCollectionModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nCollectionModule->WebEventsGateway \n\n\n\n\n\nCommentModule\n\nCommentModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nCommentModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nCommentModule->WebEventsGateway \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nDatabaseModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nDatabaseModule->WebEventsGateway \n\n\n\n\n\nFileModule\n\nFileModule\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nFileModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nFileModule->WebEventsGateway \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHelperModule\n\nHelperModule\n\nAppModule -->\n\nHelperModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nHelperModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nHelperModule->WebEventsGateway \n\n\n\n\n\nMailerModule \n\nMailerModule \n\nMailerModule  -->\n\nHelperModule->MailerModule \n\n\n\n\n\nHistoryModule\n\nHistoryModule\n\nAppModule -->\n\nHistoryModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nHistoryModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nHistoryModule->WebEventsGateway \n\n\n\nCommentModule -->\n\nInteractModule->CommentModule\n\n\n\nNoteModule -->\n\nInteractModule->NoteModule\n\n\n\nAppModule -->\n\nInteractModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nInteractModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nInteractModule->WebEventsGateway \n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nMyLogger \n\nMyLogger \n\nMyLogger  -->\n\nLoggerModule->MyLogger \n\n\n\nAppModule -->\n\nNoteModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nNoteModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nNoteModule->WebEventsGateway \n\n\n\n\n\nNoteTagModule\n\nNoteTagModule\n\nAppModule -->\n\nNoteTagModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nNoteTagModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nNoteTagModule->WebEventsGateway \n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nNotificationModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nNotificationModule->WebEventsGateway \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nRedisModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nRedisModule->WebEventsGateway \n\n\n\nAppModule -->\n\nSocketModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nSocketModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nSocketModule->WebEventsGateway \n\n\n\n\n\nTRPCModule\n\nTRPCModule\n\nAppModule -->\n\nTRPCModule->AppModule\n\n\n\n\n\nTRPCService \n\nTRPCService \n\nTRPCService  -->\n\nTRPCModule->TRPCService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nCollectionModule -->\n\nUserModule->CollectionModule\n\n\n\nCommentModule -->\n\nUserModule->CommentModule\n\n\n\nInteractModule -->\n\nUserModule->InteractModule\n\n\n\nNoteModule -->\n\nUserModule->NoteModule\n\n\n\nNotificationModule -->\n\nUserModule->NotificationModule\n\n\n\nSocketModule -->\n\nUserModule->SocketModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nAdminEventsGateway  -->\n\nUserModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nUserModule->WebEventsGateway \n\n\n\n\n\nCaptchaModule\n\nCaptchaModule\n\nAuthModule -->\n\nCaptchaModule->AuthModule\n\n\n\nAdminEventsGateway  -->\n\nCaptchaModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nCaptchaModule->WebEventsGateway \n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCacheService\n\nCacheService\n\nCacheModule -->\n\nCacheService->CacheModule\n\n\n\n\n\nAbilityService\n\nAbilityService\n\nCaslModule -->\n\nAbilityService->CaslModule\n\n\n\n\n\nCollectionAbility\n\nCollectionAbility\n\nCollectionModule -->\n\nCollectionAbility->CollectionModule\n\n\n\n\n\nCollectionService\n\nCollectionService\n\nCollectionModule -->\n\nCollectionService->CollectionModule\n\n\n\n\n\nCollectionTrpcRouter\n\nCollectionTrpcRouter\n\nCollectionModule -->\n\nCollectionTrpcRouter->CollectionModule\n\n\n\n\n\nCommentAbility\n\nCommentAbility\n\nCommentModule -->\n\nCommentAbility->CommentModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\nCommentTrpcRouter\n\nCommentTrpcRouter\n\nCommentModule -->\n\nCommentTrpcRouter->CommentModule\n\n\n\n\n\nFileService\n\nFileService\n\nFileModule -->\n\nFileService->FileModule\n\n\n\n\n\nMailerModule\n\nMailerModule\n\nHelperModule -->\n\nMailerModule->HelperModule\n\n\n\nAdminEventsGateway  -->\n\nMailerModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nMailerModule->WebEventsGateway \n\n\n\n\n\nCronService\n\nCronService\n\nHelperModule -->\n\nCronService->HelperModule\n\n\n\n\n\nHistoryService\n\nHistoryService\n\nHistoryModule -->\n\nHistoryService->HistoryModule\n\n\n\n\n\nHistoryTrpcRouter\n\nHistoryTrpcRouter\n\nHistoryModule -->\n\nHistoryTrpcRouter->HistoryModule\n\n\n\n\n\nCountingService\n\nCountingService\n\nInteractModule -->\n\nCountingService->InteractModule\n\n\n\n\n\nFollowService\n\nFollowService\n\nInteractModule -->\n\nFollowService->InteractModule\n\n\n\n\n\nInteractListener\n\nInteractListener\n\nInteractModule -->\n\nInteractListener->InteractModule\n\n\n\n\n\nInteractTrpcRouter\n\nInteractTrpcRouter\n\nInteractModule -->\n\nInteractTrpcRouter->InteractModule\n\n\n\n\n\nLikeService\n\nLikeService\n\nInteractModule -->\n\nLikeService->InteractModule\n\n\n\n\n\nViewService\n\nViewService\n\nInteractModule -->\n\nViewService->InteractModule\n\n\n\n\n\nMyLogger\n\nMyLogger\n\nLoggerModule -->\n\nMyLogger->LoggerModule\n\n\n\n\n\nMailerService\n\nMailerService\n\nMailerModule -->\n\nMailerService->MailerModule\n\n\n\n\n\nNoteAbility\n\nNoteAbility\n\nNoteModule -->\n\nNoteAbility->NoteModule\n\n\n\n\n\nNoteListener\n\nNoteListener\n\nNoteModule -->\n\nNoteListener->NoteModule\n\n\n\n\n\nNotePublicService\n\nNotePublicService\n\nNoteModule -->\n\nNotePublicService->NoteModule\n\n\n\n\n\nNoteService\n\nNoteService\n\nNoteModule -->\n\nNoteService->NoteModule\n\n\n\n\n\nNoteTrpcRouter\n\nNoteTrpcRouter\n\nNoteModule -->\n\nNoteTrpcRouter->NoteModule\n\n\n\n\n\nNotifactionTrpcRouter\n\nNotifactionTrpcRouter\n\nNotificationModule -->\n\nNotifactionTrpcRouter->NotificationModule\n\n\n\n\n\nNotificationListener\n\nNotificationListener\n\nNotificationModule -->\n\nNotificationListener->NotificationModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\nRedisPubSubService\n\nRedisPubSubService\n\nRedisModule -->\n\nRedisPubSubService->RedisModule\n\n\n\n\n\nTodoModule\n\nTodoModule\n\nAdminEventsGateway  -->\n\nTodoModule->AdminEventsGateway \n\n\n\nWebEventsGateway  -->\n\nTodoModule->WebEventsGateway \n\n\n\n\n\nTodoAbility\n\nTodoAbility\n\nTodoModule -->\n\nTodoAbility->TodoModule\n\n\n\n\n\nTodoService\n\nTodoService\n\nTodoModule -->\n\nTodoService->TodoModule\n\n\n\n\n\nTodoTrpcRouter\n\nTodoTrpcRouter\n\nTodoModule -->\n\nTodoTrpcRouter->TodoModule\n\n\n\n\n\nTRPCService\n\nTRPCService\n\nTRPCModule -->\n\nTRPCService->TRPCModule\n\n\n\n\n\nUserAbility\n\nUserAbility\n\nUserModule -->\n\nUserAbility->UserModule\n\n\n\n\n\nUserPublicService\n\nUserPublicService\n\nUserModule -->\n\nUserPublicService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserTrpcRouter\n\nUserTrpcRouter\n\nUserModule -->\n\nUserTrpcRouter->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        24 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    14 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    52 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    65 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BullModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CacheModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaptchaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CollectionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HelperModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HistoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InteractModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NoteTagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SocketModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TodoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TRPCModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/myError.html":{"url":"interfaces/myError.html","title":"interface - myError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  myError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/any-exception.filter.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common'\n\nimport { BizException } from '@server/common/exceptions/biz.exception'\nimport { ErrorCode, ErrorCodeEnum } from '@server/constants/error-code.constant'\n\nimport { isDev } from '@server/global/env'\nimport { FastifyReply, FastifyRequest } from 'fastify'\n\nimport { ResOp } from '../model/response.model'\n\ninterface myError {\n  readonly status: number\n  readonly statusCode?: number\n\n  readonly message?: string\n}\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  private readonly logger = new Logger(AllExceptionsFilter.name)\n\n  constructor() {\n    this.registerCatchAllExceptionsHook()\n  }\n\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp()\n    const request = ctx.getRequest()\n    const response = ctx.getResponse()\n\n    if (request.method === 'OPTIONS')\n      return response.status(HttpStatus.OK).send()\n\n    const url = request.raw.url!\n\n    const status\n      = exception instanceof HttpException\n        ? exception.getStatus()\n        : (exception as myError)?.status\n        || (exception as myError)?.statusCode\n        || HttpStatus.INTERNAL_SERVER_ERROR\n\n    let message\n      = (exception as any)?.response?.message\n      || (exception as myError)?.message\n      || `${exception}`\n\n    // 系统内部错误时\n    if (\n      status === HttpStatus.INTERNAL_SERVER_ERROR\n      && !(exception instanceof BizException)\n    ) {\n      Logger.error(exception, undefined, 'Catch')\n\n      // 生产环境下隐藏错误信息\n      if (!isDev)\n        message = ErrorCode[ErrorCodeEnum.ServerError]\n    }\n    else {\n      this.logger.warn(\n        `错误信息：(${status}) ${message} Path: ${decodeURI(url)}`,\n      )\n    }\n\n    const errorCode: number\n      = exception instanceof BizException ? exception.bizCode : status\n\n    // 返回基础响应结果\n    const resBody = new ResOp({\n      code: errorCode,\n      message,\n      ok: false,\n    })\n\n    response.status(status).type('application/json').send(resBody)\n  }\n\n  registerCatchAllExceptionsHook() {\n    process.on('unhandledRejection', (reason) => {\n      console.error('unhandledRejection: ', reason)\n    })\n\n    process.on('uncaughtException', (err) => {\n      console.error('uncaughtException: ', err)\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AllModelNames   (src/.../prisma.extension.ts)\n                        \n                        \n                            AppAbility   (src/.../ability.class.ts)\n                        \n                        \n                            AppRouter   (src/.../trpc.instance.ts)\n                        \n                        \n                            BaseType   (src/.../env.ts)\n                        \n                        \n                            BatchNotifyFunction   (src/.../schedule.util.ts)\n                        \n                        \n                            Caller   (src/.../trpc.instance.ts)\n                        \n                        \n                            ClassType   (test/.../create-service-unit.ts)\n                        \n                        \n                            Context   (src/.../trpc.context.ts)\n                        \n                        \n                            DefaultKeys   (src/.../zod.util.ts)\n                        \n                        \n                            ExtendedPrismaClient   (src/.../prisma.extension.ts)\n                        \n                        \n                            ExtractRouterType   (src/.../trpc.service.ts)\n                        \n                        \n                            FileType   (src/.../file.constant.ts)\n                        \n                        \n                            GqlContextType   (src/.../prisma-client-exception.filter.ts)\n                        \n                        \n                            IAppConfig   (src/.../app.config.ts)\n                        \n                        \n                            IDatabaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            IGoogleConfig   (src/.../google.config.ts)\n                        \n                        \n                            Image   (src/.../image.dto.ts)\n                        \n                        \n                            IMailerConfig   (src/.../mailer.config.ts)\n                        \n                        \n                            IRedisConfig   (src/.../redis.config.ts)\n                        \n                        \n                            ISecurityConfig   (src/.../security.config.ts)\n                        \n                        \n                            ISmsConfig   (src/.../sms.config.ts)\n                        \n                        \n                            LoginType   (src/.../auth.constant.ts)\n                        \n                        \n                            MapToRouterType   (src/.../trpc.service.ts)\n                        \n                        \n                            Meta   (src/.../trpc.meta.ts)\n                        \n                        \n                            ModelCreateInput   (src/.../prisma.extension.ts)\n                        \n                        \n                            ModelFindInput   (src/.../prisma.extension.ts)\n                        \n                        \n                            ModelInputData   (src/.../prisma.extension.ts)\n                        \n                        \n                            ModelInputWhere   (src/.../prisma.extension.ts)\n                        \n                        \n                            ModelName   (src/.../prisma.extension.ts)\n                        \n                        \n                            NotifyCallback   (src/.../schedule.util.ts)\n                        \n                        \n                            NotifyFunction   (src/.../schedule.util.ts)\n                        \n                        \n                            ObjWithKey   (src/.../trpc.helper.ts)\n                        \n                        \n                            Payload   (src/.../auth-user.decorator.ts)\n                        \n                        \n                            PolicyObject   (src/.../policy.decortor.ts)\n                        \n                        \n                            Prefix   (src/.../redis.util.ts)\n                        \n                        \n                            PrismaSubjects   (src/.../ability.class.ts)\n                        \n                        \n                            Projection   (src/.../zod.util.ts)\n                        \n                        \n                            RouterInputs   (src/.../trpc.instance.ts)\n                        \n                        \n                            RouterOutputs   (src/.../trpc.instance.ts)\n                        \n                        \n                            Routers   (src/.../trpc.service.ts)\n                        \n                        \n                            TCacheKey   (src/.../cache.service.ts)\n                        \n                        \n                            TCacheResult   (src/.../cache.service.ts)\n                        \n                        \n                            TRPC$Config   (src/.../trpc.instance.ts)\n                        \n                        \n                            TRPCProcedure   (src/.../trpc.instance.ts)\n                        \n                        \n                            TRPCRouters   (src/.../trpc.routes.ts)\n                        \n                        \n                            TRPCRouterType   (src/.../trpc.instance.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/database/prisma.extension.ts\n    \n    \n        \n            \n                \n                    \n                    AllModelNames\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExtendedPrismaClient\n                \n            \n            \n                \n                        ReturnType<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelCreateInput\n                \n            \n            \n                \n                        NonNullable<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelFindInput\n                \n            \n            \n                \n                        NonNullable<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelInputData\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelInputWhere\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelName\n                \n            \n            \n                \n                            Prisma.ModelName\n\n                \n            \n        \n    \n    src/modules/casl/ability.class.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        PureAbility<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PrismaSubjects\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/shared/trpc/trpc.instance.ts\n    \n    \n        \n            \n                \n                    \n                    AppRouter\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Caller\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RouterInputs\n                \n            \n            \n                \n                        inferRouterInputs\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RouterOutputs\n                \n            \n            \n                \n                        inferRouterOutputs\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TRPC$Config\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TRPCProcedure\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TRPCRouterType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/global/env.ts\n    \n    \n        \n            \n                \n                    \n                    BaseType\n                \n            \n            \n                \n                    基础类型接口\n\n                \n            \n            \n                \n                        boolean | number | string | undefined | null\n\n                \n            \n        \n    \n    src/utils/schedule.util.ts\n    \n    \n        \n            \n                \n                    \n                    BatchNotifyFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NotifyCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NotifyFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    test/helper/create-service-unit.ts\n    \n    \n        \n            \n                \n                    \n                    ClassType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/shared/trpc/trpc.context.ts\n    \n    \n        \n            \n                \n                    \n                    Context\n                \n            \n            \n                \n                        Awaited>\n\n                \n            \n        \n    \n    src/utils/zod.util.ts\n    \n    \n        \n            \n                \n                    \n                    DefaultKeys\n                \n            \n            \n                \n                        \"id\" | \"createdAt\" | \"updatedAt\" | \"deletedAt\" | \"userId\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Projection\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/shared/trpc/trpc.service.ts\n    \n    \n        \n            \n                \n                    \n                    ExtractRouterType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MapToRouterType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Routers\n                \n            \n            \n                \n                            MapToRouterType\n\n                \n            \n        \n    \n    src/modules/file/file.constant.ts\n    \n    \n        \n            \n                \n                    \n                    FileType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/common/filters/prisma-client-exception.filter.ts\n    \n    \n        \n            \n                \n                    \n                    GqlContextType\n                \n            \n            \n                \n                            \"graphql\" | ContextType\n\n                \n            \n        \n    \n    src/config/app.config.ts\n    \n    \n        \n            \n                \n                    \n                    IAppConfig\n                \n            \n            \n                \n                        ConfigType<>\n\n                \n            \n        \n    \n    src/config/database.config.ts\n    \n    \n        \n            \n                \n                    \n                    IDatabaseConfig\n                \n            \n            \n                \n                        ConfigType<>\n\n                \n            \n        \n    \n    src/config/google.config.ts\n    \n    \n        \n            \n                \n                    \n                    IGoogleConfig\n                \n            \n            \n                \n                        ConfigType<>\n\n                \n            \n        \n    \n    src/common/dto/image.dto.ts\n    \n    \n        \n            \n                \n                    \n                    Image\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/config/mailer.config.ts\n    \n    \n        \n            \n                \n                    \n                    IMailerConfig\n                \n            \n            \n                \n                        ConfigType<>\n\n                \n            \n        \n    \n    src/config/redis.config.ts\n    \n    \n        \n            \n                \n                    \n                    IRedisConfig\n                \n            \n            \n                \n                        ConfigType<>\n\n                \n            \n        \n    \n    src/config/security.config.ts\n    \n    \n        \n            \n                \n                    \n                    ISecurityConfig\n                \n            \n            \n                \n                        ConfigType<>\n\n                \n            \n        \n    \n    src/config/sms.config.ts\n    \n    \n        \n            \n                \n                    \n                    ISmsConfig\n                \n            \n            \n                \n                        ConfigType<>\n\n                \n            \n        \n    \n    src/modules/auth/auth.constant.ts\n    \n    \n        \n            \n                \n                    \n                    LoginType\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/shared/trpc/trpc.meta.ts\n    \n    \n        \n            \n                \n                    \n                    Meta\n                \n            \n            \n                \n                            PolicyObject\n\n                \n            \n        \n    \n    src/shared/trpc/trpc.helper.ts\n    \n    \n        \n            \n                \n                    \n                    ObjWithKey\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/auth/decorators/auth-user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    Payload\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/casl/policy.decortor.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/utils/redis.util.ts\n    \n    \n        \n            \n                \n                    \n                    Prefix\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/shared/cache/cache.service.ts\n    \n    \n        \n            \n                \n                    \n                    TCacheKey\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TCacheResult\n                \n            \n            \n                \n                        Promise\n\n                \n            \n        \n    \n    src/shared/trpc/trpc.routes.ts\n    \n    \n        \n            \n                \n                    \n                    TRPCRouters\n                \n            \n            \n                \n                        [UserTrpcRouter, TodoTrpcRouter, NoteTrpcRouter, HistoryTrpcRouter, CollectionTrpcRouter, CommentTrpcRouter, InteractTrpcRouter, NotifactionTrpcRouter]\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
