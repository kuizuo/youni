// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"

  allowAny = false
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique()
  password  String     @db.VarChar(255)
  avatar    String?    @db.VarChar(255)
  email     String?    @unique() @db.VarChar(255)
  phone     String?    @db.VarChar(255)
  remark    String?    @db.VarChar(255)
  psalt     String     @db.VarChar(32)
  status    Int?       @default(1) @db.SmallInt
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt @map("updated_at")
  nickname  String?    @db.VarChar(255)
  profile   Profile?
  deptId    Int?
  dept      Dept?      @relation(fields: [deptId], references: [id])
  roles     Role[]
  todos     Todo[]
  tokens    Token[]
  LoginLogs LoginLog[]
}

model Profile {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Role {
  id        Int      @id @default(autoincrement())
  value     String   @unique() @db.VarChar(255)
  name      String   @unique() @db.VarChar(50)
  remark    String?  @db.VarChar(255)
  default   Boolean  @default(false) @db.Boolean
  status    Int?     @default(1) @db.SmallInt
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]
  menus     Menu[]
}

model Menu {
  id         Int      @id @default(autoincrement())
  parent     Int?
  path       String?  @db.VarChar(255)
  name       String   @db.VarChar(255)
  permission String?  @db.VarChar(255)
  type       Int      @default(0) @db.SmallInt
  icon       String?  @default("") @db.VarChar(255)
  order      Int?     @default(0)
  component  String?  @db.VarChar(255)
  keepalive  Int      @default(1) @db.SmallInt
  show       Int      @default(1) @db.SmallInt
  status     Int      @default(1) @db.SmallInt
  external   Int      @default(0) @db.SmallInt
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at")
  roles      Role[]
}

model Dept {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  orderNo   Int?     @default(0)
  mpath     String?  @default("") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at")
  parentId  Int?     @unique
  parent    Dept?    @relation("DeptToDept", fields: [parentId], references: [id])
  children  Dept[]   @relation("DeptToDept")
  userId    Int?
  user      User[]
}

model Token {
  id           String      @id @db.VarChar(36)
  value        String      @db.VarChar(500)
  expiredAt    DateTime    @db.Timestamptz(6)
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  userId       Int?
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  refreshToken FreshToken?
}

model FreshToken {
  id        String   @id @db.VarChar(36)
  value     String   @db.VarChar(500)
  expiredAt DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  tokenId   String?  @unique @db.VarChar(36)
  token     Token?   @relation(fields: [tokenId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Todo {
  id        Int      @id @default(autoincrement())
  value     String   @db.VarChar(255)
  status    Int      @default(0) @db.SmallInt
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  ip        String?  @db.VarChar(255)
  ua        String?  @db.VarChar(500)
  address   String?  @db.VarChar(255)
  provider  String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Config {
  id        Int      @id @default(autoincrement())
  key       String   @unique() @db.VarChar(50)
  name      String   @db.VarChar(50)
  value     String?  @db.VarChar(255)
  remark    String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Task {
  id         Int       @id @default(autoincrement())
  name       String    @unique() @db.VarChar(50)
  service    String    @db.VarChar(255)
  type       Int       @default(0) @db.SmallInt
  status     Int       @default(1) @db.SmallInt
  start_time DateTime? @db.Timestamptz(6)
  end_time   DateTime? @db.Timestamptz(6)
  limit      Int?      @default(0)
  cron       String?   @db.VarChar(255)
  every      Int?
  data       String?   @db.Text
  job_opts   String?   @db.Text
  remark     String?   @db.VarChar(255)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @map("updated_at")
  taskLogs   TaskLog[]
}

model TaskLog {
  id           Int      @id @default(autoincrement())
  task_id      Int?
  status       Int      @default(0) @db.SmallInt
  detail       String?  @db.Text
  consume_time Int?     @default(0)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at")
  sys_task     Task?    @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
